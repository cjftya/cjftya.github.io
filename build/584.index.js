"use strict";(self.webpackChunkwcard=self.webpackChunkwcard||[]).push([[584],{4732:(e,t,r)=>{var i=r(8507);class n{static init(e){Object.defineProperty(this,"resizeTo",{set(e){globalThis.removeEventListener("resize",this.queueResize),this._resizeTo=e,e&&(globalThis.addEventListener("resize",this.queueResize),this.resize())},get(){return this._resizeTo}}),this.queueResize=()=>{this._resizeTo&&(this._cancelResize(),this._resizeId=requestAnimationFrame((()=>this.resize())))},this._cancelResize=()=>{this._resizeId&&(cancelAnimationFrame(this._resizeId),this._resizeId=null)},this.resize=()=>{if(!this._resizeTo)return;let e,t;if(this._cancelResize(),this._resizeTo===globalThis.window)e=globalThis.innerWidth,t=globalThis.innerHeight;else{const{clientWidth:r,clientHeight:i}=this._resizeTo;e=r,t=i}this.renderer.resize(e,t),this.render()},this._resizeId=null,this._resizeTo=null,this.resizeTo=e.resizeTo||null}static destroy(){globalThis.removeEventListener("resize",this.queueResize),this._cancelResize(),this._cancelResize=null,this.queueResize=null,this.resizeTo=null,this.resize=null}}n.extension=i.Ag.Application;var s=r(4458),a=r(7309);class o{static init(e){e=Object.assign({autoStart:!0,sharedTicker:!1},e),Object.defineProperty(this,"ticker",{set(e){this._ticker&&this._ticker.remove(this.render,this),this._ticker=e,e&&e.add(this.render,this,s.d.LOW)},get(){return this._ticker}}),this.stop=()=>{this._ticker.stop()},this.start=()=>{this._ticker.start()},this._ticker=null,this.ticker=e.sharedTicker?a.R.shared:new a.R,e.autoStart&&this.start()}static destroy(){if(this._ticker){const e=this._ticker;this.ticker=null,e.destroy()}}}o.extension=i.Ag.Application,i.XO.add(n),i.XO.add(o)},9935:(e,t,r)=>{var i=r(8507);class n{constructor(e){this._renderer=e}push(e,t,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"filter",canBundle:!1,action:"pushFilter",container:t,filterEffect:e})}pop(e,t,r){this._renderer.renderPipes.batch.break(r),r.add({renderPipeId:"filter",action:"popFilter",canBundle:!1})}execute(e){"pushFilter"===e.action?this._renderer.filter.push(e):"popFilter"===e.action&&this._renderer.filter.pop()}destroy(){this._renderer=null}}n.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"filter"};var s=r(9313),a=r(5101),o=r(3513),l=r(6011),h=r(5811),d=r(4492),u=r(2437),c=r(5099),p=r(9636),f=r(2208);const g=new s.u;function m(e,t){return t.clear(),x(e,t),t.isValid||t.set(0,0,0,0),e.renderGroup?t.applyMatrix(e.renderGroup.localTransform):t.applyMatrix(e.parentRenderGroup.worldTransform),t}function x(e,t){if(7!==e.localDisplayStatus||!e.measurable)return;const r=!!e.effects.length;let i=t;if((e.renderGroup||r)&&(i=f.o.get().clear()),e.boundsArea)t.addRect(e.boundsArea,e.worldTransform);else{if(e.renderPipeId){const t=e.bounds;i.addFrame(t.minX,t.minY,t.maxX,t.maxY,e.groupTransform)}const t=e.children;for(let e=0;e<t.length;e++)x(t[e],i)}if(r){let r=!1;for(let t=0;t<e.effects.length;t++)e.effects[t].addBounds&&(r||(r=!0,i.applyMatrix(e.parentRenderGroup.worldTransform)),e.effects[t].addBounds(i,!0));r&&(i.applyMatrix(e.parentRenderGroup.worldTransform.copyTo(g).invert()),t.addBounds(i,e.relativeGroupTransform)),t.addBounds(i),f.o.return(i)}else e.renderGroup&&(t.addBounds(i,e.relativeGroupTransform),f.o.return(i))}var _=r(268);const b=new l.V({attributes:{aPosition:{buffer:new Float32Array([0,0,1,0,1,1,0,1]),format:"float32x2",stride:8,offset:0}},indexBuffer:new Uint32Array([0,1,2,0,2,3])});class y{constructor(e){this._filterStackIndex=0,this._filterStack=[],this._filterGlobalUniforms=new h.k({uInputSize:{value:new Float32Array(4),type:"vec4<f32>"},uInputPixel:{value:new Float32Array(4),type:"vec4<f32>"},uInputClamp:{value:new Float32Array(4),type:"vec4<f32>"},uOutputFrame:{value:new Float32Array(4),type:"vec4<f32>"},uGlobalFrame:{value:new Float32Array(4),type:"vec4<f32>"},uOutputTexture:{value:new Float32Array(4),type:"vec4<f32>"}}),this._globalFilterBindGroup=new o.T({}),this.renderer=e}get activeBackTexture(){return this._activeFilterData?.backTexture}push(e){const t=this.renderer,r=e.filterEffect.filters;this._filterStack[this._filterStackIndex]||(this._filterStack[this._filterStackIndex]=this._getFilterData());const i=this._filterStack[this._filterStackIndex];if(this._filterStackIndex++,0===r.length)return void(i.skip=!0);const n=i.bounds;e.renderables?function(e,t){t.clear();const r=t.matrix;for(let r=0;r<e.length;r++){const i=e[r];i.globalDisplayStatus<7||(t.matrix=i.worldTransform,i.addBounds(t))}t.matrix=r}(e.renderables,n):e.filterEffect.filterArea?(n.clear(),n.addRect(e.filterEffect.filterArea),n.applyMatrix(e.container.worldTransform)):m(e.container,n);const s=t.renderTarget.renderTarget.colorTexture.source;let a=1/0,o=0,l=!0,h=!1,d=!1,c=!0;for(let e=0;e<r.length;e++){const i=r[e];if(a=Math.min(a,"inherit"===i.resolution?s._resolution:i.resolution),o+=i.padding,"off"===i.antialias?l=!1:"inherit"===i.antialias&&l&&(l=s.antialias),i.clipToViewport||(c=!1),!(i.compatibleRenderers&t.type)){d=!1;break}if(i.blendRequired&&!(t.backBuffer?.useBackBuffer??1)){(0,_.R)("Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options."),d=!1;break}d=i.enabled||d,h=h||i.blendRequired}if(d){if(n.scale(a),c){const e=t.renderTarget.rootViewPort;n.fitBounds(0,e.width,0,e.height)}n.ceil().scale(1/a).pad(0|o),n.isPositive?(i.skip=!1,i.bounds=n,i.blendRequired=h,i.container=e.container,i.filterEffect=e.filterEffect,i.previousRenderSurface=t.renderTarget.renderSurface,i.inputTexture=u.W.getOptimalTexture(n.width,n.height,a,l),t.renderTarget.bind(i.inputTexture,!0),t.globalUniforms.push({offset:n})):i.skip=!0}else i.skip=!0}pop(){const e=this.renderer;this._filterStackIndex--;const t=this._filterStack[this._filterStackIndex];if(t.skip)return;this._activeFilterData=t;const r=t.inputTexture,i=t.bounds;let n=d.g.EMPTY;if(e.renderTarget.finishRenderPass(),t.blendRequired){const r=this._filterStackIndex>0?this._filterStack[this._filterStackIndex-1].bounds:null,s=e.renderTarget.getRenderTarget(t.previousRenderSurface);n=this.getBackTexture(s,i,r)}t.backTexture=n;const s=t.filterEffect.filters;if(this._globalFilterBindGroup.setResource(r.source.style,2),this._globalFilterBindGroup.setResource(n.source,3),e.globalUniforms.pop(),1===s.length)s[0].apply(this,r,t.previousRenderSurface,!1),u.W.returnTexture(r);else{let e=t.inputTexture,r=u.W.getOptimalTexture(i.width,i.height,e.source._resolution,!1),n=0;for(n=0;n<s.length-1;++n){s[n].apply(this,e,r,!0);const t=e;e=r,r=t}s[n].apply(this,e,t.previousRenderSurface,!1),u.W.returnTexture(e),u.W.returnTexture(r)}t.blendRequired&&u.W.returnTexture(n)}getBackTexture(e,t,r){const i=e.colorTexture.source._resolution,n=u.W.getOptimalTexture(t.width,t.height,i,!1);let s=t.minX,a=t.minY;r&&(s-=r.minX,a-=r.minY),s=Math.floor(s*i),a=Math.floor(a*i);const o=Math.ceil(t.width*i),l=Math.ceil(t.height*i);return this.renderer.renderTarget.copyToTexture(e,n,{x:s,y:a},{width:o,height:l},{x:0,y:0}),n}applyFilter(e,t,r,i){const n=this.renderer,s=this._filterStack[this._filterStackIndex],o=s.bounds,l=a.b.shared,h=s.previousRenderSurface===r;let u=this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution,p=this._filterStackIndex-1;for(;p>0&&this._filterStack[p].skip;)--p;p>0&&(u=this._filterStack[p].inputTexture.source._resolution);const f=this._filterGlobalUniforms,g=f.uniforms,m=g.uOutputFrame,x=g.uInputSize,_=g.uInputPixel,y=g.uInputClamp,v=g.uGlobalFrame,T=g.uOutputTexture;if(h){let e=this._filterStackIndex;for(;e>0;){e--;const t=this._filterStack[this._filterStackIndex-1];if(!t.skip){l.x=t.bounds.minX,l.y=t.bounds.minY;break}}m[0]=o.minX-l.x,m[1]=o.minY-l.y}else m[0]=0,m[1]=0;m[2]=t.frame.width,m[3]=t.frame.height,x[0]=t.source.width,x[1]=t.source.height,x[2]=1/x[0],x[3]=1/x[1],_[0]=t.source.pixelWidth,_[1]=t.source.pixelHeight,_[2]=1/_[0],_[3]=1/_[1],y[0]=.5*_[2],y[1]=.5*_[3],y[2]=t.frame.width*x[2]-.5*_[2],y[3]=t.frame.height*x[3]-.5*_[3];const w=this.renderer.renderTarget.rootRenderTarget.colorTexture;v[0]=l.x*u,v[1]=l.y*u,v[2]=w.source.width*u,v[3]=w.source.height*u;const S=this.renderer.renderTarget.getRenderTarget(r);if(n.renderTarget.bind(r,!!i),r instanceof d.g?(T[0]=r.frame.width,T[1]=r.frame.height):(T[0]=S.width,T[1]=S.height),T[2]=S.isRoot?-1:1,f.update(),n.renderPipes.uniformBatch){const e=n.renderPipes.uniformBatch.getUboResource(f);this._globalFilterBindGroup.setResource(e,0)}else this._globalFilterBindGroup.setResource(f,0);this._globalFilterBindGroup.setResource(t.source,1),this._globalFilterBindGroup.setResource(t.source.style,2),e.groups[0]=this._globalFilterBindGroup,n.encoder.draw({geometry:b,shader:e,state:e._state,topology:"triangle-list"}),n.type===c.W.WEBGL&&n.renderTarget.finishRenderPass()}_getFilterData(){return{skip:!1,inputTexture:null,bounds:new p.c,container:null,filterEffect:null,blendRequired:!1,previousRenderSurface:null}}calculateSpriteMatrix(e,t){const r=this._activeFilterData,i=e.set(r.inputTexture._source.width,0,0,r.inputTexture._source.height,r.bounds.minX,r.bounds.minY),n=t.worldTransform.copyTo(s.u.shared);return n.invert(),i.prepend(n),i.scale(1/t.texture.frame.width,1/t.texture.frame.height),i.translate(t.anchor.x,t.anchor.y),i}}y.extension={type:[i.Ag.WebGLSystem,i.Ag.WebGPUSystem],name:"filter"},i.XO.add(y),i.XO.add(n)},2067:(e,t,r)=>{r.d(t,{Ls:()=>i,_Q:()=>n,mA:()=>s});const i={name:"local-uniform-bit",vertex:{header:"\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        ",main:"\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        ",end:"\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        "}},n={...i,vertex:{...i.vertex,header:i.vertex.header.replace("group(1)","group(2)")}},s={name:"local-uniform-bit",vertex:{header:"\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        ",main:"\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        ",end:"\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        "}}},7547:(e,t,r)=>{r.d(t,{U:()=>s});const i={normal:0,add:1,multiply:2,screen:3,overlay:4,erase:5,"normal-npm":6,"add-npm":7,"screen-npm":8,min:9,max:10},n=class e{constructor(){this.data=0,this.blendMode="normal",this.polygonOffset=0,this.blend=!0,this.depthMask=!0}get blend(){return!!(1&this.data)}set blend(e){!!(1&this.data)!==e&&(this.data^=1)}get offsets(){return!!(2&this.data)}set offsets(e){!!(2&this.data)!==e&&(this.data^=2)}set cullMode(e){"none"!==e?(this.culling=!0,this.clockwiseFrontFace="front"===e):this.culling=!1}get cullMode(){return this.culling?this.clockwiseFrontFace?"front":"back":"none"}get culling(){return!!(4&this.data)}set culling(e){!!(4&this.data)!==e&&(this.data^=4)}get depthTest(){return!!(8&this.data)}set depthTest(e){!!(8&this.data)!==e&&(this.data^=8)}get depthMask(){return!!(32&this.data)}set depthMask(e){!!(32&this.data)!==e&&(this.data^=32)}get clockwiseFrontFace(){return!!(16&this.data)}set clockwiseFrontFace(e){!!(16&this.data)!==e&&(this.data^=16)}get blendMode(){return this._blendMode}set blendMode(e){this.blend="none"!==e,this._blendMode=e,this._blendModeId=i[e]||0}get polygonOffset(){return this._polygonOffset}set polygonOffset(e){this.offsets=!!e,this._polygonOffset=e}toString(){return`[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`}static for2d(){const t=new e;return t.depthTest=!1,t.blend=!0,t}};n.default2d=n.for2d();let s=n},7608:(e,t,r)=>{r.d(t,{N:()=>s});var i=r(1761),n=r(9939);const s=new class{constructor(e){this._canvasPool=Object.create(null),this.canvasOptions=e||{},this.enableFullScreen=!1}_createCanvasAndContext(e,t){const r=i.e.get().createCanvas();r.width=e,r.height=t;const n=r.getContext("2d");return{canvas:r,context:n}}getOptimalCanvasAndContext(e,t,r=1){e=Math.ceil(e*r-1e-6),t=Math.ceil(t*r-1e-6);const i=((e=(0,n.U5)(e))<<17)+((t=(0,n.U5)(t))<<1);this._canvasPool[i]||(this._canvasPool[i]=[]);let s=this._canvasPool[i].pop();return s||(s=this._createCanvasAndContext(e,t)),s}returnCanvasAndContext(e){const t=e.canvas,{width:r,height:i}=t,n=(r<<17)+(i<<1);e.context.clearRect(0,0,r,i),this._canvasPool[n].push(e)}clear(){this._canvasPool={}}}},2437:(e,t,r)=>{r.d(t,{W:()=>o});var i=r(9939),n=r(1285),s=r(4492);let a=0;const o=new class{constructor(e){this._poolKeyHash=Object.create(null),this._texturePool={},this.textureOptions=e||{},this.enableFullScreen=!1}createTexture(e,t,r){const i=new n.v({...this.textureOptions,width:e,height:t,resolution:1,antialias:r,autoGarbageCollect:!0});return new s.g({source:i,label:"texturePool_"+a++})}getOptimalTexture(e,t,r=1,n){let s=Math.ceil(e*r-1e-6),a=Math.ceil(t*r-1e-6);s=(0,i.U5)(s),a=(0,i.U5)(a);const o=(s<<17)+(a<<1)+(n?1:0);this._texturePool[o]||(this._texturePool[o]=[]);let l=this._texturePool[o].pop();return l||(l=this.createTexture(s,a,n)),l.source._resolution=r,l.source.width=s/r,l.source.height=a/r,l.source.pixelWidth=s,l.source.pixelHeight=a,l.frame.x=0,l.frame.y=0,l.frame.width=e,l.frame.height=t,l.updateUvs(),this._poolKeyHash[l.uid]=o,l}getSameSizeTexture(e,t=!1){const r=e.source;return this.getOptimalTexture(e.width,e.height,r._resolution,t)}returnTexture(e){const t=this._poolKeyHash[e.uid];this._texturePool[t].push(e)}clear(e){if(e=!1!==e)for(const e in this._texturePool){const t=this._texturePool[e];if(t)for(let e=0;e<t.length;e++)t[e].destroy(!0)}this._texturePool={}}}},2760:(e,t,r)=>{function i(e,t,r){const i=(e>>24&255)/255;t[r++]=(255&e)/255*i,t[r++]=(e>>8&255)/255*i,t[r++]=(e>>16&255)/255*i,t[r++]=i}r.d(t,{V:()=>i})},8928:(e,t,r)=>{var i=r(8507),n=r(3428),s=r(7547),a=r(8218),o=r(2760),l=r(4389);class h{constructor(e,t){this.state=s.U.for2d(),this._graphicsBatchesHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.renderer=e,this._adaptor=t,this._adaptor.init(),this.renderer.renderableGC.addManagedHash(this,"_graphicsBatchesHash")}validateRenderable(e){const t=e.context,r=!!this._graphicsBatchesHash[e.uid],i=this.renderer.graphicsContext.updateGpuContext(t);return!(!i.isBatchable&&r===i.isBatchable)}addRenderable(e,t){const r=this.renderer.graphicsContext.updateGpuContext(e.context);e.didViewUpdate&&this._rebuild(e),r.isBatchable?this._addToBatcher(e,t):(this.renderer.renderPipes.batch.break(t),t.add(e))}updateRenderable(e){const t=this._graphicsBatchesHash[e.uid];if(t)for(let e=0;e<t.length;e++){const r=t[e];r._batcher.updateElement(r)}}destroyRenderable(e){this._graphicsBatchesHash[e.uid]&&this._removeBatchForRenderable(e.uid),e.off("destroyed",this._destroyRenderableBound)}execute(e){if(!e.isRenderable)return;const t=this.renderer,r=e.context;if(!t.graphicsContext.getGpuContext(r).batches.length)return;const i=r.customShader||this._adaptor.shader;this.state.blendMode=e.groupBlendMode;const n=i.resources.localUniforms.uniforms;n.uTransformMatrix=e.groupTransform,n.uRound=t._roundPixels|e._roundPixels,(0,o.V)(e.groupColorAlpha,n.uColor,0),this._adaptor.execute(this,e)}_rebuild(e){const t=!!this._graphicsBatchesHash[e.uid],r=this.renderer.graphicsContext.updateGpuContext(e.context);t&&this._removeBatchForRenderable(e.uid),r.isBatchable&&this._initBatchesForRenderable(e),e.batched=r.isBatchable}_addToBatcher(e,t){const r=this.renderer.renderPipes.batch,i=this._getBatchesForRenderable(e);for(let e=0;e<i.length;e++){const n=i[e];r.addToBatch(n,t)}}_getBatchesForRenderable(e){return this._graphicsBatchesHash[e.uid]||this._initBatchesForRenderable(e)}_initBatchesForRenderable(e){const t=e.context,r=this.renderer.graphicsContext.getGpuContext(t),i=this.renderer._roundPixels|e._roundPixels,n=r.batches.map((t=>{const r=a.Z.get(l.G);return t.copyTo(r),r.renderable=e,r.roundPixels=i,r}));return void 0===this._graphicsBatchesHash[e.uid]&&e.on("destroyed",this._destroyRenderableBound),this._graphicsBatchesHash[e.uid]=n,n}_removeBatchForRenderable(e){this._graphicsBatchesHash[e].forEach((e=>{a.Z.return(e)})),this._graphicsBatchesHash[e]=null}destroy(){this.renderer=null,this._adaptor.destroy(),this._adaptor=null,this.state=null;for(const e in this._graphicsBatchesHash)this._removeBatchForRenderable(e);this._graphicsBatchesHash=null}}h.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"graphics"},i.XO.add(h),i.XO.add(n.GH)},5285:(e,t,r)=>{var i=r(8507),n=r(9313),s=r(3513),a=r(5811),o=r(8639),l=r(8218),h=r(2760),d=r(8734);class u{constructor(e,t){this.localUniforms=new a.k({uTransformMatrix:{value:new n.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),this.localUniformsBindGroup=new s.T({0:this.localUniforms}),this._meshDataHash=Object.create(null),this._gpuBatchableMeshHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.renderer=e,this._adaptor=t,this._adaptor.init(),e.renderableGC.addManagedHash(this,"_gpuBatchableMeshHash"),e.renderableGC.addManagedHash(this,"_meshDataHash")}validateRenderable(e){const t=this._getMeshData(e),r=t.batched,i=e.batched;if(t.batched=i,r!==i)return!0;if(i){const r=e._geometry;if(r.indices.length!==t.indexSize||r.positions.length!==t.vertexSize)return t.indexSize=r.indices.length,t.vertexSize=r.positions.length,!0;const i=this._getBatchableMesh(e),n=e.texture;if(i.texture._source!==n._source&&i.texture._source!==n._source)return!i._batcher.checkAndUpdateTexture(i,n)}return!1}addRenderable(e,t){const r=this.renderer.renderPipes.batch,{batched:i}=this._getMeshData(e);if(i){const i=this._getBatchableMesh(e);i.texture=e._texture,i.geometry=e._geometry,r.addToBatch(i,t)}else r.break(t),t.add(e)}updateRenderable(e){if(e.batched){const t=this._gpuBatchableMeshHash[e.uid];t.texture=e._texture,t.geometry=e._geometry,t._batcher.updateElement(t)}}destroyRenderable(e){this._meshDataHash[e.uid]=null;const t=this._gpuBatchableMeshHash[e.uid];t&&(l.Z.return(t),this._gpuBatchableMeshHash[e.uid]=null),e.off("destroyed",this._destroyRenderableBound)}execute(e){if(!e.isRenderable)return;e.state.blendMode=(0,o.i)(e.groupBlendMode,e.texture._source);const t=this.localUniforms;t.uniforms.uTransformMatrix=e.groupTransform,t.uniforms.uRound=this.renderer._roundPixels|e._roundPixels,t.update(),(0,h.V)(e.groupColorAlpha,t.uniforms.uColor,0),this._adaptor.execute(this,e)}_getMeshData(e){return this._meshDataHash[e.uid]||this._initMeshData(e)}_initMeshData(e){return this._meshDataHash[e.uid]={batched:e.batched,indexSize:e._geometry.indices?.length,vertexSize:e._geometry.positions?.length},e.on("destroyed",this._destroyRenderableBound),this._meshDataHash[e.uid]}_getBatchableMesh(e){return this._gpuBatchableMeshHash[e.uid]||this._initBatchableMesh(e)}_initBatchableMesh(e){const t=l.Z.get(d.U);return t.renderable=e,t.texture=e._texture,t.transform=e.groupTransform,t.roundPixels=this.renderer._roundPixels|e._roundPixels,this._gpuBatchableMeshHash[e.uid]=t,t}destroy(){for(const e in this._gpuBatchableMeshHash)this._gpuBatchableMeshHash[e]&&l.Z.return(this._gpuBatchableMeshHash[e]);this._gpuBatchableMeshHash=null,this._meshDataHash=null,this.localUniforms=null,this.localUniformsBindGroup=null,this._adaptor.destroy(),this._adaptor=null,this.renderer=null}}u.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"mesh"},i.XO.add(u)},8734:(e,t,r)=>{r.d(t,{U:()=>i});class i{constructor(){this.batcherName="default",this.packAsQuad=!1,this.indexOffset=0,this.attributeOffset=0,this.roundPixels=0,this._batcher=null,this._batch=null,this._uvUpdateId=-1,this._textureMatrixUpdateId=-1}get blendMode(){return this.renderable.groupBlendMode}reset(){this.renderable=null,this.texture=null,this._batcher=null,this._batch=null,this.geometry=null,this._uvUpdateId=-1,this._textureMatrixUpdateId=-1}get uvs(){const e=this.geometry.getBuffer("aUV"),t=e.data;let r=t;const i=this.texture.textureMatrix;return i.isSimple||(r=this._transformedUvs,this._textureMatrixUpdateId===i._updateID&&this._uvUpdateId===e._updateID||((!r||r.length<t.length)&&(r=this._transformedUvs=new Float32Array(t.length)),this._textureMatrixUpdateId=i._updateID,this._uvUpdateId=e._updateID,i.multiplyUvs(t,r))),r}get positions(){return this.geometry.positions}get indices(){return this.geometry.indices}get color(){return this.renderable.groupColorAlpha}get groupTransform(){return this.renderable.groupTransform}get attributeSize(){return this.geometry.positions.length/2}get indexSize(){return this.geometry.indices.length}}},5060:(e,t,r)=>{r.d(t,{u:()=>l});var i=r(949),n=r(1132),s=r(6011),a=r(4670);const o=class e extends s.V{constructor(...t){let r=t[0]??{};r instanceof Float32Array&&((0,a.t6)(a.lj,"use new MeshGeometry({ positions, uvs, indices }) instead"),r={positions:r,uvs:t[1],indices:t[2]}),r={...e.defaultOptions,...r};const s=r.positions||new Float32Array([0,0,1,0,1,1,0,1]),o=r.uvs||new Float32Array([0,0,1,0,1,1,0,1]),l=r.indices||new Uint32Array([0,1,2,0,2,3]),h=r.shrinkBuffersToFit;super({attributes:{aPosition:{buffer:new i.h({data:s,label:"attribute-mesh-positions",shrinkToFit:h,usage:n.S.VERTEX|n.S.COPY_DST}),format:"float32x2",stride:8,offset:0},aUV:{buffer:new i.h({data:o,label:"attribute-mesh-uvs",shrinkToFit:h,usage:n.S.VERTEX|n.S.COPY_DST}),format:"float32x2",stride:8,offset:0}},indexBuffer:new i.h({data:l,label:"index-mesh-buffer",shrinkToFit:h,usage:n.S.INDEX|n.S.COPY_DST}),topology:r.topology}),this.batchMode="auto"}get positions(){return this.attributes.aPosition.buffer.data}set positions(e){this.attributes.aPosition.buffer.data=e}get uvs(){return this.attributes.aUV.buffer.data}set uvs(e){this.attributes.aUV.buffer.data=e}get indices(){return this.indexBuffer.data}set indices(e){this.indexBuffer.data=e}};o.defaultOptions={topology:"triangle-list",shrinkBuffersToFit:!1};let l=o},9305:(e,t,r)=>{var i=r(8507);class n{execute(e,t){const r=e.state,i=e.renderer,n=t.shader||e.defaultShader;n.resources.uTexture=t.texture._source,n.resources.uniforms=e.localUniforms;const s=i.gl,a=e.getBuffers(t);i.shader.bind(n),i.state.set(r),i.geometry.bind(a.geometry,n.glProgram);const o=2===a.geometry.indexBuffer.data.BYTES_PER_ELEMENT?s.UNSIGNED_SHORT:s.UNSIGNED_INT;s.drawElements(s.TRIANGLES,6*t.particleChildren.length,o,0)}}var s=r(9313),a=r(5811),o=r(8639),l=r(7547),h=r(2760),d=r(949),u=r(1132),c=r(6011),p=r(8306),f=r(1460);function g(e,t=null){const r=6*e;if((t=r>65535?t||new Uint32Array(r):t||new Uint16Array(r)).length!==r)throw new Error(`Out buffer length is incorrect, got ${t.length} and expected ${r}`);for(let e=0,i=0;e<r;e+=6,i+=4)t[e+0]=i+0,t[e+1]=i+1,t[e+2]=i+2,t[e+3]=i+0,t[e+4]=i+2,t[e+5]=i+3;return t}function m(e,t){const r=[];r.push("\n      \n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            ");let i=0;for(const n in e){const s=e[n];t===s.dynamic&&(r.push(`offset = index + ${i}`),r.push(s.code),i+=(0,p.m)(s.format).stride/4)}r.push("\n            index += stride * 4;\n        }\n    "),r.unshift(`\n        var stride = ${i};\n    `);const n=r.join("\n");return new Function("ps","f32v","u32v",n)}class x{constructor(e){this._size=0,this._generateParticleUpdateCache={};const t=this._size=e.size??1e3,r=e.properties;let i=0,n=0;for(const e in r){const t=r[e],s=(0,p.m)(t.format);t.dynamic?n+=s.stride:i+=s.stride}this._dynamicStride=n/4,this._staticStride=i/4,this.staticAttributeBuffer=new f.u(4*t*i),this.dynamicAttributeBuffer=new f.u(4*t*n),this.indexBuffer=g(t);const s=new c.V;let a=0,o=0;this._staticBuffer=new d.h({data:new Float32Array(1),label:"static-particle-buffer",shrinkToFit:!1,usage:u.S.VERTEX|u.S.COPY_DST}),this._dynamicBuffer=new d.h({data:new Float32Array(1),label:"dynamic-particle-buffer",shrinkToFit:!1,usage:u.S.VERTEX|u.S.COPY_DST});for(const e in r){const t=r[e],i=(0,p.m)(t.format);t.dynamic?(s.addAttribute(t.attributeName,{buffer:this._dynamicBuffer,stride:4*this._dynamicStride,offset:4*a,format:t.format}),a+=i.size):(s.addAttribute(t.attributeName,{buffer:this._staticBuffer,stride:4*this._staticStride,offset:4*o,format:t.format}),o+=i.size)}s.addIndex(this.indexBuffer);const l=this.getParticleUpdate(r);this._dynamicUpload=l.dynamicUpdate,this._staticUpload=l.staticUpdate,this.geometry=s}getParticleUpdate(e){const t=function(e){const t=[];for(const r in e){const i=e[r];t.push(r,i.code,i.dynamic?"d":"s")}return t.join("_")}(e);return this._generateParticleUpdateCache[t]||(this._generateParticleUpdateCache[t]=this.generateParticleUpdate(e)),this._generateParticleUpdateCache[t]}generateParticleUpdate(e){return function(e){return{dynamicUpdate:m(e,!0),staticUpdate:m(e,!1)}}(e)}update(e,t){e.length>this._size&&(t=!0,this._size=Math.max(e.length,1.5*this._size|0),this.staticAttributeBuffer=new f.u(this._size*this._staticStride*4*4),this.dynamicAttributeBuffer=new f.u(this._size*this._dynamicStride*4*4),this.indexBuffer=g(this._size),this.geometry.indexBuffer.setDataWithSize(this.indexBuffer,this.indexBuffer.byteLength,!0));const r=this.dynamicAttributeBuffer;if(this._dynamicUpload(e,r.float32View,r.uint32View),this._dynamicBuffer.setDataWithSize(this.dynamicAttributeBuffer.float32View,e.length*this._dynamicStride*4,!0),t){const t=this.staticAttributeBuffer;this._staticUpload(e,t.float32View,t.uint32View),this._staticBuffer.setDataWithSize(t.float32View,e.length*this._staticStride*4,!0)}}destroy(){this._staticBuffer.destroy(),this._dynamicBuffer.destroy(),this.geometry.destroy()}}var _=r(2577),b=r(9113),y=r(3012),v=r(8475),T=r(4492),w=r(218),S="\nstruct ParticleUniforms {\n  uProjectionMatrix:mat3x3<f32>,\n  uResolution:vec2<f32>,\n  uRoundPixels:f32,\n};\n\n@group(0) @binding(0) var<uniform> uniforms: ParticleUniforms;\n\n@group(1) @binding(0) var uTexture: texture_2d<f32>;\n@group(1) @binding(1) var uSampler : sampler;\n\nstruct VSOutput {\n    @builtin(position) position: vec4<f32>,\n    @location(0) uv : vec2<f32>,\n    @location(1) color : vec4<f32>,\n  };\n@vertex\nfn mainVertex(\n  @location(0) aVertex: vec2<f32>,\n  @location(1) aPosition: vec2<f32>,\n  @location(2) aUV: vec2<f32>,\n  @location(3) aColor: vec4<f32>,\n  @location(4) aRotation: f32,\n) -> VSOutput {\n  \n   let v = vec2(\n       aVertex.x * cos(aRotation) - aVertex.y * sin(aRotation),\n       aVertex.x * sin(aRotation) + aVertex.y * cos(aRotation)\n   ) + aPosition;\n\n   let position = vec4((uniforms.uProjectionMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\n\n  return VSOutput(\n   position,\n   aUV,\n   aColor,\n  );\n}\n\n@fragment\nfn mainFragment(\n  @location(0) uv: vec2<f32>,\n  @location(1) color: vec4<f32>,\n  @builtin(position) position: vec4<f32>,\n) -> @location(0) vec4<f32> {\n\n    var sample = textureSample(uTexture, uSampler, uv) * color;\n   \n    return sample;\n}";class C extends v.M{constructor(){super({glProgram:b.M.from({vertex:"attribute vec2 aVertex;\nattribute vec2 aUV;\nattribute vec4 aColor;\n\nattribute vec2 aPosition;\nattribute float aRotation;\n\nuniform mat3 uTranslationMatrix;\nuniform float uRound;\nuniform vec2 uResolution;\nuniform vec4 uColor;\n\nvarying vec2 vUV;\nvarying vec4 vColor;\n\nvec2 roundPixels(vec2 position, vec2 targetSize)\n{       \n    return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\n}\n\nvoid main(void){\n    float cosRotation = cos(aRotation);\n    float sinRotation = sin(aRotation);\n    float x = aVertex.x * cosRotation - aVertex.y * sinRotation;\n    float y = aVertex.x * sinRotation + aVertex.y * cosRotation;\n\n    vec2 v = vec2(x, y);\n    v = v + aPosition;\n\n    gl_Position = vec4((uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\n\n    if(uRound == 1.0)\n    {\n        gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n    }\n\n    vUV = aUV;\n    vColor = aColor * uColor;\n}\n",fragment:"varying vec2 vUV;\nvarying vec4 vColor;\n\nuniform sampler2D uTexture;\n\nvoid main(void){\n    vec4 color = texture2D(uTexture, vUV) * vColor;\n    gl_FragColor = color;\n}"}),gpuProgram:y.B.from({fragment:{source:S,entryPoint:"mainFragment"},vertex:{source:S,entryPoint:"mainVertex"}}),resources:{uTexture:T.g.WHITE.source,uSampler:new w.n({}),uniforms:{uTranslationMatrix:{value:new s.u,type:"mat3x3<f32>"},uColor:{value:new _.Q(16777215),type:"vec4<f32>"},uRound:{value:1,type:"f32"},uResolution:{value:[0,0],type:"vec2<f32>"}}}})}}class B{constructor(e,t){this.state=l.U.for2d(),this._gpuBufferHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this.localUniforms=new a.k({uTranslationMatrix:{value:new s.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array(4),type:"vec4<f32>"},uRound:{value:1,type:"f32"},uResolution:{value:[0,0],type:"vec2<f32>"}}),this.renderer=e,this.adaptor=t,this.defaultShader=new C,this.state=l.U.for2d()}validateRenderable(e){return!1}addRenderable(e,t){this.renderer.renderPipes.batch.break(t),t.add(e)}getBuffers(e){return this._gpuBufferHash[e.uid]||this._initBuffer(e)}_initBuffer(e){return this._gpuBufferHash[e.uid]=new x({size:e.particleChildren.length,properties:e._properties}),e.on("destroyed",this._destroyRenderableBound),this._gpuBufferHash[e.uid]}updateRenderable(e){}destroyRenderable(e){this._gpuBufferHash[e.uid].destroy(),this._gpuBufferHash[e.uid]=null,e.off("destroyed",this._destroyRenderableBound)}execute(e){const t=e.particleChildren;if(0===t.length)return;const r=this.renderer,i=this.getBuffers(e);e.texture||(e.texture=t[0].texture);const n=this.state;i.update(t,e._childrenDirty),e._childrenDirty=!1,n.blendMode=(0,o.i)(e.blendMode,e.texture._source);const s=this.localUniforms.uniforms,a=s.uTranslationMatrix;e.worldTransform.copyTo(a),a.prepend(r.globalUniforms.globalUniformData.projectionMatrix),s.uResolution=r.globalUniforms.globalUniformData.resolution,s.uRound=r._roundPixels|e._roundPixels,(0,h.V)(e.groupColorAlpha,s.uColor,0),this.adaptor.execute(this,e)}destroy(){this.defaultShader&&(this.defaultShader.destroy(),this.defaultShader=null)}}class M extends B{constructor(e){super(e,new n)}}M.extension={type:[i.Ag.WebGLPipes],name:"particle"};class P{execute(e,t){const r=e.renderer,i=t.shader||e.defaultShader;i.groups[0]=r.renderPipes.uniformBatch.getUniformBindGroup(e.localUniforms,!0),i.groups[1]=r.texture.getTextureBindGroup(t.texture);const n=e.state,s=e.getBuffers(t);r.encoder.draw({geometry:s.geometry,shader:t.shader||e.defaultShader,state:n,size:6*t.particleChildren.length})}}class R extends B{constructor(e){super(e,new P)}}R.extension={type:[i.Ag.WebGPUPipes],name:"particle"},i.XO.add(M),i.XO.add(R)},7252:(e,t,r)=>{var i=r(8507),n=r(8218),s=r(8734),a=r(4670),o=r(5060);const l=class e extends o.u{constructor(...e){super({});let t=e[0]??{};"number"==typeof t&&((0,a.t6)(a.lj,"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead"),t={width:t,height:e[1],verticesX:e[2],verticesY:e[3]}),this.build(t)}build(t){t={...e.defaultOptions,...t},this.verticesX=this.verticesX??t.verticesX,this.verticesY=this.verticesY??t.verticesY,this.width=this.width??t.width,this.height=this.height??t.height;const r=this.verticesX*this.verticesY,i=[],n=[],s=[],a=this.verticesX-1,o=this.verticesY-1,l=this.width/a,h=this.height/o;for(let e=0;e<r;e++){const t=e%this.verticesX,r=e/this.verticesX|0;i.push(t*l,r*h),n.push(t/a,r/o)}const d=a*o;for(let e=0;e<d;e++){const t=e%a,r=e/a|0,i=r*this.verticesX+t,n=r*this.verticesX+t+1,o=(r+1)*this.verticesX+t,l=(r+1)*this.verticesX+t+1;s.push(i,n,o,n,l,o)}this.buffers[0].data=new Float32Array(i),this.buffers[1].data=new Float32Array(n),this.indexBuffer.data=new Uint32Array(s),this.buffers[0].update(),this.buffers[1].update(),this.indexBuffer.update()}};l.defaultOptions={width:100,height:100,verticesX:10,verticesY:10};let h=l;const d=class e extends h{constructor(t={}){super({width:(t={...e.defaultOptions,...t}).width,height:t.height,verticesX:4,verticesY:4}),this.update(t)}update(e){this.width=e.width??this.width,this.height=e.height??this.height,this._originalWidth=e.originalWidth??this._originalWidth,this._originalHeight=e.originalHeight??this._originalHeight,this._leftWidth=e.leftWidth??this._leftWidth,this._rightWidth=e.rightWidth??this._rightWidth,this._topHeight=e.topHeight??this._topHeight,this._bottomHeight=e.bottomHeight??this._bottomHeight,this.updateUvs(),this.updatePositions()}updatePositions(){const e=this.positions,t=this._leftWidth+this._rightWidth,r=this.width>t?1:this.width/t,i=this._topHeight+this._bottomHeight,n=this.height>i?1:this.height/i,s=Math.min(r,n);e[9]=e[11]=e[13]=e[15]=this._topHeight*s,e[17]=e[19]=e[21]=e[23]=this.height-this._bottomHeight*s,e[25]=e[27]=e[29]=e[31]=this.height,e[2]=e[10]=e[18]=e[26]=this._leftWidth*s,e[4]=e[12]=e[20]=e[28]=this.width-this._rightWidth*s,e[6]=e[14]=e[22]=e[30]=this.width,this.getBuffer("aPosition").update()}updateUvs(){const e=this.uvs;e[0]=e[8]=e[16]=e[24]=0,e[1]=e[3]=e[5]=e[7]=0,e[6]=e[14]=e[22]=e[30]=1,e[25]=e[27]=e[29]=e[31]=1;const t=1/this._originalWidth,r=1/this._originalHeight;e[2]=e[10]=e[18]=e[26]=t*this._leftWidth,e[9]=e[11]=e[13]=e[15]=r*this._topHeight,e[4]=e[12]=e[20]=e[28]=1-t*this._rightWidth,e[17]=e[19]=e[21]=e[23]=1-r*this._bottomHeight,this.getBuffer("aUV").update()}};d.defaultOptions={width:100,height:100,leftWidth:10,topHeight:10,rightWidth:10,bottomHeight:10,originalWidth:100,originalHeight:100};let u=d;class c{constructor(e){this._gpuSpriteHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_gpuSpriteHash")}addRenderable(e,t){const r=this._getGpuSprite(e);e.didViewUpdate&&this._updateBatchableSprite(e,r),this._renderer.renderPipes.batch.addToBatch(r,t)}updateRenderable(e){const t=this._gpuSpriteHash[e.uid];e.didViewUpdate&&this._updateBatchableSprite(e,t),t._batcher.updateElement(t)}validateRenderable(e){const t=e._texture,r=this._getGpuSprite(e);return r.texture._source!==t._source&&!r._batcher.checkAndUpdateTexture(r,t)}destroyRenderable(e){const t=this._gpuSpriteHash[e.uid];n.Z.return(t.geometry),n.Z.return(t),this._gpuSpriteHash[e.uid]=null,e.off("destroyed",this._destroyRenderableBound)}_updateBatchableSprite(e,t){t.geometry.update(e),t.texture=e._texture}_getGpuSprite(e){return this._gpuSpriteHash[e.uid]||this._initGPUSprite(e)}_initGPUSprite(e){const t=n.Z.get(s.U);return t.geometry=n.Z.get(u),t.renderable=e,t.transform=e.groupTransform,t.texture=e._texture,t.roundPixels=this._renderer._roundPixels|e._roundPixels,this._gpuSpriteHash[e.uid]=t,e.didViewUpdate||this._updateBatchableSprite(e,t),e.on("destroyed",this._destroyRenderableBound),t}destroy(){for(const e in this._gpuSpriteHash)this._gpuSpriteHash[e].geometry.destroy();this._gpuSpriteHash=null,this._renderer=null}}c.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"nineSliceSprite"},i.XO.add(c)},8723:(e,t,r)=>{var i=r(8507),n=r(8639),s=r(7547),a=r(5099),o=r(2760),l=r(8734),h=r(5060),d=r(9313),u=r(5611),c=r(2067),p=r(6665),f=r(8475),g=r(5811),m=r(4492);const x={name:"tiling-bit",vertex:{header:"\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        ",main:"\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        "},fragment:{header:"\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        ",main:"\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        "}},_={name:"tiling-bit",vertex:{header:"\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        ",main:"\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        "},fragment:{header:"\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        ",main:"\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        "}};let b,y;class v extends f.M{constructor(){b??(b=(0,u.v)({name:"tiling-sprite-shader",bits:[c.Ls,x,p.b]})),y??(y=(0,u.I)({name:"tiling-sprite-shader",bits:[c.mA,_,p.m]}));const e=new g.k({uMapCoord:{value:new d.u,type:"mat3x3<f32>"},uClampFrame:{value:new Float32Array([0,0,1,1]),type:"vec4<f32>"},uClampOffset:{value:new Float32Array([0,0]),type:"vec2<f32>"},uTextureTransform:{value:new d.u,type:"mat3x3<f32>"},uSizeAnchor:{value:new Float32Array([100,100,.5,.5]),type:"vec4<f32>"}});super({glProgram:y,gpuProgram:b,resources:{localUniforms:new g.k({uTransformMatrix:{value:new d.u,type:"mat3x3<f32>"},uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uRound:{value:0,type:"f32"}}),tilingUniforms:e,uTexture:m.g.EMPTY.source,uSampler:m.g.EMPTY.source.style}})}updateUniforms(e,t,r,i,n,s){const a=this.resources.tilingUniforms,o=s.width,l=s.height,h=s.textureMatrix,d=a.uniforms.uTextureTransform;d.set(r.a*o/e,r.b*o/t,r.c*l/e,r.d*l/t,r.tx/e,r.ty/t),d.invert(),a.uniforms.uMapCoord=h.mapCoord,a.uniforms.uClampFrame=h.uClampFrame,a.uniforms.uClampOffset=h.uClampOffset,a.uniforms.uTextureTransform=d,a.uniforms.uSizeAnchor[0]=e,a.uniforms.uSizeAnchor[1]=t,a.uniforms.uSizeAnchor[2]=i,a.uniforms.uSizeAnchor[3]=n,s&&(this.resources.uTexture=s.source,this.resources.uSampler=s.source.style)}}class T extends h.u{constructor(){super({positions:new Float32Array([0,0,1,0,1,1,0,1]),uvs:new Float32Array([0,0,1,0,1,1,0,1]),indices:new Uint32Array([0,1,2,0,2,3])})}}const w=new T;class S{constructor(e){this._state=s.U.default2d,this._tilingSpriteDataHash=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_tilingSpriteDataHash")}validateRenderable(e){const t=this._getTilingSpriteData(e),r=t.canBatch;this._updateCanBatch(e);const i=t.canBatch;if(i&&i===r){const{batchableMesh:r}=t;if(r&&r.texture._source!==e.texture._source)return!r._batcher.checkAndUpdateTexture(r,e.texture)}return r!==i}addRenderable(e,t){const r=this._renderer.renderPipes.batch;this._updateCanBatch(e);const i=this._getTilingSpriteData(e),{geometry:n,canBatch:s}=i;if(s){i.batchableMesh||(i.batchableMesh=new l.U);const s=i.batchableMesh;e.didViewUpdate&&(this._updateBatchableMesh(e),s.geometry=n,s.renderable=e,s.transform=e.groupTransform,s.texture=e._texture),s.roundPixels=this._renderer._roundPixels|e._roundPixels,r.addToBatch(s,t)}else r.break(t),i.shader||(i.shader=new v),this.updateRenderable(e),t.add(e)}execute(e){const{shader:t}=this._tilingSpriteDataHash[e.uid];t.groups[0]=this._renderer.globalUniforms.bindGroup;const r=t.resources.localUniforms.uniforms;r.uTransformMatrix=e.groupTransform,r.uRound=this._renderer._roundPixels|e._roundPixels,(0,o.V)(e.groupColorAlpha,r.uColor,0),this._state.blendMode=(0,n.i)(e.groupBlendMode,e.texture._source),this._renderer.encoder.draw({geometry:w,shader:t,state:this._state})}updateRenderable(e){const t=this._getTilingSpriteData(e),{canBatch:r}=t;if(r){const{batchableMesh:r}=t;e.didViewUpdate&&this._updateBatchableMesh(e),r._batcher.updateElement(r)}else if(e.didViewUpdate){const{shader:r}=t;r.updateUniforms(e.width,e.height,e._tileTransform.matrix,e.anchor.x,e.anchor.y,e.texture)}}destroyRenderable(e){const t=this._getTilingSpriteData(e);t.batchableMesh=null,t.shader?.destroy(),this._tilingSpriteDataHash[e.uid]=null,e.off("destroyed",this._destroyRenderableBound)}_getTilingSpriteData(e){return this._tilingSpriteDataHash[e.uid]||this._initTilingSpriteData(e)}_initTilingSpriteData(e){const t=new h.u({indices:w.indices,positions:w.positions.slice(),uvs:w.uvs.slice()});return this._tilingSpriteDataHash[e.uid]={canBatch:!0,renderable:e,geometry:t},e.on("destroyed",this._destroyRenderableBound),this._tilingSpriteDataHash[e.uid]}_updateBatchableMesh(e){const t=this._getTilingSpriteData(e),{geometry:r}=t,i=e.texture.source.style;"repeat"!==i.addressMode&&(i.addressMode="repeat",i.update()),function(e,t){const r=e.texture,i=r.frame.width,n=r.frame.height;let s=0,a=0;e._applyAnchorToTexture&&(s=e.anchor.x,a=e.anchor.y),t[0]=t[6]=-s,t[2]=t[4]=1-s,t[1]=t[3]=-a,t[5]=t[7]=1-a;const o=d.u.shared;o.copyFrom(e._tileTransform.matrix),o.tx/=e.width,o.ty/=e.height,o.invert(),o.scale(e.width/i,e.height/n),function(e,t,r,i){let n=0;const s=e.length/2,a=i.a,o=i.b,l=i.c,h=i.d,d=i.tx,u=i.ty;for(r*=2;n<s;){const t=e[r],i=e[r+1];e[r]=a*t+l*i+d,e[r+1]=o*t+h*i+u,r+=2,n++}}(t,0,0,o)}(e,r.uvs),function(e,t){const r=e.anchor.x,i=e.anchor.y;t[0]=-r*e.width,t[1]=-i*e.height,t[2]=(1-r)*e.width,t[3]=-i*e.height,t[4]=(1-r)*e.width,t[5]=(1-i)*e.height,t[6]=-r*e.width,t[7]=(1-i)*e.height}(e,r.positions)}destroy(){for(const e in this._tilingSpriteDataHash)this.destroyRenderable(this._tilingSpriteDataHash[e].renderable);this._tilingSpriteDataHash=null,this._renderer=null}_updateCanBatch(e){const t=this._getTilingSpriteData(e),r=e.texture;let i=!0;return this._renderer.type===a.W.WEBGL&&(i=this._renderer.context.supports.nonPowOf2wrapping),t.canBatch=r.textureMatrix.isSimple&&(i||r.source.isPowerOfTwo),t.canBatch}}S.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"tilingSprite"},i.XO.add(S)},8422:(e,t,r)=>{r.d(t,{K:()=>i});class i{constructor(){this.batcherName="default",this.attributeSize=4,this.indexSize=6,this.packAsQuad=!0,this.roundPixels=0,this._attributeStart=0,this._batcher=null,this._batch=null}get blendMode(){return this.renderable.groupBlendMode}get color(){return this.renderable.groupColorAlpha}reset(){this.renderable=null,this.texture=null,this._batcher=null,this._batch=null,this.bounds=null}}},23:(e,t,r)=>{var i=r(8507),n=r(1979),s=r(8218),a=r(9408),o=r(9313),l=r(6563),h=r(5611),d=r(4459),u=r(4e3),c=r(6665),p=r(6040),f=r(8475),g=r(5811);const m={name:"local-uniform-msdf-bit",vertex:{header:"\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        ",main:"\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        ",end:"\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        "},fragment:{header:"\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         ",main:" \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        "}},x={name:"local-uniform-msdf-bit",vertex:{header:"\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        ",main:"\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        ",end:"\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        "},fragment:{header:"\n            uniform float uDistance;\n         ",main:" \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        "}},_={name:"msdf-bit",fragment:{header:"\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        "}},b={name:"msdf-bit",fragment:{header:"\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        "}};let y,v;class T extends f.M{constructor(){const e=new g.k({uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uTransformMatrix:{value:new o.u,type:"mat3x3<f32>"},uDistance:{value:4,type:"f32"},uRound:{value:0,type:"f32"}}),t=(0,l.a)();y??(y=(0,h.v)({name:"sdf-shader",bits:[d.F,(0,u._)(t),m,_,c.b]})),v??(v=(0,h.I)({name:"sdf-shader",bits:[d.a,(0,u.P)(t),x,b,c.m]})),super({glProgram:v,gpuProgram:y,resources:{localUniforms:e,batchSamplers:(0,p.n)(t)}})}}var w=r(4670),S=r(268),C=r(8291),B=r(2577),M=r(9252),P=r(7608),R=r(8293),U=r(4492),A=r(4016),F=r(1242),k=r(3548),z=r(4486);class O extends z.A{constructor(){super(...arguments),this.chars=Object.create(null),this.lineHeight=0,this.fontFamily="",this.fontMetrics={fontSize:0,ascent:0,descent:0},this.baseLineOffset=0,this.distanceField={type:"none",range:0},this.pages=[],this.applyFillAsTint=!0,this.baseMeasurementFontSize=100,this.baseRenderedFontSize=100}get font(){return(0,w.t6)(w.lj,"BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead."),this.fontFamily}get pageTextures(){return(0,w.t6)(w.lj,"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead."),this.pages}get size(){return(0,w.t6)(w.lj,"BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead."),this.fontMetrics.fontSize}get distanceFieldRange(){return(0,w.t6)(w.lj,"BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead."),this.distanceField.range}get distanceFieldType(){return(0,w.t6)(w.lj,"BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead."),this.distanceField.type}destroy(e=!1){this.emit("destroy",this),this.removeAllListeners();for(const e in this.chars)this.chars[e].texture?.destroy();this.chars=null,e&&(this.pages.forEach((e=>e.texture.destroy(!0))),this.pages=null)}}function H(e){if(""===e)return[];"string"==typeof e&&(e=[e]);const t=[];for(let r=0,i=e.length;r<i;r++){const i=e[r];if(Array.isArray(i)){if(2!==i.length)throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${i.length}.`);if(0===i[0].length||0===i[1].length)throw new Error("[BitmapFont]: Invalid character delimiter.");const e=i[0].charCodeAt(0),r=i[1].charCodeAt(0);if(r<e)throw new Error("[BitmapFont]: Invalid character range.");for(let i=e,n=r;i<=n;i++)t.push(String.fromCharCode(i))}else t.push(...Array.from(i))}if(0===t.length)throw new Error("[BitmapFont]: Empty set when resolving characters.");return t}const G=class e extends O{constructor(t){super(),this.resolution=1,this.pages=[],this._padding=0,this._measureCache=Object.create(null),this._currentChars=[],this._currentX=0,this._currentY=0,this._currentPageIndex=-1,this._skipKerning=!1;const r={...e.defaultOptions,...t};this._textureSize=r.textureSize,this._mipmap=r.mipmap;const i=r.style.clone();r.overrideFill&&(i._fill.color=16777215,i._fill.alpha=1,i._fill.texture=U.g.WHITE,i._fill.fill=null),this.applyFillAsTint=r.overrideFill;const n=i.fontSize;i.fontSize=this.baseMeasurementFontSize;const s=(0,F.Z)(i);r.overrideSize?i._stroke&&(i._stroke.width*=this.baseRenderedFontSize/n):i.fontSize=this.baseRenderedFontSize=n,this._style=i,this._skipKerning=r.skipKerning??!1,this.resolution=r.resolution??1,this._padding=r.padding??4,this.fontMetrics=A.P.measureFont(s),this.lineHeight=i.lineHeight||this.fontMetrics.fontSize||i.fontSize}ensureCharacters(e){const t=H(e).filter((e=>!this._currentChars.includes(e))).filter(((e,t,r)=>r.indexOf(e)===t));if(!t.length)return;let r;this._currentChars=[...this._currentChars,...t],r=-1===this._currentPageIndex?this._nextPage():this.pages[this._currentPageIndex];let{canvas:i,context:n}=r.canvasAndContext,s=r.texture.source;const a=this._style;let o=this._currentX,l=this._currentY;const h=this.baseRenderedFontSize/this.baseMeasurementFontSize,d=this._padding*h;let u=0,c=!1;for(let e=0;e<t.length;e++){const r=t[e],p=A.P.measureText(r,a,i,!1),f=Math.ceil(("italic"===a.fontStyle?2:1)*p.width);p.lineHeight=p.height;const g=p.width*h,m=f+2*d,x=p.height*h+2*d;if(c=!1,"\n"!==r&&"\r"!==r&&"\t"!==r&&" "!==r&&(c=!0,u=Math.ceil(Math.max(x,u))),o+m>this._textureSize&&(l+=u,u=x,o=0,l+u>this._textureSize)){s.update();const e=this._nextPage();i=e.canvasAndContext.canvas,n=e.canvasAndContext.context,s=e.texture.source,l=0}const _=g/h-(a.dropShadow?.distance??0)-(a._stroke?.width??0);if(this.chars[r]={id:r.codePointAt(0),xOffset:-this._padding,yOffset:-this._padding,xAdvance:_,kerning:{}},c){this._drawGlyph(n,p,o+d,l+d,h,a);const e=s.width*h,t=s.height*h,i=new M.M(o/e*s.width,l/t*s.height,m/e*s.width,x/t*s.height);this.chars[r].texture=new U.g({source:s,frame:i}),o+=Math.ceil(m)}}s.update(),this._currentX=o,this._currentY=l,this._skipKerning&&this._applyKerning(t,n)}get pageTextures(){return(0,w.t6)(w.lj,"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead."),this.pages}_applyKerning(e,t){const r=this._measureCache;for(let i=0;i<e.length;i++){const n=e[i];for(let e=0;e<this._currentChars.length;e++){const i=this._currentChars[e];let s=r[n];s||(s=r[n]=t.measureText(n).width);let a=r[i];a||(a=r[i]=t.measureText(i).width);let o=t.measureText(n+i).width,l=o-(s+a);l&&(this.chars[n].kerning[i]=l),o=t.measureText(n+i).width,l=o-(s+a),l&&(this.chars[i].kerning[n]=l)}}}_nextPage(){this._currentPageIndex++;const e=this.resolution,t=P.N.getOptimalCanvasAndContext(this._textureSize,this._textureSize,e);this._setupContext(t.context,this._style,e);const r=e*(this.baseRenderedFontSize/this.baseMeasurementFontSize),i={canvasAndContext:t,texture:new U.g({source:new R.b({resource:t.canvas,resolution:r,alphaMode:"premultiply-alpha-on-upload",autoGenerateMipmaps:this._mipmap})})};return this.pages[this._currentPageIndex]=i,i}_setupContext(e,t,r){t.fontSize=this.baseRenderedFontSize,e.scale(r,r),e.font=(0,F.Z)(t),t.fontSize=this.baseMeasurementFontSize,e.textBaseline=t.textBaseline;const i=t._stroke,n=i?.width??0;if(i&&(e.lineWidth=n,e.lineJoin=i.join,e.miterLimit=i.miterLimit,e.strokeStyle=(0,k.r)(i,e)),t._fill&&(e.fillStyle=(0,k.r)(t._fill,e)),t.dropShadow){const i=t.dropShadow,n=B.Q.shared.setValue(i.color).toArray(),s=i.blur*r,a=i.distance*r;e.shadowColor=`rgba(${255*n[0]},${255*n[1]},${255*n[2]},${i.alpha})`,e.shadowBlur=s,e.shadowOffsetX=Math.cos(i.angle)*a,e.shadowOffsetY=Math.sin(i.angle)*a}else e.shadowColor="black",e.shadowBlur=0,e.shadowOffsetX=0,e.shadowOffsetY=0}_drawGlyph(e,t,r,i,n,s){const a=t.text,o=t.fontProperties,l=s._stroke,h=(l?.width??0)*n,d=r+h/2,u=i-h/2,c=o.descent*n,p=t.lineHeight*n;s.stroke&&h&&e.strokeText(a,d,u+p-c),s._fill&&e.fillText(a,d,u+p-c)}destroy(){super.destroy();for(let e=0;e<this.pages.length;e++){const{canvasAndContext:t,texture:r}=this.pages[e];P.N.returnCanvasAndContext(t),r.destroy(!0)}this.pages=null}};G.defaultOptions={textureSize:512,style:new C.x,mipmap:!0};let W=G;function V(e,t,r,i){const n={width:0,height:0,offsetY:0,scale:t.fontSize/r.baseMeasurementFontSize,lines:[{width:0,charPositions:[],spaceWidth:0,spacesIndex:[],chars:[]}]};n.offsetY=r.baseLineOffset;let s=n.lines[0],a=null,o=!0;const l={spaceWord:!1,width:0,start:0,index:0,positions:[],chars:[]},h=e=>{const t=s.width;for(let r=0;r<l.index;r++){const i=e.positions[r];s.chars.push(e.chars[r]),s.charPositions.push(i+t)}s.width+=e.width,o=!1,l.width=0,l.index=0,l.chars.length=0},d=()=>{let e=s.chars.length-1;if(i){let t=s.chars[e];for(;" "===t;)s.width-=r.chars[t].xAdvance,t=s.chars[--e]}n.width=Math.max(n.width,s.width),s={width:0,charPositions:[],chars:[],spaceWidth:0,spacesIndex:[]},o=!0,n.lines.push(s),n.height+=r.lineHeight},u=r.baseMeasurementFontSize/t.fontSize,c=t.letterSpacing*u,p=t.wordWrapWidth*u;for(let i=0;i<e.length+1;i++){let n;const u=i===e.length;u||(n=e[i]);const f=r.chars[n]||r.chars[" "];if(/(?:\s)/.test(n)||"\r"===n||"\n"===n||u){if(!o&&t.wordWrap&&s.width+l.width-c>p?(d(),h(l),u||s.charPositions.push(0)):(l.start=s.width,h(l),u||s.charPositions.push(0)),"\r"===n||"\n"===n)0!==s.width&&d();else if(!u){const e=f.xAdvance+(f.kerning[a]||0)+c;s.width+=e,s.spaceWidth=e,s.spacesIndex.push(s.charPositions.length),s.chars.push(n)}}else{const e=f.kerning[a]||0,t=f.xAdvance+e+c;l.positions[l.index++]=l.width+e,l.chars.push(n),l.width+=t}a=n}return d(),"center"===t.align?function(e){for(let t=0;t<e.lines.length;t++){const r=e.lines[t],i=e.width/2-r.width/2;for(let e=0;e<r.charPositions.length;e++)r.charPositions[e]+=i}}(n):"right"===t.align?function(e){for(let t=0;t<e.lines.length;t++){const r=e.lines[t],i=e.width-r.width;for(let e=0;e<r.charPositions.length;e++)r.charPositions[e]+=i}}(n):"justify"===t.align&&function(e){const t=e.width;for(let r=0;r<e.lines.length;r++){const i=e.lines[r];let n=0,s=i.spacesIndex[n++],a=0;const o=i.spacesIndex.length,l=(t-i.width)/o;for(let e=0;e<i.charPositions.length;e++)e===s&&(s=i.spacesIndex[n++],a+=l),i.charPositions[e]+=a}}(n),n}let D=0;const E=new class{constructor(){this.ALPHA=[["a","z"],["A","Z"]," "],this.NUMERIC=[["0","9"]],this.ALPHANUMERIC=[["a","z"],["A","Z"],["0","9"]," "],this.ASCII=[[" ","~"]],this.defaultOptions={chars:this.ALPHANUMERIC,resolution:1,padding:4,skipKerning:!1}}getFont(e,t){let r=`${t.fontFamily}-bitmap`,i=!0;if(t._fill.fill&&!t._stroke)r+=t._fill.fill.styleKey,i=!1;else if(t._stroke||t.dropShadow){let e=t.styleKey;e=e.substring(0,e.lastIndexOf("-")),r=`${e}-bitmap`,i=!1}if(!n.l.has(r)){const e=new W({style:t,overrideFill:i,overrideSize:!0,...this.defaultOptions});D++,D>50&&(0,S.R)("BitmapText",`You have dynamically created ${D} bitmap fonts, this can be inefficient. Try pre installing your font styles using \`BitmapFont.install({name:"style1", style})\``),e.once("destroy",(()=>{D--,n.l.remove(r)})),n.l.set(r,e)}const s=n.l.get(r);return s.ensureCharacters?.(e),s}getLayout(e,t,r=!0){const i=this.getFont(e,t);return V([...e],t,i,r)}measureText(e,t,r=!0){return this.getLayout(e,t,r)}install(...e){let t=e[0];"string"==typeof t&&(t={name:t,style:e[1],chars:e[2]?.chars,resolution:e[2]?.resolution,padding:e[2]?.padding,skipKerning:e[2]?.skipKerning},(0,w.t6)(w.lj,"BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})"));const r=t?.name;if(!r)throw new Error("[BitmapFontManager] Property `name` is required.");t={...this.defaultOptions,...t};const i=t.style,s=i instanceof C.x?i:new C.x(i),a=null!==s._fill.fill&&void 0!==s._fill.fill,o=new W({style:s,overrideFill:a,skipKerning:t.skipKerning,padding:t.padding,resolution:t.resolution,overrideSize:!1}),l=H(t.chars);return o.ensureCharacters(l.join("")),n.l.set(`${r}-bitmap`,o),o.once("destroy",(()=>n.l.remove(`${r}-bitmap`))),o}uninstall(e){const t=`${e}-bitmap`,r=n.l.get(t);r&&r.destroy()}};class I{constructor(e){this._gpuBitmapText={},this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.renderableGC.addManagedHash(this,"_gpuBitmapText")}validateRenderable(e){const t=this._getGpuBitmapText(e);return e._didTextUpdate&&(e._didTextUpdate=!1,this._updateContext(e,t)),this._renderer.renderPipes.graphics.validateRenderable(t)}addRenderable(e,t){const r=this._getGpuBitmapText(e);L(e,r),e._didTextUpdate&&(e._didTextUpdate=!1,this._updateContext(e,r)),this._renderer.renderPipes.graphics.addRenderable(r,t),r.context.customShader&&this._updateDistanceField(e)}destroyRenderable(e){e.off("destroyed",this._destroyRenderableBound),this._destroyRenderableByUid(e.uid)}_destroyRenderableByUid(e){const t=this._gpuBitmapText[e].context;t.customShader&&(s.Z.return(t.customShader),t.customShader=null),s.Z.return(this._gpuBitmapText[e]),this._gpuBitmapText[e]=null}updateRenderable(e){const t=this._getGpuBitmapText(e);L(e,t),this._renderer.renderPipes.graphics.updateRenderable(t),t.context.customShader&&this._updateDistanceField(e)}_updateContext(e,t){const{context:r}=t,i=E.getFont(e.text,e._style);r.clear(),"none"!==i.distanceField.type&&(r.customShader||(r.customShader=s.Z.get(T)));const n=Array.from(e.text),a=e._style;let o=i.baseLineOffset;const l=V(n,a,i,!0);let h=0;const d=a.padding,u=l.scale;let c=l.width,p=l.height+l.offsetY;a._stroke&&(c+=a._stroke.width/u,p+=a._stroke.width/u),r.translate(-e._anchor._x*c-d,-e._anchor._y*p-d).scale(u,u);const f=i.applyFillAsTint?a._fill.color:16777215;for(let e=0;e<l.lines.length;e++){const t=l.lines[e];for(let e=0;e<t.charPositions.length;e++){const s=n[h++],a=i.chars[s];a?.texture&&r.texture(a.texture,f||"black",Math.round(t.charPositions[e]+a.xOffset),Math.round(o+a.yOffset))}o+=i.lineHeight}}_getGpuBitmapText(e){return this._gpuBitmapText[e.uid]||this.initGpuText(e)}initGpuText(e){const t=s.Z.get(a.A);return this._gpuBitmapText[e.uid]=t,this._updateContext(e,t),e.on("destroyed",this._destroyRenderableBound),this._gpuBitmapText[e.uid]}_updateDistanceField(e){const t=this._getGpuBitmapText(e).context,r=e._style.fontFamily,i=n.l.get(`${r}-bitmap`),{a:s,b:a,c:o,d:l}=e.groupTransform,h=Math.sqrt(s*s+a*a),d=Math.sqrt(o*o+l*l),u=(Math.abs(h)+Math.abs(d))/2,c=i.baseRenderedFontSize/e._style.fontSize,p=u*i.distanceField.range*(1/c);t.customShader.resources.localUniforms.uniforms.uDistance=p}destroy(){for(const e in this._gpuBitmapText)this._destroyRenderableByUid(e);this._gpuBitmapText=null,this._renderer=null}}function L(e,t){t.groupTransform=e.groupTransform,t.groupColorAlpha=e.groupColorAlpha,t.groupColor=e.groupColor,t.groupBlendMode=e.groupBlendMode,t.globalDisplayStatus=e.globalDisplayStatus,t.groupTransform=e.groupTransform,t.localDisplayStatus=e.localDisplayStatus,t.groupAlpha=e.groupAlpha,t._roundPixels=e._roundPixels}I.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"bitmapText"},i.XO.add(I)},7559:(e,t,r)=>{var i=r(8507),n=r(4492),s=r(2048),a=r(8218),o=r(8422);class l{constructor(e){this._gpuText=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.runners.resolutionChange.add(this),this._renderer.renderableGC.addManagedHash(this,"_gpuText")}resolutionChange(){for(const e in this._gpuText){const t=this._gpuText[e];if(!t)continue;const r=t.batchableSprite.renderable;r._autoResolution&&(r._resolution=this._renderer.resolution,r.onViewUpdate())}}validateRenderable(e){const t=this._getGpuText(e),r=e._getKey();return t.textureNeedsUploading?(t.textureNeedsUploading=!1,!0):t.currentKey!==r}addRenderable(e,t){const r=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),this._renderer.renderPipes.batch.addToBatch(r,t)}updateRenderable(e){const t=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),t._batcher.updateElement(t)}destroyRenderable(e){e.off("destroyed",this._destroyRenderableBound),this._destroyRenderableById(e.uid)}_destroyRenderableById(e){const t=this._gpuText[e];this._renderer.htmlText.decreaseReferenceCount(t.currentKey),a.Z.return(t.batchableSprite),this._gpuText[e]=null}_updateText(e){const t=e._getKey(),r=this._getGpuText(e),i=r.batchableSprite;r.currentKey!==t&&this._updateGpuText(e).catch((e=>{console.error(e)})),e._didTextUpdate=!1;const n=e._style.padding;(0,s.y)(i.bounds,e._anchor,i.texture,n)}async _updateGpuText(e){e._didTextUpdate=!1;const t=this._getGpuText(e);if(t.generatingTexture)return;const r=e._getKey();this._renderer.htmlText.decreaseReferenceCount(t.currentKey),t.generatingTexture=!0,t.currentKey=r;const i=e.resolution??this._renderer.resolution,n=await this._renderer.htmlText.getManagedTexture(e.text,i,e._style,e._getKey()),a=t.batchableSprite;a.texture=t.texture=n,t.generatingTexture=!1,t.textureNeedsUploading=!0,e.onViewUpdate();const o=e._style.padding;(0,s.y)(a.bounds,e._anchor,a.texture,o)}_getGpuText(e){return this._gpuText[e.uid]||this.initGpuText(e)}initGpuText(e){const t={texture:n.g.EMPTY,currentKey:"--",batchableSprite:a.Z.get(o.K),textureNeedsUploading:!1,generatingTexture:!1},r=t.batchableSprite;return r.renderable=e,r.transform=e.groupTransform,r.texture=n.g.EMPTY,r.bounds={minX:0,maxX:1,minY:0,maxY:0},r.roundPixels=this._renderer._roundPixels|e._roundPixels,e._resolution=e._autoResolution?this._renderer.resolution:e.resolution,this._gpuText[e.uid]=t,e.on("destroyed",this._destroyRenderableBound),t}destroy(){for(const e in this._gpuText)this._destroyRenderableById(e);this._gpuText=null,this._renderer=null}}l.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"htmlText"};var h=r(7608),d=r(2437),u=r(5099),c=r(1761),p=r(268),f=r(2558);const g="http://www.w3.org/2000/svg",m="http://www.w3.org/1999/xhtml";class x{constructor(){this.svgRoot=document.createElementNS(g,"svg"),this.foreignObject=document.createElementNS(g,"foreignObject"),this.domElement=document.createElementNS(m,"div"),this.styleElement=document.createElementNS(m,"style"),this.image=new Image;const{foreignObject:e,svgRoot:t,styleElement:r,domElement:i}=this;e.setAttribute("width","10000"),e.setAttribute("height","10000"),e.style.overflow="hidden",t.appendChild(e),e.appendChild(r),e.appendChild(i)}}var _=r(8291),b=r(8011),y=r(2577);function v(e){const t=y.Q.shared.setValue(e.color).setAlpha(e.alpha).toHexa(),r=`${Math.round(Math.cos(e.angle)*e.distance)}px ${Math.round(Math.sin(e.angle)*e.distance)}px`;return e.blur>0?`text-shadow: ${r} ${e.blur}px ${t}`:`text-shadow: ${r} ${t}`}function T(e){return[`-webkit-text-stroke-width: ${e.width}px`,`-webkit-text-stroke-color: ${y.Q.shared.setValue(e.color).toHex()}`,`text-stroke-width: ${e.width}px`,`text-stroke-color: ${y.Q.shared.setValue(e.color).toHex()}`,"paint-order: stroke"].join(";")}const w={fontSize:"font-size: {{VALUE}}px",fontFamily:"font-family: {{VALUE}}",fontWeight:"font-weight: {{VALUE}}",fontStyle:"font-style: {{VALUE}}",fontVariant:"font-variant: {{VALUE}}",letterSpacing:"letter-spacing: {{VALUE}}px",align:"text-align: {{VALUE}}",padding:"padding: {{VALUE}}px",whiteSpace:"white-space: {{VALUE}}",lineHeight:"line-height: {{VALUE}}px",wordWrapWidth:"max-width: {{VALUE}}px"},S={fill:e=>`color: ${y.Q.shared.setValue(e).toHex()}`,breakWords:e=>"word-wrap: "+(e?"break-all":"break-word"),stroke:T,dropShadow:v};class C extends _.x{constructor(e={}){super(e),this._cssOverrides=[],this.cssOverrides??(this.cssOverrides=e.cssOverrides),this.tagStyles=e.tagStyles??{}}set cssOverrides(e){this._cssOverrides=e instanceof Array?e:[e],this.update()}get cssOverrides(){return this._cssOverrides}_generateKey(){return this._styleKey=(0,b.V)(this)+this._cssOverrides.join("-"),this._styleKey}update(){this._cssStyle=null,super.update()}clone(){return new C({align:this.align,breakWords:this.breakWords,dropShadow:this.dropShadow?{...this.dropShadow}:null,fill:this._fill,fontFamily:this.fontFamily,fontSize:this.fontSize,fontStyle:this.fontStyle,fontVariant:this.fontVariant,fontWeight:this.fontWeight,letterSpacing:this.letterSpacing,lineHeight:this.lineHeight,padding:this.padding,stroke:this._stroke,whiteSpace:this.whiteSpace,wordWrap:this.wordWrap,wordWrapWidth:this.wordWrapWidth,cssOverrides:this.cssOverrides})}get cssStyle(){return this._cssStyle||(this._cssStyle=function(e){const t=e._stroke,r=e._fill,i=[`div { ${[`color: ${y.Q.shared.setValue(r.color).toHex()}`,`font-size: ${e.fontSize}px`,`font-family: ${e.fontFamily}`,`font-weight: ${e.fontWeight}`,`font-style: ${e.fontStyle}`,`font-variant: ${e.fontVariant}`,`letter-spacing: ${e.letterSpacing}px`,`text-align: ${e.align}`,`padding: ${e.padding}px`,`white-space: ${"pre"===e.whiteSpace&&e.wordWrap?"pre-wrap":e.whiteSpace}`,...e.lineHeight?[`line-height: ${e.lineHeight}px`]:[],...e.wordWrap?["word-wrap: "+(e.breakWords?"break-all":"break-word"),`max-width: ${e.wordWrapWidth}px`]:[],...t?[T(t)]:[],...e.dropShadow?[v(e.dropShadow)]:[],...e.cssOverrides].join(";")} }`];return function(e,t){for(const r in e){const i=e[r],n=[];for(const e in i)S[e]?n.push(S[e](i[e])):w[e]&&n.push(w[e].replace("{{VALUE}}",i[e]));t.push(`${r} { ${n.join(";")} }`)}}(e.tagStyles,i),i.join(" ")}(this)),this._cssStyle}addOverride(...e){const t=e.filter((e=>!this.cssOverrides.includes(e)));t.length>0&&(this.cssOverrides.push(...t),this.update())}removeOverride(...e){const t=e.filter((e=>this.cssOverrides.includes(e)));t.length>0&&(this.cssOverrides=this.cssOverrides.filter((e=>!t.includes(e))),this.update())}set fill(e){"string"!=typeof e&&"number"!=typeof e&&(0,p.R)("[HTMLTextStyle] only color fill is not supported by HTMLText"),super.fill=e}set stroke(e){e&&"string"!=typeof e&&"number"!=typeof e&&(0,p.R)("[HTMLTextStyle] only color stroke is not supported by HTMLText"),super.stroke=e}}var B=r(1979);async function M(e,t){const r=await async function(e){const t=await c.e.get().fetch(e),r=await t.blob(),i=new FileReader;return await new Promise(((e,t)=>{i.onloadend=()=>e(i.result),i.onerror=t,i.readAsDataURL(r)}))}(t);return`@font-face {\n        font-family: "${e.fontFamily}";\n        src: url('${r}');\n        font-weight: ${e.fontWeight};\n        font-style: ${e.fontStyle};\n    }`}const P=new Map;let R;class U{constructor(e){this._activeTextures={},this._renderer=e,this._createCanvas=e.type===u.W.WEBGPU}getTexture(e){return this._buildTexturePromise(e.text,e.resolution,e.style)}getManagedTexture(e,t,r,i){if(this._activeTextures[i])return this._increaseReferenceCount(i),this._activeTextures[i].promise;const n=this._buildTexturePromise(e,t,r).then((e=>(this._activeTextures[i].texture=e,e)));return this._activeTextures[i]={texture:null,promise:n,usageCount:1},n}async _buildTexturePromise(e,t,r){const i=a.Z.get(x),n=function(e,t){const r=t.fontFamily,i=[],n={},s=e.match(/font-family:([^;"\s]+)/g);function a(e){n[e]||(i.push(e),n[e]=!0)}if(Array.isArray(r))for(let e=0;e<r.length;e++)a(r[e]);else a(r);s&&s.forEach((e=>{a(e.split(":")[1].trim())}));for(const e in t.tagStyles)a(t.tagStyles[e].fontFamily);return i}(e,r),s=await async function(e,t,r){const i=e.filter((e=>B.l.has(`${e}-and-url`))).map(((e,i)=>{if(!P.has(e)){const{url:n}=B.l.get(`${e}-and-url`);0===i?P.set(e,M({fontWeight:t.fontWeight,fontStyle:t.fontStyle,fontFamily:e},n)):P.set(e,M({fontWeight:r.fontWeight,fontStyle:r.fontStyle,fontFamily:e},n))}return P.get(e)}));return(await Promise.all(i)).join("\n")}(n,r,C.defaultTextStyle),o=function(e,t,r,i){i=i||R||(R=new x);const{domElement:n,styleElement:s,svgRoot:a}=i;n.innerHTML=`<style>${t.cssStyle};</style><div style='padding:0'>${e}</div>`,n.setAttribute("style","transform-origin: top left; display: inline-block"),r&&(s.textContent=r),document.body.appendChild(a);const o=n.getBoundingClientRect();a.remove();const l=2*t.padding;return{width:o.width-l,height:o.height-l}}(e,r,s,i),l=Math.ceil(Math.ceil(Math.max(1,o.width)+2*r.padding)*t),d=Math.ceil(Math.ceil(Math.max(1,o.height)+2*r.padding)*t),u=i.image;u.width=2+(0|l),u.height=2+(0|d);const p=function(e,t,r,i,n){const{domElement:s,styleElement:a,svgRoot:o}=n;s.innerHTML=`<style>${t.cssStyle}</style><div style='padding:0;'>${e}</div>`,s.setAttribute("style",`transform: scale(${r});transform-origin: top left; display: inline-block`),a.textContent=i;const{width:l,height:h}=n.image;return o.setAttribute("width",l.toString()),o.setAttribute("height",h.toString()),(new XMLSerializer).serializeToString(o)}(e,r,t,s,i);await function(e,t,r){return new Promise((async i=>{r&&await new Promise((e=>setTimeout(e,100))),e.onload=()=>{i()},e.src=`data:image/svg+xml;charset=utf8,${encodeURIComponent(t)}`,e.crossOrigin="anonymous"}))}(u,p,function(){const{userAgent:e}=c.e.get().getNavigator();return/^((?!chrome|android).)*safari/i.test(e)}()&&n.length>0);const g=u;let m;this._createCanvas&&(m=function(e,t){const r=h.N.getOptimalCanvasAndContext(e.width,e.height,t),{context:i}=r;return i.clearRect(0,0,e.width,e.height),i.drawImage(e,0,0),r}(u,t));const _=(0,f.M)(m?m.canvas:g,u.width-2,u.height-2,t);return this._createCanvas&&(this._renderer.texture.initSource(_.source),h.N.returnCanvasAndContext(m)),a.Z.return(i),_}_increaseReferenceCount(e){this._activeTextures[e].usageCount++}decreaseReferenceCount(e){const t=this._activeTextures[e];t&&(t.usageCount--,0===t.usageCount&&(t.texture?this._cleanUp(t):t.promise.then((e=>{t.texture=e,this._cleanUp(t)})).catch((()=>{(0,p.R)("HTMLTextSystem: Failed to clean texture")})),this._activeTextures[e]=null))}_cleanUp(e){d.W.returnTexture(e.texture),e.texture.source.resource=null,e.texture.source.uploadMethodId="unknown"}getReferenceCount(e){return this._activeTextures[e].usageCount}destroy(){this._activeTextures=null}}U.extension={type:[i.Ag.WebGLSystem,i.Ag.WebGPUSystem,i.Ag.CanvasSystem],name:"htmlText"},U.defaultFontOptions={fontFamily:"Arial",fontStyle:"normal",fontWeight:"normal"},i.XO.add(U),i.XO.add(l)},3548:(e,t,r)=>{r.d(t,{r:()=>h});var i=r(2577),n=r(9313),s=r(4492),a=r(268),o=r(7276),l=r(2806);function h(e,t){if(e.texture===s.g.WHITE&&!e.fill)return i.Q.shared.setValue(e.color).setAlpha(e.alpha??1).toHexa();if(!e.fill){const r=t.createPattern(e.texture.source.resource,"repeat"),i=e.matrix.copyTo(n.u.shared);return i.scale(e.texture.frame.width,e.texture.frame.height),r.setTransform(i),r}if(e.fill instanceof l.m){const r=e.fill,i=t.createPattern(r.texture.source.resource,"repeat"),s=r.transform.copyTo(n.u.shared);return s.scale(r.texture.frame.width,r.texture.frame.height),i.setTransform(s),i}if(e.fill instanceof o._){const r=e.fill;if("linear"===r.type){const e=t.createLinearGradient(r.x0,r.y0,r.x1,r.y1);return r.gradientStops.forEach((t=>{e.addColorStop(t.offset,i.Q.shared.setValue(t.color).toHex())})),e}}return(0,a.R)("FillStyle not recognised",e),"red"}},6958:(e,t,r)=>{var i=r(8507),n=r(2048),s=r(8218),a=r(8422);class o{constructor(e){this._gpuText=Object.create(null),this._destroyRenderableBound=this.destroyRenderable.bind(this),this._renderer=e,this._renderer.runners.resolutionChange.add(this),this._renderer.renderableGC.addManagedHash(this,"_gpuText")}resolutionChange(){for(const e in this._gpuText){const t=this._gpuText[e];if(!t)continue;const r=t.batchableSprite.renderable;r._autoResolution&&(r._resolution=this._renderer.resolution,r.onViewUpdate())}}validateRenderable(e){const t=this._getGpuText(e),r=e._getKey();return t.currentKey!==r}addRenderable(e,t){const r=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),this._renderer.renderPipes.batch.addToBatch(r,t)}updateRenderable(e){const t=this._getGpuText(e).batchableSprite;e._didTextUpdate&&this._updateText(e),t._batcher.updateElement(t)}destroyRenderable(e){e.off("destroyed",this._destroyRenderableBound),this._destroyRenderableById(e.uid)}_destroyRenderableById(e){const t=this._gpuText[e];this._renderer.canvasText.decreaseReferenceCount(t.currentKey),s.Z.return(t.batchableSprite),this._gpuText[e]=null}_updateText(e){const t=e._getKey(),r=this._getGpuText(e),i=r.batchableSprite;r.currentKey!==t&&this._updateGpuText(e),e._didTextUpdate=!1;const s=e._style.padding;(0,n.y)(i.bounds,e._anchor,i.texture,s)}_updateGpuText(e){const t=this._getGpuText(e),r=t.batchableSprite;t.texture&&this._renderer.canvasText.decreaseReferenceCount(t.currentKey),t.texture=r.texture=this._renderer.canvasText.getManagedTexture(e),t.currentKey=e._getKey(),r.texture=t.texture}_getGpuText(e){return this._gpuText[e.uid]||this.initGpuText(e)}initGpuText(e){const t={texture:null,currentKey:"--",batchableSprite:s.Z.get(a.K)};return t.batchableSprite.renderable=e,t.batchableSprite.transform=e.groupTransform,t.batchableSprite.bounds={minX:0,maxX:1,minY:0,maxY:0},t.batchableSprite.roundPixels=this._renderer._roundPixels|e._roundPixels,this._gpuText[e.uid]=t,e._resolution=e._autoResolution?this._renderer.resolution:e.resolution,this._updateText(e),e.on("destroyed",this._destroyRenderableBound),t}destroy(){for(const e in this._gpuText)this._destroyRenderableById(e);this._gpuText=null,this._renderer=null}}o.extension={type:[i.Ag.WebGLPipes,i.Ag.WebGPUPipes,i.Ag.CanvasPipes],name:"text"};var l=r(2577),h=r(9939),d=r(7608),u=r(2437),c=r(9252);function p(e,t,r){for(let i=0,n=4*r*t;i<t;++i,n+=4)if(0!==e[n+3])return!1;return!0}function f(e,t,r,i,n){const s=4*t;for(let t=i,a=i*s+4*r;t<=n;++t,a+=s)if(0!==e[a+3])return!1;return!0}var g=r(4670),m=r(8291),x=r(2558),_=r(4016),b=r(1242),y=r(3548);class v{constructor(e){this._activeTextures={},this._renderer=e}getTextureSize(e,t,r){const i=_.P.measureText(e||" ",r);let n=Math.ceil(Math.ceil(Math.max(1,i.width)+2*r.padding)*t),s=Math.ceil(Math.ceil(Math.max(1,i.height)+2*r.padding)*t);return n=Math.ceil(n-1e-6),s=Math.ceil(s-1e-6),n=(0,h.U5)(n),s=(0,h.U5)(s),{width:n,height:s}}getTexture(e,t,r,i){"string"==typeof e&&((0,g.t6)("8.0.0","CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments"),e={text:e,style:r,resolution:t}),e.style instanceof m.x||(e.style=new m.x(e.style));const{texture:n,canvasAndContext:s}=this.createTextureAndCanvas(e);return this._renderer.texture.initSource(n._source),d.N.returnCanvasAndContext(s),n}createTextureAndCanvas(e){const{text:t,style:r}=e,i=e.resolution??this._renderer.resolution,n=_.P.measureText(t||" ",r),s=Math.ceil(Math.ceil(Math.max(1,n.width)+2*r.padding)*i),a=Math.ceil(Math.ceil(Math.max(1,n.height)+2*r.padding)*i),o=d.N.getOptimalCanvasAndContext(s,a),{canvas:l}=o;this.renderTextToCanvas(t,r,i,o);const h=(0,x.M)(l,s,a,i);if(r.trim){const e=function(e,t=1){const{width:r,height:i}=e,n=e.getContext("2d",{willReadFrequently:!0});if(null===n)throw new TypeError("Failed to get canvas 2D context");const s=n.getImageData(0,0,r,i).data;let a=0,o=0,l=r-1,h=i-1;for(;o<i&&p(s,r,o);)++o;if(o===i)return c.M.EMPTY;for(;p(s,r,h);)--h;for(;f(s,r,a,o,h);)++a;for(;f(s,r,l,o,h);)--l;return++l,++h,new c.M(a/t,o/t,(l-a)/t,(h-o)/t)}(l,i);h.frame.copyFrom(e),h.updateUvs()}return{texture:h,canvasAndContext:o}}getManagedTexture(e){e._resolution=e._autoResolution?this._renderer.resolution:e.resolution;const t=e._getKey();if(this._activeTextures[t])return this._increaseReferenceCount(t),this._activeTextures[t].texture;const{texture:r,canvasAndContext:i}=this.createTextureAndCanvas(e);return this._activeTextures[t]={canvasAndContext:i,texture:r,usageCount:1},r}_increaseReferenceCount(e){this._activeTextures[e].usageCount++}decreaseReferenceCount(e){const t=this._activeTextures[e];if(t.usageCount--,0===t.usageCount){d.N.returnCanvasAndContext(t.canvasAndContext),u.W.returnTexture(t.texture);const r=t.texture.source;r.resource=null,r.uploadMethodId="unknown",r.alphaMode="no-premultiply-alpha",this._activeTextures[e]=null}}getReferenceCount(e){return this._activeTextures[e].usageCount}renderTextToCanvas(e,t,r,i){const{canvas:n,context:s}=i,a=(0,b.Z)(t),o=_.P.measureText(e||" ",t),h=o.lines,d=o.lineHeight,u=o.lineWidths,c=o.maxLineWidth,p=o.fontProperties,f=n.height;if(s.resetTransform(),s.scale(r,r),s.textBaseline=t.textBaseline,t._stroke?.width){const e=t._stroke;s.lineWidth=e.width,s.miterLimit=e.miterLimit,s.lineJoin=e.join,s.lineCap=e.cap}let g,m;s.font=a;const x=t.dropShadow?2:1;for(let e=0;e<x;++e){const n=t.dropShadow&&0===e,a=n?Math.ceil(Math.max(1,f)+2*t.padding):0,o=a*r;if(n){s.fillStyle="black",s.strokeStyle="black";const e=t.dropShadow,i=e.color,n=e.alpha;s.shadowColor=l.Q.shared.setValue(i).setAlpha(n).toRgbaString();const a=e.blur*r,h=e.distance*r;s.shadowBlur=a,s.shadowOffsetX=Math.cos(e.angle)*h,s.shadowOffsetY=Math.sin(e.angle)*h+o}else s.fillStyle=t._fill?(0,y.r)(t._fill,s):null,t._stroke?.width&&(s.strokeStyle=(0,y.r)(t._stroke,s)),s.shadowColor="black";let x=(d-p.fontSize)/2;d-p.fontSize<0&&(x=0);const _=t._stroke?.width??0;for(let e=0;e<h.length;e++)g=_/2,m=_/2+e*d+p.ascent+x,"right"===t.align?g+=c-u[e]:"center"===t.align&&(g+=(c-u[e])/2),t._stroke?.width&&this._drawLetterSpacing(h[e],t,i,g+t.padding,m+t.padding-a,!0),void 0!==t._fill&&this._drawLetterSpacing(h[e],t,i,g+t.padding,m+t.padding-a)}}_drawLetterSpacing(e,t,r,i,n,s=!1){const{context:a}=r,o=t.letterSpacing;let l=!1;if(_.P.experimentalLetterSpacingSupported&&(_.P.experimentalLetterSpacing?(a.letterSpacing=`${o}px`,a.textLetterSpacing=`${o}px`,l=!0):(a.letterSpacing="0px",a.textLetterSpacing="0px")),0===o||l)return void(s?a.strokeText(e,i,n):a.fillText(e,i,n));let h=i;const d=_.P.graphemeSegmenter(e);let u=a.measureText(e).width,c=0;for(let e=0;e<d.length;++e){const t=d[e];s?a.strokeText(t,h,n):a.fillText(t,h,n);let r="";for(let t=e+1;t<d.length;++t)r+=d[t];c=a.measureText(r).width,h+=u-c+o,u=c}}destroy(){this._activeTextures=null}}v.extension={type:[i.Ag.WebGLSystem,i.Ag.WebGPUSystem,i.Ag.CanvasSystem],name:"canvasText"},i.XO.add(v),i.XO.add(o)},2558:(e,t,r)=>{r.d(t,{M:()=>s});var i=r(2437);const n=new(r(9636).c);function s(e,t,r,s){const a=n;a.minX=0,a.minY=0,a.maxX=e.width/s|0,a.maxY=e.height/s|0;const o=i.W.getOptimalTexture(a.width,a.height,s,!1);return o.source.uploadMethodId="image",o.source.resource=e,o.source.alphaMode="premultiply-alpha-on-upload",o.frame.width=t/s,o.frame.height=r/s,o.source.emit("update",o.source),o.updateUvs(),o}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QW1CRyxFQUFnQkMsRUFBZXJSLEVBQ2xEb1IsRUFBZ0JDLENBQ2xCLENBQ0YsQ0FDQSxPQUFBbGdDLEdBQ0V4QixLQUFLbzZCLGdCQUFrQixJQUN6QixFQUdGZ0YsRUFBaUIzOUIsVUFBWSxDQUMzQm1DLEtBQU0sQ0FDSixLQUFjZ0wsWUFDZCxLQUFjQyxhQUNkLEtBQWNpdkIsY0FFaEI5NUIsS0FBTSxjQzFQUixLQUFXOUIsSUFBSWs5QixHQUNmLEtBQVdsOUIsSUFBSTI4QixFLGdEQ0ZmLE1BQU1nRCxFQUFhLEksUUFBSSxHQUN2QixTQUFTckUsRUFBd0IzRyxFQUFPLzFCLEVBQU9DLEVBQVFnSSxHQUNyRCxNQUFNMUUsRUFBU3c5QixFQUNmeDlCLEVBQU9tQixLQUFPLEVBQ2RuQixFQUFPb0IsS0FBTyxFQUNkcEIsRUFBT3FCLEtBQU9teEIsRUFBTS8xQixNQUFRaUksRUFBYSxFQUN6QzFFLEVBQU9zQixLQUFPa3hCLEVBQU05MUIsT0FBU2dJLEVBQWEsRUFDMUMsTUFBTTBGLEVBQVUsSUFBWWpFLGtCQUMxQm5HLEVBQU92RCxNQUNQdUQsRUFBT3RELE9BQ1BnSSxHQUNBLEdBU0YsT0FQQTBGLEVBQVEzRixPQUFPODBCLGVBQWlCLFFBQ2hDbnZCLEVBQVEzRixPQUFPb2tCLFNBQVcySixFQUMxQnBvQixFQUFRM0YsT0FBT3FrQixVQUFZLDhCQUMzQjFlLEVBQVExQixNQUFNak0sTUFBUUEsRUFBUWlJLEVBQzlCMEYsRUFBUTFCLE1BQU1oTSxPQUFTQSxFQUFTZ0ksRUFDaEMwRixFQUFRM0YsT0FBT2lmLEtBQUssU0FBVXRaLEVBQVEzRixRQUN0QzJGLEVBQVFrRSxZQUNEbEUsQ0FDVCxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvYXBwL1Jlc2l6ZVBsdWdpbi5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvYXBwL1RpY2tlclBsdWdpbi5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvYXBwL2luaXQubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL2ZpbHRlcnMvRmlsdGVyUGlwZS5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvY29udGFpbmVyL2JvdW5kcy9nZXRGYXN0R2xvYmFsQm91bmRzLm1qcyIsIndlYnBhY2s6Ly93Y2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9maWx0ZXJzL0ZpbHRlclN5c3RlbS5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvY29udGFpbmVyL2JvdW5kcy9nZXRSZW5kZXJhYmxlQm91bmRzLm1qcyIsIndlYnBhY2s6Ly93Y2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9maWx0ZXJzL2luaXQubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9oaWdoLXNoYWRlci9zaGFkZXItYml0cy9sb2NhbFVuaWZvcm1CaXQubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3N0YXRlL1N0YXRlLm1qcyIsIndlYnBhY2s6Ly93Y2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC90ZXh0dXJlL0NhbnZhc1Bvb2wubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3RleHR1cmUvVGV4dHVyZVBvb2wubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL2dyYXBoaWNzL2dwdS9jb2xvclRvVW5pZm9ybS5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvZ3JhcGhpY3Mvc2hhcmVkL0dyYXBoaWNzUGlwZS5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvZ3JhcGhpY3MvaW5pdC5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvbWVzaC9zaGFyZWQvTWVzaFBpcGUubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL21lc2gvaW5pdC5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvbWVzaC9zaGFyZWQvQmF0Y2hhYmxlTWVzaC5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvbWVzaC9zaGFyZWQvTWVzaEdlb21ldHJ5Lm1qcyIsIndlYnBhY2s6Ly93Y2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9wYXJ0aWNsZS1jb250YWluZXIvZ2wvR2xQYXJ0aWNsZUNvbnRhaW5lckFkYXB0b3IubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3BhcnRpY2xlLWNvbnRhaW5lci9zaGFyZWQvdXRpbHMvY3JlYXRlSW5kaWNlc0ZvclF1YWRzLm1qcyIsIndlYnBhY2s6Ly93Y2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9wYXJ0aWNsZS1jb250YWluZXIvc2hhcmVkL3V0aWxzL2dlbmVyYXRlUGFydGljbGVVcGRhdGVGdW5jdGlvbi5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvcGFydGljbGUtY29udGFpbmVyL3NoYXJlZC9QYXJ0aWNsZUJ1ZmZlci5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvcGFydGljbGUtY29udGFpbmVyL3NoYXJlZC9zaGFkZXIvcGFydGljbGVzLndnc2wubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3BhcnRpY2xlLWNvbnRhaW5lci9zaGFyZWQvc2hhZGVyL1BhcnRpY2xlU2hhZGVyLm1qcyIsIndlYnBhY2s6Ly93Y2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9wYXJ0aWNsZS1jb250YWluZXIvc2hhcmVkL3NoYWRlci9wYXJ0aWNsZXMudmVydC5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvcGFydGljbGUtY29udGFpbmVyL3NoYXJlZC9zaGFkZXIvcGFydGljbGVzLmZyYWcubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3BhcnRpY2xlLWNvbnRhaW5lci9zaGFyZWQvUGFydGljbGVDb250YWluZXJQaXBlLm1qcyIsIndlYnBhY2s6Ly93Y2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9wYXJ0aWNsZS1jb250YWluZXIvc2hhcmVkL0dsUGFydGljbGVDb250YWluZXJQaXBlLm1qcyIsIndlYnBhY2s6Ly93Y2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9wYXJ0aWNsZS1jb250YWluZXIvZ3B1L0dwdVBhcnRpY2xlQ29udGFpbmVyQWRhcHRvci5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvcGFydGljbGUtY29udGFpbmVyL3NoYXJlZC9HcHVQYXJ0aWNsZUNvbnRhaW5lclBpcGUubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3BhcnRpY2xlLWNvbnRhaW5lci9pbml0Lm1qcyIsIndlYnBhY2s6Ly93Y2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9tZXNoLXBsYW5lL1BsYW5lR2VvbWV0cnkubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3Nwcml0ZS1uaW5lLXNsaWNlL05pbmVTbGljZUdlb21ldHJ5Lm1qcyIsIndlYnBhY2s6Ly93Y2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9zcHJpdGUtbmluZS1zbGljZS9OaW5lU2xpY2VTcHJpdGVQaXBlLm1qcyIsIndlYnBhY2s6Ly93Y2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9zcHJpdGUtbmluZS1zbGljZS9pbml0Lm1qcyIsIndlYnBhY2s6Ly93Y2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9zcHJpdGUtdGlsaW5nL3NoYWRlci90aWxpbmdCaXQubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3Nwcml0ZS10aWxpbmcvc2hhZGVyL1RpbGluZ1Nwcml0ZVNoYWRlci5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvc3ByaXRlLXRpbGluZy91dGlscy9RdWFkR2VvbWV0cnkubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3Nwcml0ZS10aWxpbmcvVGlsaW5nU3ByaXRlUGlwZS5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvc3ByaXRlLXRpbGluZy91dGlscy9zZXRVdnMubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3Nwcml0ZS10aWxpbmcvdXRpbHMvYXBwbHlNYXRyaXgubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3Nwcml0ZS10aWxpbmcvdXRpbHMvc2V0UG9zaXRpb25zLm1qcyIsIndlYnBhY2s6Ly93Y2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS9zcHJpdGUtdGlsaW5nL2luaXQubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3Nwcml0ZS9CYXRjaGFibGVTcHJpdGUubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQvc2RmU2hhZGVyL3NoYWRlci1iaXRzL2xvY2FsVW5pZm9ybU1TREZCaXQubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQvc2RmU2hhZGVyL3NoYWRlci1iaXRzL21TREZCaXQubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQvc2RmU2hhZGVyL1NkZlNoYWRlci5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvdGV4dC1iaXRtYXAvQWJzdHJhY3RCaXRtYXBGb250Lm1qcyIsIndlYnBhY2s6Ly93Y2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS90ZXh0LWJpdG1hcC91dGlscy9yZXNvbHZlQ2hhcmFjdGVycy5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvdGV4dC1iaXRtYXAvRHluYW1pY0JpdG1hcEZvbnQubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQtYml0bWFwL3V0aWxzL2dldEJpdG1hcFRleHRMYXlvdXQubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQtYml0bWFwL0JpdG1hcEZvbnRNYW5hZ2VyLm1qcyIsIndlYnBhY2s6Ly93Y2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS90ZXh0LWJpdG1hcC9CaXRtYXBUZXh0UGlwZS5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvdGV4dC1iaXRtYXAvaW5pdC5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvdGV4dC1odG1sL0hUTUxUZXh0UGlwZS5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvdGV4dC1odG1sL0hUTUxUZXh0UmVuZGVyRGF0YS5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvdGV4dC1odG1sL3V0aWxzL3RleHRTdHlsZVRvQ1NTLm1qcyIsIndlYnBhY2s6Ly93Y2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS90ZXh0LWh0bWwvSHRtbFRleHRTdHlsZS5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvdGV4dC1odG1sL3V0aWxzL2xvYWRGb250Q1NTLm1qcyIsIndlYnBhY2s6Ly93Y2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS90ZXh0LWh0bWwvdXRpbHMvbG9hZEZvbnRBc0Jhc2U2NC5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvdGV4dC1odG1sL3V0aWxzL2dldEZvbnRDc3MubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQtaHRtbC91dGlscy9tZWFzdXJlSHRtbFRleHQubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQtaHRtbC9IVE1MVGV4dFN5c3RlbS5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvdGV4dC1odG1sL3V0aWxzL2V4dHJhY3RGb250RmFtaWxpZXMubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQtaHRtbC91dGlscy9nZXRTVkdVcmwubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQtaHRtbC91dGlscy9sb2FkU1ZHSW1hZ2UubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3V0aWxzL2Jyb3dzZXIvaXNTYWZhcmkubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQtaHRtbC91dGlscy9nZXRUZW1wb3JhcnlDYW52YXNGcm9tSW1hZ2UubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQtaHRtbC9pbml0Lm1qcyIsIndlYnBhY2s6Ly93Y2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi9zY2VuZS90ZXh0L2NhbnZhcy91dGlscy9nZXRDYW52YXNGaWxsU3R5bGUubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQvY2FudmFzL0NhbnZhc1RleHRQaXBlLm1qcyIsIndlYnBhY2s6Ly93Y2FyZC8uL25vZGVfbW9kdWxlcy9waXhpLmpzL2xpYi91dGlscy9jYW52YXMvZ2V0Q2FudmFzQm91bmRpbmdCb3gubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQvY2FudmFzL0NhbnZhc1RleHRTeXN0ZW0ubWpzIiwid2VicGFjazovL3djYXJkLy4vbm9kZV9tb2R1bGVzL3BpeGkuanMvbGliL3NjZW5lL3RleHQvaW5pdC5tanMiLCJ3ZWJwYWNrOi8vd2NhcmQvLi9ub2RlX21vZHVsZXMvcGl4aS5qcy9saWIvc2NlbmUvdGV4dC91dGlscy9nZXRQbzJUZXh0dXJlRnJvbVNvdXJjZS5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIFJlc2l6ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHRoZSBwbHVnaW4gd2l0aCBzY29wZSBvZiBhcHBsaWNhdGlvbiBpbnN0YW5jZVxuICAgKiBAc3RhdGljXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBTZWUgYXBwbGljYXRpb24gb3B0aW9uc1xuICAgKi9cbiAgc3RhdGljIGluaXQob3B0aW9ucykge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgIHRoaXMsXG4gICAgICBcInJlc2l6ZVRvXCIsXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBIVE1MIGVsZW1lbnQgb3Igd2luZG93IHRvIGF1dG9tYXRpY2FsbHkgcmVzaXplIHRoZVxuICAgICAgICogcmVuZGVyZXIncyB2aWV3IGVsZW1lbnQgdG8gbWF0Y2ggd2lkdGggYW5kIGhlaWdodC5cbiAgICAgICAqIEBtZW1iZXIge1dpbmRvd3xIVE1MRWxlbWVudH1cbiAgICAgICAqIEBuYW1lIHJlc2l6ZVRvXG4gICAgICAgKiBAbWVtYmVyb2YgYXBwLkFwcGxpY2F0aW9uI1xuICAgICAgICovXG4gICAgICB7XG4gICAgICAgIHNldChkb20pIHtcbiAgICAgICAgICBnbG9iYWxUaGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5xdWV1ZVJlc2l6ZSk7XG4gICAgICAgICAgdGhpcy5fcmVzaXplVG8gPSBkb207XG4gICAgICAgICAgaWYgKGRvbSkge1xuICAgICAgICAgICAgZ2xvYmFsVGhpcy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMucXVldWVSZXNpemUpO1xuICAgICAgICAgICAgdGhpcy5yZXNpemUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fcmVzaXplVG87XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICAgIHRoaXMucXVldWVSZXNpemUgPSAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuX3Jlc2l6ZVRvKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2NhbmNlbFJlc2l6ZSgpO1xuICAgICAgdGhpcy5fcmVzaXplSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5yZXNpemUoKSk7XG4gICAgfTtcbiAgICB0aGlzLl9jYW5jZWxSZXNpemUgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5fcmVzaXplSWQpIHtcbiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5fcmVzaXplSWQpO1xuICAgICAgICB0aGlzLl9yZXNpemVJZCA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLnJlc2l6ZSA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5fcmVzaXplVG8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fY2FuY2VsUmVzaXplKCk7XG4gICAgICBsZXQgd2lkdGg7XG4gICAgICBsZXQgaGVpZ2h0O1xuICAgICAgaWYgKHRoaXMuX3Jlc2l6ZVRvID09PSBnbG9iYWxUaGlzLndpbmRvdykge1xuICAgICAgICB3aWR0aCA9IGdsb2JhbFRoaXMuaW5uZXJXaWR0aDtcbiAgICAgICAgaGVpZ2h0ID0gZ2xvYmFsVGhpcy5pbm5lckhlaWdodDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHsgY2xpZW50V2lkdGgsIGNsaWVudEhlaWdodCB9ID0gdGhpcy5fcmVzaXplVG87XG4gICAgICAgIHdpZHRoID0gY2xpZW50V2lkdGg7XG4gICAgICAgIGhlaWdodCA9IGNsaWVudEhlaWdodDtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVuZGVyZXIucmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9O1xuICAgIHRoaXMuX3Jlc2l6ZUlkID0gbnVsbDtcbiAgICB0aGlzLl9yZXNpemVUbyA9IG51bGw7XG4gICAgdGhpcy5yZXNpemVUbyA9IG9wdGlvbnMucmVzaXplVG8gfHwgbnVsbDtcbiAgfVxuICAvKipcbiAgICogQ2xlYW4gdXAgdGhlIHRpY2tlciwgc2NvcGVkIHRvIGFwcGxpY2F0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBkZXN0cm95KCkge1xuICAgIGdsb2JhbFRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLnF1ZXVlUmVzaXplKTtcbiAgICB0aGlzLl9jYW5jZWxSZXNpemUoKTtcbiAgICB0aGlzLl9jYW5jZWxSZXNpemUgPSBudWxsO1xuICAgIHRoaXMucXVldWVSZXNpemUgPSBudWxsO1xuICAgIHRoaXMucmVzaXplVG8gPSBudWxsO1xuICAgIHRoaXMucmVzaXplID0gbnVsbDtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cblJlc2l6ZVBsdWdpbi5leHRlbnNpb24gPSBFeHRlbnNpb25UeXBlLkFwcGxpY2F0aW9uO1xuXG5leHBvcnQgeyBSZXNpemVQbHVnaW4gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlc2l6ZVBsdWdpbi5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBVUERBVEVfUFJJT1JJVFkgfSBmcm9tICcuLi90aWNrZXIvY29uc3QubWpzJztcbmltcG9ydCB7IFRpY2tlciB9IGZyb20gJy4uL3RpY2tlci9UaWNrZXIubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBUaWNrZXJQbHVnaW4ge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgcGx1Z2luIHdpdGggc2NvcGUgb2YgYXBwbGljYXRpb24gaW5zdGFuY2VcbiAgICogQHN0YXRpY1xuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gU2VlIGFwcGxpY2F0aW9uIG9wdGlvbnNcbiAgICovXG4gIHN0YXRpYyBpbml0KG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICBhdXRvU3RhcnQ6IHRydWUsXG4gICAgICBzaGFyZWRUaWNrZXI6IGZhbHNlXG4gICAgfSwgb3B0aW9ucyk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFxuICAgICAgdGhpcyxcbiAgICAgIFwidGlja2VyXCIsXG4gICAgICB7XG4gICAgICAgIHNldCh0aWNrZXIpIHtcbiAgICAgICAgICBpZiAodGhpcy5fdGlja2VyKSB7XG4gICAgICAgICAgICB0aGlzLl90aWNrZXIucmVtb3ZlKHRoaXMucmVuZGVyLCB0aGlzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fdGlja2VyID0gdGlja2VyO1xuICAgICAgICAgIGlmICh0aWNrZXIpIHtcbiAgICAgICAgICAgIHRpY2tlci5hZGQodGhpcy5yZW5kZXIsIHRoaXMsIFVQREFURV9QUklPUklUWS5MT1cpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl90aWNrZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICAgIHRoaXMuc3RvcCA9ICgpID0+IHtcbiAgICAgIHRoaXMuX3RpY2tlci5zdG9wKCk7XG4gICAgfTtcbiAgICB0aGlzLnN0YXJ0ID0gKCkgPT4ge1xuICAgICAgdGhpcy5fdGlja2VyLnN0YXJ0KCk7XG4gICAgfTtcbiAgICB0aGlzLl90aWNrZXIgPSBudWxsO1xuICAgIHRoaXMudGlja2VyID0gb3B0aW9ucy5zaGFyZWRUaWNrZXIgPyBUaWNrZXIuc2hhcmVkIDogbmV3IFRpY2tlcigpO1xuICAgIGlmIChvcHRpb25zLmF1dG9TdGFydCkge1xuICAgICAgdGhpcy5zdGFydCgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2xlYW4gdXAgdGhlIHRpY2tlciwgc2NvcGVkIHRvIGFwcGxpY2F0aW9uLlxuICAgKiBAc3RhdGljXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGF0aWMgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5fdGlja2VyKSB7XG4gICAgICBjb25zdCBvbGRUaWNrZXIgPSB0aGlzLl90aWNrZXI7XG4gICAgICB0aGlzLnRpY2tlciA9IG51bGw7XG4gICAgICBvbGRUaWNrZXIuZGVzdHJveSgpO1xuICAgIH1cbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cblRpY2tlclBsdWdpbi5leHRlbnNpb24gPSBFeHRlbnNpb25UeXBlLkFwcGxpY2F0aW9uO1xuXG5leHBvcnQgeyBUaWNrZXJQbHVnaW4gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRpY2tlclBsdWdpbi5tanMubWFwXG4iLCJpbXBvcnQgeyBleHRlbnNpb25zIH0gZnJvbSAnLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBSZXNpemVQbHVnaW4gfSBmcm9tICcuL1Jlc2l6ZVBsdWdpbi5tanMnO1xuaW1wb3J0IHsgVGlja2VyUGx1Z2luIH0gZnJvbSAnLi9UaWNrZXJQbHVnaW4ubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5leHRlbnNpb25zLmFkZChSZXNpemVQbHVnaW4pO1xuZXh0ZW5zaW9ucy5hZGQoVGlja2VyUGx1Z2luKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaXQubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEZpbHRlclBpcGUge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcikge1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gIH1cbiAgcHVzaChmaWx0ZXJFZmZlY3QsIGNvbnRhaW5lciwgaW5zdHJ1Y3Rpb25TZXQpIHtcbiAgICBjb25zdCByZW5kZXJQaXBlcyA9IHRoaXMuX3JlbmRlcmVyLnJlbmRlclBpcGVzO1xuICAgIHJlbmRlclBpcGVzLmJhdGNoLmJyZWFrKGluc3RydWN0aW9uU2V0KTtcbiAgICBpbnN0cnVjdGlvblNldC5hZGQoe1xuICAgICAgcmVuZGVyUGlwZUlkOiBcImZpbHRlclwiLFxuICAgICAgY2FuQnVuZGxlOiBmYWxzZSxcbiAgICAgIGFjdGlvbjogXCJwdXNoRmlsdGVyXCIsXG4gICAgICBjb250YWluZXIsXG4gICAgICBmaWx0ZXJFZmZlY3RcbiAgICB9KTtcbiAgfVxuICBwb3AoX2ZpbHRlckVmZmVjdCwgX2NvbnRhaW5lciwgaW5zdHJ1Y3Rpb25TZXQpIHtcbiAgICB0aGlzLl9yZW5kZXJlci5yZW5kZXJQaXBlcy5iYXRjaC5icmVhayhpbnN0cnVjdGlvblNldCk7XG4gICAgaW5zdHJ1Y3Rpb25TZXQuYWRkKHtcbiAgICAgIHJlbmRlclBpcGVJZDogXCJmaWx0ZXJcIixcbiAgICAgIGFjdGlvbjogXCJwb3BGaWx0ZXJcIixcbiAgICAgIGNhbkJ1bmRsZTogZmFsc2VcbiAgICB9KTtcbiAgfVxuICBleGVjdXRlKGluc3RydWN0aW9uKSB7XG4gICAgaWYgKGluc3RydWN0aW9uLmFjdGlvbiA9PT0gXCJwdXNoRmlsdGVyXCIpIHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLmZpbHRlci5wdXNoKGluc3RydWN0aW9uKTtcbiAgICB9IGVsc2UgaWYgKGluc3RydWN0aW9uLmFjdGlvbiA9PT0gXCJwb3BGaWx0ZXJcIikge1xuICAgICAgdGhpcy5fcmVuZGVyZXIuZmlsdGVyLnBvcCgpO1xuICAgIH1cbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcbiAgfVxufVxuRmlsdGVyUGlwZS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMUGlwZXMsXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHUFVQaXBlcyxcbiAgICBFeHRlbnNpb25UeXBlLkNhbnZhc1BpcGVzXG4gIF0sXG4gIG5hbWU6IFwiZmlsdGVyXCJcbn07XG5cbmV4cG9ydCB7IEZpbHRlclBpcGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZpbHRlclBpcGUubWpzLm1hcFxuIiwiaW1wb3J0IHsgTWF0cml4IH0gZnJvbSAnLi4vLi4vLi4vbWF0aHMvbWF0cml4L01hdHJpeC5tanMnO1xuaW1wb3J0IHsgYm91bmRzUG9vbCB9IGZyb20gJy4vdXRpbHMvbWF0cml4QW5kQm91bmRzUG9vbC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IHRlbXBNYXRyaXggPSBuZXcgTWF0cml4KCk7XG5mdW5jdGlvbiBnZXRGYXN0R2xvYmFsQm91bmRzKHRhcmdldCwgYm91bmRzKSB7XG4gIGJvdW5kcy5jbGVhcigpO1xuICBfZ2V0R2xvYmFsQm91bmRzUmVjdXJzaXZlKHRhcmdldCwgYm91bmRzKTtcbiAgaWYgKCFib3VuZHMuaXNWYWxpZCkge1xuICAgIGJvdW5kcy5zZXQoMCwgMCwgMCwgMCk7XG4gIH1cbiAgaWYgKCF0YXJnZXQucmVuZGVyR3JvdXApIHtcbiAgICBib3VuZHMuYXBwbHlNYXRyaXgodGFyZ2V0LnBhcmVudFJlbmRlckdyb3VwLndvcmxkVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICBib3VuZHMuYXBwbHlNYXRyaXgodGFyZ2V0LnJlbmRlckdyb3VwLmxvY2FsVHJhbnNmb3JtKTtcbiAgfVxuICByZXR1cm4gYm91bmRzO1xufVxuZnVuY3Rpb24gX2dldEdsb2JhbEJvdW5kc1JlY3Vyc2l2ZSh0YXJnZXQsIGJvdW5kcykge1xuICBpZiAodGFyZ2V0LmxvY2FsRGlzcGxheVN0YXR1cyAhPT0gNyB8fCAhdGFyZ2V0Lm1lYXN1cmFibGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgbWFuYWdlRWZmZWN0cyA9ICEhdGFyZ2V0LmVmZmVjdHMubGVuZ3RoO1xuICBsZXQgbG9jYWxCb3VuZHMgPSBib3VuZHM7XG4gIGlmICh0YXJnZXQucmVuZGVyR3JvdXAgfHwgbWFuYWdlRWZmZWN0cykge1xuICAgIGxvY2FsQm91bmRzID0gYm91bmRzUG9vbC5nZXQoKS5jbGVhcigpO1xuICB9XG4gIGlmICh0YXJnZXQuYm91bmRzQXJlYSkge1xuICAgIGJvdW5kcy5hZGRSZWN0KHRhcmdldC5ib3VuZHNBcmVhLCB0YXJnZXQud29ybGRUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIGlmICh0YXJnZXQucmVuZGVyUGlwZUlkKSB7XG4gICAgICBjb25zdCB2aWV3Qm91bmRzID0gdGFyZ2V0LmJvdW5kcztcbiAgICAgIGxvY2FsQm91bmRzLmFkZEZyYW1lKFxuICAgICAgICB2aWV3Qm91bmRzLm1pblgsXG4gICAgICAgIHZpZXdCb3VuZHMubWluWSxcbiAgICAgICAgdmlld0JvdW5kcy5tYXhYLFxuICAgICAgICB2aWV3Qm91bmRzLm1heFksXG4gICAgICAgIHRhcmdldC5ncm91cFRyYW5zZm9ybVxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgY2hpbGRyZW4gPSB0YXJnZXQuY2hpbGRyZW47XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgX2dldEdsb2JhbEJvdW5kc1JlY3Vyc2l2ZShjaGlsZHJlbltpXSwgbG9jYWxCb3VuZHMpO1xuICAgIH1cbiAgfVxuICBpZiAobWFuYWdlRWZmZWN0cykge1xuICAgIGxldCBhZHZhbmNlZCA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFyZ2V0LmVmZmVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0YXJnZXQuZWZmZWN0c1tpXS5hZGRCb3VuZHMpIHtcbiAgICAgICAgaWYgKCFhZHZhbmNlZCkge1xuICAgICAgICAgIGFkdmFuY2VkID0gdHJ1ZTtcbiAgICAgICAgICBsb2NhbEJvdW5kcy5hcHBseU1hdHJpeCh0YXJnZXQucGFyZW50UmVuZGVyR3JvdXAud29ybGRUcmFuc2Zvcm0pO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldC5lZmZlY3RzW2ldLmFkZEJvdW5kcyhsb2NhbEJvdW5kcywgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChhZHZhbmNlZCkge1xuICAgICAgbG9jYWxCb3VuZHMuYXBwbHlNYXRyaXgodGFyZ2V0LnBhcmVudFJlbmRlckdyb3VwLndvcmxkVHJhbnNmb3JtLmNvcHlUbyh0ZW1wTWF0cml4KS5pbnZlcnQoKSk7XG4gICAgICBib3VuZHMuYWRkQm91bmRzKGxvY2FsQm91bmRzLCB0YXJnZXQucmVsYXRpdmVHcm91cFRyYW5zZm9ybSk7XG4gICAgfVxuICAgIGJvdW5kcy5hZGRCb3VuZHMobG9jYWxCb3VuZHMpO1xuICAgIGJvdW5kc1Bvb2wucmV0dXJuKGxvY2FsQm91bmRzKTtcbiAgfSBlbHNlIGlmICh0YXJnZXQucmVuZGVyR3JvdXApIHtcbiAgICBib3VuZHMuYWRkQm91bmRzKGxvY2FsQm91bmRzLCB0YXJnZXQucmVsYXRpdmVHcm91cFRyYW5zZm9ybSk7XG4gICAgYm91bmRzUG9vbC5yZXR1cm4obG9jYWxCb3VuZHMpO1xuICB9XG59XG5cbmV4cG9ydCB7IF9nZXRHbG9iYWxCb3VuZHNSZWN1cnNpdmUsIGdldEZhc3RHbG9iYWxCb3VuZHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldEZhc3RHbG9iYWxCb3VuZHMubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgTWF0cml4IH0gZnJvbSAnLi4vbWF0aHMvbWF0cml4L01hdHJpeC5tanMnO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuLi9tYXRocy9wb2ludC9Qb2ludC5tanMnO1xuaW1wb3J0IHsgQmluZEdyb3VwIH0gZnJvbSAnLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9ncHUvc2hhZGVyL0JpbmRHcm91cC5tanMnO1xuaW1wb3J0IHsgR2VvbWV0cnkgfSBmcm9tICcuLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9nZW9tZXRyeS9HZW9tZXRyeS5tanMnO1xuaW1wb3J0IHsgVW5pZm9ybUdyb3VwIH0gZnJvbSAnLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvc2hhZGVyL1VuaWZvcm1Hcm91cC5tanMnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3RleHR1cmUvVGV4dHVyZS5tanMnO1xuaW1wb3J0IHsgVGV4dHVyZVBvb2wgfSBmcm9tICcuLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC90ZXh0dXJlL1RleHR1cmVQb29sLm1qcyc7XG5pbXBvcnQgeyBSZW5kZXJlclR5cGUgfSBmcm9tICcuLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3R5cGVzLm1qcyc7XG5pbXBvcnQgeyBCb3VuZHMgfSBmcm9tICcuLi9zY2VuZS9jb250YWluZXIvYm91bmRzL0JvdW5kcy5tanMnO1xuaW1wb3J0IHsgZ2V0RmFzdEdsb2JhbEJvdW5kcyB9IGZyb20gJy4uL3NjZW5lL2NvbnRhaW5lci9ib3VuZHMvZ2V0RmFzdEdsb2JhbEJvdW5kcy5tanMnO1xuaW1wb3J0IHsgZ2V0R2xvYmFsUmVuZGVyYWJsZUJvdW5kcyB9IGZyb20gJy4uL3NjZW5lL2NvbnRhaW5lci9ib3VuZHMvZ2V0UmVuZGVyYWJsZUJvdW5kcy5tanMnO1xuaW1wb3J0IHsgd2FybiB9IGZyb20gJy4uL3V0aWxzL2xvZ2dpbmcvd2Fybi5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IHF1YWRHZW9tZXRyeSA9IG5ldyBHZW9tZXRyeSh7XG4gIGF0dHJpYnV0ZXM6IHtcbiAgICBhUG9zaXRpb246IHtcbiAgICAgIGJ1ZmZlcjogbmV3IEZsb2F0MzJBcnJheShbMCwgMCwgMSwgMCwgMSwgMSwgMCwgMV0pLFxuICAgICAgZm9ybWF0OiBcImZsb2F0MzJ4MlwiLFxuICAgICAgc3RyaWRlOiAyICogNCxcbiAgICAgIG9mZnNldDogMFxuICAgIH1cbiAgfSxcbiAgaW5kZXhCdWZmZXI6IG5ldyBVaW50MzJBcnJheShbMCwgMSwgMiwgMCwgMiwgM10pXG59KTtcbmNsYXNzIEZpbHRlclN5c3RlbSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fZmlsdGVyU3RhY2tJbmRleCA9IDA7XG4gICAgdGhpcy5fZmlsdGVyU3RhY2sgPSBbXTtcbiAgICB0aGlzLl9maWx0ZXJHbG9iYWxVbmlmb3JtcyA9IG5ldyBVbmlmb3JtR3JvdXAoe1xuICAgICAgdUlucHV0U2l6ZTogeyB2YWx1ZTogbmV3IEZsb2F0MzJBcnJheSg0KSwgdHlwZTogXCJ2ZWM0PGYzMj5cIiB9LFxuICAgICAgdUlucHV0UGl4ZWw6IHsgdmFsdWU6IG5ldyBGbG9hdDMyQXJyYXkoNCksIHR5cGU6IFwidmVjNDxmMzI+XCIgfSxcbiAgICAgIHVJbnB1dENsYW1wOiB7IHZhbHVlOiBuZXcgRmxvYXQzMkFycmF5KDQpLCB0eXBlOiBcInZlYzQ8ZjMyPlwiIH0sXG4gICAgICB1T3V0cHV0RnJhbWU6IHsgdmFsdWU6IG5ldyBGbG9hdDMyQXJyYXkoNCksIHR5cGU6IFwidmVjNDxmMzI+XCIgfSxcbiAgICAgIHVHbG9iYWxGcmFtZTogeyB2YWx1ZTogbmV3IEZsb2F0MzJBcnJheSg0KSwgdHlwZTogXCJ2ZWM0PGYzMj5cIiB9LFxuICAgICAgdU91dHB1dFRleHR1cmU6IHsgdmFsdWU6IG5ldyBGbG9hdDMyQXJyYXkoNCksIHR5cGU6IFwidmVjNDxmMzI+XCIgfVxuICAgIH0pO1xuICAgIHRoaXMuX2dsb2JhbEZpbHRlckJpbmRHcm91cCA9IG5ldyBCaW5kR3JvdXAoe30pO1xuICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgfVxuICAvKipcbiAgICogVGhlIGJhY2sgdGV4dHVyZSBvZiB0aGUgY3VycmVudGx5IGFjdGl2ZSBmaWx0ZXIuIFJlcXVpcmVzIHRoZSBmaWx0ZXIgdG8gaGF2ZSBgYmxlbmRSZXF1aXJlZGAgc2V0IHRvIHRydWUuXG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IGFjdGl2ZUJhY2tUZXh0dXJlKCkge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmVGaWx0ZXJEYXRhPy5iYWNrVGV4dHVyZTtcbiAgfVxuICBwdXNoKGluc3RydWN0aW9uKSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xuICAgIGNvbnN0IGZpbHRlcnMgPSBpbnN0cnVjdGlvbi5maWx0ZXJFZmZlY3QuZmlsdGVycztcbiAgICBpZiAoIXRoaXMuX2ZpbHRlclN0YWNrW3RoaXMuX2ZpbHRlclN0YWNrSW5kZXhdKSB7XG4gICAgICB0aGlzLl9maWx0ZXJTdGFja1t0aGlzLl9maWx0ZXJTdGFja0luZGV4XSA9IHRoaXMuX2dldEZpbHRlckRhdGEoKTtcbiAgICB9XG4gICAgY29uc3QgZmlsdGVyRGF0YSA9IHRoaXMuX2ZpbHRlclN0YWNrW3RoaXMuX2ZpbHRlclN0YWNrSW5kZXhdO1xuICAgIHRoaXMuX2ZpbHRlclN0YWNrSW5kZXgrKztcbiAgICBpZiAoZmlsdGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGZpbHRlckRhdGEuc2tpcCA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGJvdW5kcyA9IGZpbHRlckRhdGEuYm91bmRzO1xuICAgIGlmIChpbnN0cnVjdGlvbi5yZW5kZXJhYmxlcykge1xuICAgICAgZ2V0R2xvYmFsUmVuZGVyYWJsZUJvdW5kcyhpbnN0cnVjdGlvbi5yZW5kZXJhYmxlcywgYm91bmRzKTtcbiAgICB9IGVsc2UgaWYgKGluc3RydWN0aW9uLmZpbHRlckVmZmVjdC5maWx0ZXJBcmVhKSB7XG4gICAgICBib3VuZHMuY2xlYXIoKTtcbiAgICAgIGJvdW5kcy5hZGRSZWN0KGluc3RydWN0aW9uLmZpbHRlckVmZmVjdC5maWx0ZXJBcmVhKTtcbiAgICAgIGJvdW5kcy5hcHBseU1hdHJpeChpbnN0cnVjdGlvbi5jb250YWluZXIud29ybGRUcmFuc2Zvcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZXRGYXN0R2xvYmFsQm91bmRzKGluc3RydWN0aW9uLmNvbnRhaW5lciwgYm91bmRzKTtcbiAgICB9XG4gICAgY29uc3QgY29sb3JUZXh0dXJlU291cmNlID0gcmVuZGVyZXIucmVuZGVyVGFyZ2V0LnJlbmRlclRhcmdldC5jb2xvclRleHR1cmUuc291cmNlO1xuICAgIGxldCByZXNvbHV0aW9uID0gSW5maW5pdHk7XG4gICAgbGV0IHBhZGRpbmcgPSAwO1xuICAgIGxldCBhbnRpYWxpYXMgPSB0cnVlO1xuICAgIGxldCBibGVuZFJlcXVpcmVkID0gZmFsc2U7XG4gICAgbGV0IGVuYWJsZWQgPSBmYWxzZTtcbiAgICBsZXQgY2xpcFRvVmlld3BvcnQgPSB0cnVlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsdGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZmlsdGVyID0gZmlsdGVyc1tpXTtcbiAgICAgIHJlc29sdXRpb24gPSBNYXRoLm1pbihyZXNvbHV0aW9uLCBmaWx0ZXIucmVzb2x1dGlvbiA9PT0gXCJpbmhlcml0XCIgPyBjb2xvclRleHR1cmVTb3VyY2UuX3Jlc29sdXRpb24gOiBmaWx0ZXIucmVzb2x1dGlvbik7XG4gICAgICBwYWRkaW5nICs9IGZpbHRlci5wYWRkaW5nO1xuICAgICAgaWYgKGZpbHRlci5hbnRpYWxpYXMgPT09IFwib2ZmXCIpIHtcbiAgICAgICAgYW50aWFsaWFzID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGZpbHRlci5hbnRpYWxpYXMgPT09IFwiaW5oZXJpdFwiKSB7XG4gICAgICAgIGFudGlhbGlhcyAmJiAoYW50aWFsaWFzID0gY29sb3JUZXh0dXJlU291cmNlLmFudGlhbGlhcyk7XG4gICAgICB9XG4gICAgICBpZiAoIWZpbHRlci5jbGlwVG9WaWV3cG9ydCkge1xuICAgICAgICBjbGlwVG9WaWV3cG9ydCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgaXNDb21wYXRpYmxlID0gISEoZmlsdGVyLmNvbXBhdGlibGVSZW5kZXJlcnMgJiByZW5kZXJlci50eXBlKTtcbiAgICAgIGlmICghaXNDb21wYXRpYmxlKSB7XG4gICAgICAgIGVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoZmlsdGVyLmJsZW5kUmVxdWlyZWQgJiYgIShyZW5kZXJlci5iYWNrQnVmZmVyPy51c2VCYWNrQnVmZmVyID8/IHRydWUpKSB7XG4gICAgICAgIHdhcm4oXCJCbGVuZCBmaWx0ZXIgcmVxdWlyZXMgYmFja0J1ZmZlciBvbiBXZWJHTCByZW5kZXJlciB0byBiZSBlbmFibGVkLiBTZXQgYHVzZUJhY2tCdWZmZXI6IHRydWVgIGluIHRoZSByZW5kZXJlciBvcHRpb25zLlwiKTtcbiAgICAgICAgZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGVuYWJsZWQgPSBmaWx0ZXIuZW5hYmxlZCB8fCBlbmFibGVkO1xuICAgICAgYmxlbmRSZXF1aXJlZCA9IGJsZW5kUmVxdWlyZWQgfHwgZmlsdGVyLmJsZW5kUmVxdWlyZWQ7XG4gICAgfVxuICAgIGlmICghZW5hYmxlZCkge1xuICAgICAgZmlsdGVyRGF0YS5za2lwID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYm91bmRzLnNjYWxlKHJlc29sdXRpb24pO1xuICAgIGlmIChjbGlwVG9WaWV3cG9ydCkge1xuICAgICAgY29uc3Qgdmlld1BvcnQgPSByZW5kZXJlci5yZW5kZXJUYXJnZXQucm9vdFZpZXdQb3J0O1xuICAgICAgYm91bmRzLmZpdEJvdW5kcygwLCB2aWV3UG9ydC53aWR0aCwgMCwgdmlld1BvcnQuaGVpZ2h0KTtcbiAgICB9XG4gICAgYm91bmRzLmNlaWwoKS5zY2FsZSgxIC8gcmVzb2x1dGlvbikucGFkKHBhZGRpbmcgfCAwKTtcbiAgICBpZiAoIWJvdW5kcy5pc1Bvc2l0aXZlKSB7XG4gICAgICBmaWx0ZXJEYXRhLnNraXAgPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmaWx0ZXJEYXRhLnNraXAgPSBmYWxzZTtcbiAgICBmaWx0ZXJEYXRhLmJvdW5kcyA9IGJvdW5kcztcbiAgICBmaWx0ZXJEYXRhLmJsZW5kUmVxdWlyZWQgPSBibGVuZFJlcXVpcmVkO1xuICAgIGZpbHRlckRhdGEuY29udGFpbmVyID0gaW5zdHJ1Y3Rpb24uY29udGFpbmVyO1xuICAgIGZpbHRlckRhdGEuZmlsdGVyRWZmZWN0ID0gaW5zdHJ1Y3Rpb24uZmlsdGVyRWZmZWN0O1xuICAgIGZpbHRlckRhdGEucHJldmlvdXNSZW5kZXJTdXJmYWNlID0gcmVuZGVyZXIucmVuZGVyVGFyZ2V0LnJlbmRlclN1cmZhY2U7XG4gICAgZmlsdGVyRGF0YS5pbnB1dFRleHR1cmUgPSBUZXh0dXJlUG9vbC5nZXRPcHRpbWFsVGV4dHVyZShcbiAgICAgIGJvdW5kcy53aWR0aCxcbiAgICAgIGJvdW5kcy5oZWlnaHQsXG4gICAgICByZXNvbHV0aW9uLFxuICAgICAgYW50aWFsaWFzXG4gICAgKTtcbiAgICByZW5kZXJlci5yZW5kZXJUYXJnZXQuYmluZChmaWx0ZXJEYXRhLmlucHV0VGV4dHVyZSwgdHJ1ZSk7XG4gICAgcmVuZGVyZXIuZ2xvYmFsVW5pZm9ybXMucHVzaCh7XG4gICAgICBvZmZzZXQ6IGJvdW5kc1xuICAgIH0pO1xuICB9XG4gIHBvcCgpIHtcbiAgICBjb25zdCByZW5kZXJlciA9IHRoaXMucmVuZGVyZXI7XG4gICAgdGhpcy5fZmlsdGVyU3RhY2tJbmRleC0tO1xuICAgIGNvbnN0IGZpbHRlckRhdGEgPSB0aGlzLl9maWx0ZXJTdGFja1t0aGlzLl9maWx0ZXJTdGFja0luZGV4XTtcbiAgICBpZiAoZmlsdGVyRGF0YS5za2lwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2FjdGl2ZUZpbHRlckRhdGEgPSBmaWx0ZXJEYXRhO1xuICAgIGNvbnN0IGlucHV0VGV4dHVyZSA9IGZpbHRlckRhdGEuaW5wdXRUZXh0dXJlO1xuICAgIGNvbnN0IGJvdW5kcyA9IGZpbHRlckRhdGEuYm91bmRzO1xuICAgIGxldCBiYWNrVGV4dHVyZSA9IFRleHR1cmUuRU1QVFk7XG4gICAgcmVuZGVyZXIucmVuZGVyVGFyZ2V0LmZpbmlzaFJlbmRlclBhc3MoKTtcbiAgICBpZiAoZmlsdGVyRGF0YS5ibGVuZFJlcXVpcmVkKSB7XG4gICAgICBjb25zdCBwcmV2aW91c0JvdW5kcyA9IHRoaXMuX2ZpbHRlclN0YWNrSW5kZXggPiAwID8gdGhpcy5fZmlsdGVyU3RhY2tbdGhpcy5fZmlsdGVyU3RhY2tJbmRleCAtIDFdLmJvdW5kcyA6IG51bGw7XG4gICAgICBjb25zdCByZW5kZXJUYXJnZXQgPSByZW5kZXJlci5yZW5kZXJUYXJnZXQuZ2V0UmVuZGVyVGFyZ2V0KGZpbHRlckRhdGEucHJldmlvdXNSZW5kZXJTdXJmYWNlKTtcbiAgICAgIGJhY2tUZXh0dXJlID0gdGhpcy5nZXRCYWNrVGV4dHVyZShyZW5kZXJUYXJnZXQsIGJvdW5kcywgcHJldmlvdXNCb3VuZHMpO1xuICAgIH1cbiAgICBmaWx0ZXJEYXRhLmJhY2tUZXh0dXJlID0gYmFja1RleHR1cmU7XG4gICAgY29uc3QgZmlsdGVycyA9IGZpbHRlckRhdGEuZmlsdGVyRWZmZWN0LmZpbHRlcnM7XG4gICAgdGhpcy5fZ2xvYmFsRmlsdGVyQmluZEdyb3VwLnNldFJlc291cmNlKGlucHV0VGV4dHVyZS5zb3VyY2Uuc3R5bGUsIDIpO1xuICAgIHRoaXMuX2dsb2JhbEZpbHRlckJpbmRHcm91cC5zZXRSZXNvdXJjZShiYWNrVGV4dHVyZS5zb3VyY2UsIDMpO1xuICAgIHJlbmRlcmVyLmdsb2JhbFVuaWZvcm1zLnBvcCgpO1xuICAgIGlmIChmaWx0ZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgZmlsdGVyc1swXS5hcHBseSh0aGlzLCBpbnB1dFRleHR1cmUsIGZpbHRlckRhdGEucHJldmlvdXNSZW5kZXJTdXJmYWNlLCBmYWxzZSk7XG4gICAgICBUZXh0dXJlUG9vbC5yZXR1cm5UZXh0dXJlKGlucHV0VGV4dHVyZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBmbGlwID0gZmlsdGVyRGF0YS5pbnB1dFRleHR1cmU7XG4gICAgICBsZXQgZmxvcCA9IFRleHR1cmVQb29sLmdldE9wdGltYWxUZXh0dXJlKFxuICAgICAgICBib3VuZHMud2lkdGgsXG4gICAgICAgIGJvdW5kcy5oZWlnaHQsXG4gICAgICAgIGZsaXAuc291cmNlLl9yZXNvbHV0aW9uLFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBmaWx0ZXJzLmxlbmd0aCAtIDE7ICsraSkge1xuICAgICAgICBjb25zdCBmaWx0ZXIgPSBmaWx0ZXJzW2ldO1xuICAgICAgICBmaWx0ZXIuYXBwbHkodGhpcywgZmxpcCwgZmxvcCwgdHJ1ZSk7XG4gICAgICAgIGNvbnN0IHQgPSBmbGlwO1xuICAgICAgICBmbGlwID0gZmxvcDtcbiAgICAgICAgZmxvcCA9IHQ7XG4gICAgICB9XG4gICAgICBmaWx0ZXJzW2ldLmFwcGx5KHRoaXMsIGZsaXAsIGZpbHRlckRhdGEucHJldmlvdXNSZW5kZXJTdXJmYWNlLCBmYWxzZSk7XG4gICAgICBUZXh0dXJlUG9vbC5yZXR1cm5UZXh0dXJlKGZsaXApO1xuICAgICAgVGV4dHVyZVBvb2wucmV0dXJuVGV4dHVyZShmbG9wKTtcbiAgICB9XG4gICAgaWYgKGZpbHRlckRhdGEuYmxlbmRSZXF1aXJlZCkge1xuICAgICAgVGV4dHVyZVBvb2wucmV0dXJuVGV4dHVyZShiYWNrVGV4dHVyZSk7XG4gICAgfVxuICB9XG4gIGdldEJhY2tUZXh0dXJlKGxhc3RSZW5kZXJTdXJmYWNlLCBib3VuZHMsIHByZXZpb3VzQm91bmRzKSB7XG4gICAgY29uc3QgYmFja2dyb3VuZFJlc29sdXRpb24gPSBsYXN0UmVuZGVyU3VyZmFjZS5jb2xvclRleHR1cmUuc291cmNlLl9yZXNvbHV0aW9uO1xuICAgIGNvbnN0IGJhY2tUZXh0dXJlID0gVGV4dHVyZVBvb2wuZ2V0T3B0aW1hbFRleHR1cmUoXG4gICAgICBib3VuZHMud2lkdGgsXG4gICAgICBib3VuZHMuaGVpZ2h0LFxuICAgICAgYmFja2dyb3VuZFJlc29sdXRpb24sXG4gICAgICBmYWxzZVxuICAgICk7XG4gICAgbGV0IHggPSBib3VuZHMubWluWDtcbiAgICBsZXQgeSA9IGJvdW5kcy5taW5ZO1xuICAgIGlmIChwcmV2aW91c0JvdW5kcykge1xuICAgICAgeCAtPSBwcmV2aW91c0JvdW5kcy5taW5YO1xuICAgICAgeSAtPSBwcmV2aW91c0JvdW5kcy5taW5ZO1xuICAgIH1cbiAgICB4ID0gTWF0aC5mbG9vcih4ICogYmFja2dyb3VuZFJlc29sdXRpb24pO1xuICAgIHkgPSBNYXRoLmZsb29yKHkgKiBiYWNrZ3JvdW5kUmVzb2x1dGlvbik7XG4gICAgY29uc3Qgd2lkdGggPSBNYXRoLmNlaWwoYm91bmRzLndpZHRoICogYmFja2dyb3VuZFJlc29sdXRpb24pO1xuICAgIGNvbnN0IGhlaWdodCA9IE1hdGguY2VpbChib3VuZHMuaGVpZ2h0ICogYmFja2dyb3VuZFJlc29sdXRpb24pO1xuICAgIHRoaXMucmVuZGVyZXIucmVuZGVyVGFyZ2V0LmNvcHlUb1RleHR1cmUoXG4gICAgICBsYXN0UmVuZGVyU3VyZmFjZSxcbiAgICAgIGJhY2tUZXh0dXJlLFxuICAgICAgeyB4LCB5IH0sXG4gICAgICB7IHdpZHRoLCBoZWlnaHQgfSxcbiAgICAgIHsgeDogMCwgeTogMCB9XG4gICAgKTtcbiAgICByZXR1cm4gYmFja1RleHR1cmU7XG4gIH1cbiAgYXBwbHlGaWx0ZXIoZmlsdGVyLCBpbnB1dCwgb3V0cHV0LCBjbGVhcikge1xuICAgIGNvbnN0IHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcjtcbiAgICBjb25zdCBmaWx0ZXJEYXRhID0gdGhpcy5fZmlsdGVyU3RhY2tbdGhpcy5fZmlsdGVyU3RhY2tJbmRleF07XG4gICAgY29uc3QgYm91bmRzID0gZmlsdGVyRGF0YS5ib3VuZHM7XG4gICAgY29uc3Qgb2Zmc2V0ID0gUG9pbnQuc2hhcmVkO1xuICAgIGNvbnN0IHByZXZpb3VzUmVuZGVyU3VyZmFjZSA9IGZpbHRlckRhdGEucHJldmlvdXNSZW5kZXJTdXJmYWNlO1xuICAgIGNvbnN0IGlzRmluYWxUYXJnZXQgPSBwcmV2aW91c1JlbmRlclN1cmZhY2UgPT09IG91dHB1dDtcbiAgICBsZXQgcmVzb2x1dGlvbiA9IHRoaXMucmVuZGVyZXIucmVuZGVyVGFyZ2V0LnJvb3RSZW5kZXJUYXJnZXQuY29sb3JUZXh0dXJlLnNvdXJjZS5fcmVzb2x1dGlvbjtcbiAgICBsZXQgY3VycmVudEluZGV4ID0gdGhpcy5fZmlsdGVyU3RhY2tJbmRleCAtIDE7XG4gICAgd2hpbGUgKGN1cnJlbnRJbmRleCA+IDAgJiYgdGhpcy5fZmlsdGVyU3RhY2tbY3VycmVudEluZGV4XS5za2lwKSB7XG4gICAgICAtLWN1cnJlbnRJbmRleDtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRJbmRleCA+IDApIHtcbiAgICAgIHJlc29sdXRpb24gPSB0aGlzLl9maWx0ZXJTdGFja1tjdXJyZW50SW5kZXhdLmlucHV0VGV4dHVyZS5zb3VyY2UuX3Jlc29sdXRpb247XG4gICAgfVxuICAgIGNvbnN0IGZpbHRlclVuaWZvcm1zID0gdGhpcy5fZmlsdGVyR2xvYmFsVW5pZm9ybXM7XG4gICAgY29uc3QgdW5pZm9ybXMgPSBmaWx0ZXJVbmlmb3Jtcy51bmlmb3JtcztcbiAgICBjb25zdCBvdXRwdXRGcmFtZSA9IHVuaWZvcm1zLnVPdXRwdXRGcmFtZTtcbiAgICBjb25zdCBpbnB1dFNpemUgPSB1bmlmb3Jtcy51SW5wdXRTaXplO1xuICAgIGNvbnN0IGlucHV0UGl4ZWwgPSB1bmlmb3Jtcy51SW5wdXRQaXhlbDtcbiAgICBjb25zdCBpbnB1dENsYW1wID0gdW5pZm9ybXMudUlucHV0Q2xhbXA7XG4gICAgY29uc3QgZ2xvYmFsRnJhbWUgPSB1bmlmb3Jtcy51R2xvYmFsRnJhbWU7XG4gICAgY29uc3Qgb3V0cHV0VGV4dHVyZSA9IHVuaWZvcm1zLnVPdXRwdXRUZXh0dXJlO1xuICAgIGlmIChpc0ZpbmFsVGFyZ2V0KSB7XG4gICAgICBsZXQgbGFzdEluZGV4ID0gdGhpcy5fZmlsdGVyU3RhY2tJbmRleDtcbiAgICAgIHdoaWxlIChsYXN0SW5kZXggPiAwKSB7XG4gICAgICAgIGxhc3RJbmRleC0tO1xuICAgICAgICBjb25zdCBmaWx0ZXJEYXRhMiA9IHRoaXMuX2ZpbHRlclN0YWNrW3RoaXMuX2ZpbHRlclN0YWNrSW5kZXggLSAxXTtcbiAgICAgICAgaWYgKCFmaWx0ZXJEYXRhMi5za2lwKSB7XG4gICAgICAgICAgb2Zmc2V0LnggPSBmaWx0ZXJEYXRhMi5ib3VuZHMubWluWDtcbiAgICAgICAgICBvZmZzZXQueSA9IGZpbHRlckRhdGEyLmJvdW5kcy5taW5ZO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvdXRwdXRGcmFtZVswXSA9IGJvdW5kcy5taW5YIC0gb2Zmc2V0Lng7XG4gICAgICBvdXRwdXRGcmFtZVsxXSA9IGJvdW5kcy5taW5ZIC0gb2Zmc2V0Lnk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dEZyYW1lWzBdID0gMDtcbiAgICAgIG91dHB1dEZyYW1lWzFdID0gMDtcbiAgICB9XG4gICAgb3V0cHV0RnJhbWVbMl0gPSBpbnB1dC5mcmFtZS53aWR0aDtcbiAgICBvdXRwdXRGcmFtZVszXSA9IGlucHV0LmZyYW1lLmhlaWdodDtcbiAgICBpbnB1dFNpemVbMF0gPSBpbnB1dC5zb3VyY2Uud2lkdGg7XG4gICAgaW5wdXRTaXplWzFdID0gaW5wdXQuc291cmNlLmhlaWdodDtcbiAgICBpbnB1dFNpemVbMl0gPSAxIC8gaW5wdXRTaXplWzBdO1xuICAgIGlucHV0U2l6ZVszXSA9IDEgLyBpbnB1dFNpemVbMV07XG4gICAgaW5wdXRQaXhlbFswXSA9IGlucHV0LnNvdXJjZS5waXhlbFdpZHRoO1xuICAgIGlucHV0UGl4ZWxbMV0gPSBpbnB1dC5zb3VyY2UucGl4ZWxIZWlnaHQ7XG4gICAgaW5wdXRQaXhlbFsyXSA9IDEgLyBpbnB1dFBpeGVsWzBdO1xuICAgIGlucHV0UGl4ZWxbM10gPSAxIC8gaW5wdXRQaXhlbFsxXTtcbiAgICBpbnB1dENsYW1wWzBdID0gMC41ICogaW5wdXRQaXhlbFsyXTtcbiAgICBpbnB1dENsYW1wWzFdID0gMC41ICogaW5wdXRQaXhlbFszXTtcbiAgICBpbnB1dENsYW1wWzJdID0gaW5wdXQuZnJhbWUud2lkdGggKiBpbnB1dFNpemVbMl0gLSAwLjUgKiBpbnB1dFBpeGVsWzJdO1xuICAgIGlucHV0Q2xhbXBbM10gPSBpbnB1dC5mcmFtZS5oZWlnaHQgKiBpbnB1dFNpemVbM10gLSAwLjUgKiBpbnB1dFBpeGVsWzNdO1xuICAgIGNvbnN0IHJvb3RUZXh0dXJlID0gdGhpcy5yZW5kZXJlci5yZW5kZXJUYXJnZXQucm9vdFJlbmRlclRhcmdldC5jb2xvclRleHR1cmU7XG4gICAgZ2xvYmFsRnJhbWVbMF0gPSBvZmZzZXQueCAqIHJlc29sdXRpb247XG4gICAgZ2xvYmFsRnJhbWVbMV0gPSBvZmZzZXQueSAqIHJlc29sdXRpb247XG4gICAgZ2xvYmFsRnJhbWVbMl0gPSByb290VGV4dHVyZS5zb3VyY2Uud2lkdGggKiByZXNvbHV0aW9uO1xuICAgIGdsb2JhbEZyYW1lWzNdID0gcm9vdFRleHR1cmUuc291cmNlLmhlaWdodCAqIHJlc29sdXRpb247XG4gICAgY29uc3QgcmVuZGVyVGFyZ2V0ID0gdGhpcy5yZW5kZXJlci5yZW5kZXJUYXJnZXQuZ2V0UmVuZGVyVGFyZ2V0KG91dHB1dCk7XG4gICAgcmVuZGVyZXIucmVuZGVyVGFyZ2V0LmJpbmQob3V0cHV0LCAhIWNsZWFyKTtcbiAgICBpZiAob3V0cHV0IGluc3RhbmNlb2YgVGV4dHVyZSkge1xuICAgICAgb3V0cHV0VGV4dHVyZVswXSA9IG91dHB1dC5mcmFtZS53aWR0aDtcbiAgICAgIG91dHB1dFRleHR1cmVbMV0gPSBvdXRwdXQuZnJhbWUuaGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXRUZXh0dXJlWzBdID0gcmVuZGVyVGFyZ2V0LndpZHRoO1xuICAgICAgb3V0cHV0VGV4dHVyZVsxXSA9IHJlbmRlclRhcmdldC5oZWlnaHQ7XG4gICAgfVxuICAgIG91dHB1dFRleHR1cmVbMl0gPSByZW5kZXJUYXJnZXQuaXNSb290ID8gLTEgOiAxO1xuICAgIGZpbHRlclVuaWZvcm1zLnVwZGF0ZSgpO1xuICAgIGlmIChyZW5kZXJlci5yZW5kZXJQaXBlcy51bmlmb3JtQmF0Y2gpIHtcbiAgICAgIGNvbnN0IGJhdGNoVW5pZm9ybXMgPSByZW5kZXJlci5yZW5kZXJQaXBlcy51bmlmb3JtQmF0Y2guZ2V0VWJvUmVzb3VyY2UoZmlsdGVyVW5pZm9ybXMpO1xuICAgICAgdGhpcy5fZ2xvYmFsRmlsdGVyQmluZEdyb3VwLnNldFJlc291cmNlKGJhdGNoVW5pZm9ybXMsIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9nbG9iYWxGaWx0ZXJCaW5kR3JvdXAuc2V0UmVzb3VyY2UoZmlsdGVyVW5pZm9ybXMsIDApO1xuICAgIH1cbiAgICB0aGlzLl9nbG9iYWxGaWx0ZXJCaW5kR3JvdXAuc2V0UmVzb3VyY2UoaW5wdXQuc291cmNlLCAxKTtcbiAgICB0aGlzLl9nbG9iYWxGaWx0ZXJCaW5kR3JvdXAuc2V0UmVzb3VyY2UoaW5wdXQuc291cmNlLnN0eWxlLCAyKTtcbiAgICBmaWx0ZXIuZ3JvdXBzWzBdID0gdGhpcy5fZ2xvYmFsRmlsdGVyQmluZEdyb3VwO1xuICAgIHJlbmRlcmVyLmVuY29kZXIuZHJhdyh7XG4gICAgICBnZW9tZXRyeTogcXVhZEdlb21ldHJ5LFxuICAgICAgc2hhZGVyOiBmaWx0ZXIsXG4gICAgICBzdGF0ZTogZmlsdGVyLl9zdGF0ZSxcbiAgICAgIHRvcG9sb2d5OiBcInRyaWFuZ2xlLWxpc3RcIlxuICAgIH0pO1xuICAgIGlmIChyZW5kZXJlci50eXBlID09PSBSZW5kZXJlclR5cGUuV0VCR0wpIHtcbiAgICAgIHJlbmRlcmVyLnJlbmRlclRhcmdldC5maW5pc2hSZW5kZXJQYXNzKCk7XG4gICAgfVxuICB9XG4gIF9nZXRGaWx0ZXJEYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBza2lwOiBmYWxzZSxcbiAgICAgIGlucHV0VGV4dHVyZTogbnVsbCxcbiAgICAgIGJvdW5kczogbmV3IEJvdW5kcygpLFxuICAgICAgY29udGFpbmVyOiBudWxsLFxuICAgICAgZmlsdGVyRWZmZWN0OiBudWxsLFxuICAgICAgYmxlbmRSZXF1aXJlZDogZmFsc2UsXG4gICAgICBwcmV2aW91c1JlbmRlclN1cmZhY2U6IG51bGxcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBNdWx0aXBseSBfaW5wdXQgbm9ybWFsaXplZCBjb29yZGluYXRlc18gdG8gdGhpcyBtYXRyaXggdG8gZ2V0IF9zcHJpdGUgdGV4dHVyZSBub3JtYWxpemVkIGNvb3JkaW5hdGVzXy5cbiAgICpcbiAgICogVXNlIGBvdXRwdXRNYXRyaXggKiB2VGV4dHVyZUNvb3JkYCBpbiB0aGUgc2hhZGVyLlxuICAgKiBAcGFyYW0gb3V0cHV0TWF0cml4IC0gVGhlIG1hdHJpeCB0byBvdXRwdXQgdG8uXG4gICAqIEBwYXJhbSB7U3ByaXRlfSBzcHJpdGUgLSBUaGUgc3ByaXRlIHRvIG1hcCB0by5cbiAgICogQHJldHVybnMgVGhlIG1hcHBlZCBtYXRyaXguXG4gICAqL1xuICBjYWxjdWxhdGVTcHJpdGVNYXRyaXgob3V0cHV0TWF0cml4LCBzcHJpdGUpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5fYWN0aXZlRmlsdGVyRGF0YTtcbiAgICBjb25zdCBtYXBwZWRNYXRyaXggPSBvdXRwdXRNYXRyaXguc2V0KFxuICAgICAgZGF0YS5pbnB1dFRleHR1cmUuX3NvdXJjZS53aWR0aCxcbiAgICAgIDAsXG4gICAgICAwLFxuICAgICAgZGF0YS5pbnB1dFRleHR1cmUuX3NvdXJjZS5oZWlnaHQsXG4gICAgICBkYXRhLmJvdW5kcy5taW5YLFxuICAgICAgZGF0YS5ib3VuZHMubWluWVxuICAgICk7XG4gICAgY29uc3Qgd29ybGRUcmFuc2Zvcm0gPSBzcHJpdGUud29ybGRUcmFuc2Zvcm0uY29weVRvKE1hdHJpeC5zaGFyZWQpO1xuICAgIHdvcmxkVHJhbnNmb3JtLmludmVydCgpO1xuICAgIG1hcHBlZE1hdHJpeC5wcmVwZW5kKHdvcmxkVHJhbnNmb3JtKTtcbiAgICBtYXBwZWRNYXRyaXguc2NhbGUoXG4gICAgICAxIC8gc3ByaXRlLnRleHR1cmUuZnJhbWUud2lkdGgsXG4gICAgICAxIC8gc3ByaXRlLnRleHR1cmUuZnJhbWUuaGVpZ2h0XG4gICAgKTtcbiAgICBtYXBwZWRNYXRyaXgudHJhbnNsYXRlKHNwcml0ZS5hbmNob3IueCwgc3ByaXRlLmFuY2hvci55KTtcbiAgICByZXR1cm4gbWFwcGVkTWF0cml4O1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuRmlsdGVyU3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW0sXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHUFVTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJmaWx0ZXJcIlxufTtcblxuZXhwb3J0IHsgRmlsdGVyU3lzdGVtIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1GaWx0ZXJTeXN0ZW0ubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBnZXRHbG9iYWxSZW5kZXJhYmxlQm91bmRzKHJlbmRlcmFibGVzLCBib3VuZHMpIHtcbiAgYm91bmRzLmNsZWFyKCk7XG4gIGNvbnN0IHRlbXBNYXRyaXggPSBib3VuZHMubWF0cml4O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbmRlcmFibGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcmVuZGVyYWJsZSA9IHJlbmRlcmFibGVzW2ldO1xuICAgIGlmIChyZW5kZXJhYmxlLmdsb2JhbERpc3BsYXlTdGF0dXMgPCA3KSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgYm91bmRzLm1hdHJpeCA9IHJlbmRlcmFibGUud29ybGRUcmFuc2Zvcm07XG4gICAgcmVuZGVyYWJsZS5hZGRCb3VuZHMoYm91bmRzKTtcbiAgfVxuICBib3VuZHMubWF0cml4ID0gdGVtcE1hdHJpeDtcbiAgcmV0dXJuIGJvdW5kcztcbn1cblxuZXhwb3J0IHsgZ2V0R2xvYmFsUmVuZGVyYWJsZUJvdW5kcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0UmVuZGVyYWJsZUJvdW5kcy5tanMubWFwXG4iLCJpbXBvcnQgeyBleHRlbnNpb25zIH0gZnJvbSAnLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBGaWx0ZXJQaXBlIH0gZnJvbSAnLi9GaWx0ZXJQaXBlLm1qcyc7XG5pbXBvcnQgeyBGaWx0ZXJTeXN0ZW0gfSBmcm9tICcuL0ZpbHRlclN5c3RlbS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmV4dGVuc2lvbnMuYWRkKEZpbHRlclN5c3RlbSk7XG5leHRlbnNpb25zLmFkZChGaWx0ZXJQaXBlKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaXQubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBsb2NhbFVuaWZvcm1CaXQgPSB7XG4gIG5hbWU6IFwibG9jYWwtdW5pZm9ybS1iaXRcIixcbiAgdmVydGV4OiB7XG4gICAgaGVhZGVyOiAoXG4gICAgICAvKiB3Z3NsICovXG4gICAgICBgXG5cbiAgICAgICAgICAgIHN0cnVjdCBMb2NhbFVuaWZvcm1zIHtcbiAgICAgICAgICAgICAgICB1VHJhbnNmb3JtTWF0cml4Om1hdDN4MzxmMzI+LFxuICAgICAgICAgICAgICAgIHVDb2xvcjp2ZWM0PGYzMj4sXG4gICAgICAgICAgICAgICAgdVJvdW5kOmYzMixcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgQGdyb3VwKDEpIEBiaW5kaW5nKDApIHZhcjx1bmlmb3JtPiBsb2NhbFVuaWZvcm1zIDogTG9jYWxVbmlmb3JtcztcbiAgICAgICAgYFxuICAgICksXG4gICAgbWFpbjogKFxuICAgICAgLyogd2dzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgdkNvbG9yICo9IGxvY2FsVW5pZm9ybXMudUNvbG9yO1xuICAgICAgICAgICAgbW9kZWxNYXRyaXggKj0gbG9jYWxVbmlmb3Jtcy51VHJhbnNmb3JtTWF0cml4O1xuICAgICAgICBgXG4gICAgKSxcbiAgICBlbmQ6IChcbiAgICAgIC8qIHdnc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIGlmKGxvY2FsVW5pZm9ybXMudVJvdW5kID09IDEpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdlBvc2l0aW9uID0gdmVjNChyb3VuZFBpeGVscyh2UG9zaXRpb24ueHksIGdsb2JhbFVuaWZvcm1zLnVSZXNvbHV0aW9uKSwgdlBvc2l0aW9uLnp3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgYFxuICAgIClcbiAgfVxufTtcbmNvbnN0IGxvY2FsVW5pZm9ybUJpdEdyb3VwMiA9IHtcbiAgLi4ubG9jYWxVbmlmb3JtQml0LFxuICB2ZXJ0ZXg6IHtcbiAgICAuLi5sb2NhbFVuaWZvcm1CaXQudmVydGV4LFxuICAgIC8vIHJlcGxhY2UgdGhlIGdyb3VwIVxuICAgIGhlYWRlcjogbG9jYWxVbmlmb3JtQml0LnZlcnRleC5oZWFkZXIucmVwbGFjZShcImdyb3VwKDEpXCIsIFwiZ3JvdXAoMilcIilcbiAgfVxufTtcbmNvbnN0IGxvY2FsVW5pZm9ybUJpdEdsID0ge1xuICBuYW1lOiBcImxvY2FsLXVuaWZvcm0tYml0XCIsXG4gIHZlcnRleDoge1xuICAgIGhlYWRlcjogKFxuICAgICAgLyogZ2xzbCAqL1xuICAgICAgYFxuXG4gICAgICAgICAgICB1bmlmb3JtIG1hdDMgdVRyYW5zZm9ybU1hdHJpeDtcbiAgICAgICAgICAgIHVuaWZvcm0gdmVjNCB1Q29sb3I7XG4gICAgICAgICAgICB1bmlmb3JtIGZsb2F0IHVSb3VuZDtcbiAgICAgICAgYFxuICAgICksXG4gICAgbWFpbjogKFxuICAgICAgLyogZ2xzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgdkNvbG9yICo9IHVDb2xvcjtcbiAgICAgICAgICAgIG1vZGVsTWF0cml4ID0gdVRyYW5zZm9ybU1hdHJpeDtcbiAgICAgICAgYFxuICAgICksXG4gICAgZW5kOiAoXG4gICAgICAvKiBnbHNsICovXG4gICAgICBgXG4gICAgICAgICAgICBpZih1Um91bmQgPT0gMS4pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZ2xfUG9zaXRpb24ueHkgPSByb3VuZFBpeGVscyhnbF9Qb3NpdGlvbi54eSwgdVJlc29sdXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICBgXG4gICAgKVxuICB9XG59O1xuXG5leHBvcnQgeyBsb2NhbFVuaWZvcm1CaXQsIGxvY2FsVW5pZm9ybUJpdEdsLCBsb2NhbFVuaWZvcm1CaXRHcm91cDIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2FsVW5pZm9ybUJpdC5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGJsZW5kTW9kZUlkcyA9IHtcbiAgbm9ybWFsOiAwLFxuICBhZGQ6IDEsXG4gIG11bHRpcGx5OiAyLFxuICBzY3JlZW46IDMsXG4gIG92ZXJsYXk6IDQsXG4gIGVyYXNlOiA1LFxuICBcIm5vcm1hbC1ucG1cIjogNixcbiAgXCJhZGQtbnBtXCI6IDcsXG4gIFwic2NyZWVuLW5wbVwiOiA4LFxuICBtaW46IDksXG4gIG1heDogMTBcbn07XG5jb25zdCBCTEVORCA9IDA7XG5jb25zdCBPRkZTRVQgPSAxO1xuY29uc3QgQ1VMTElORyA9IDI7XG5jb25zdCBERVBUSF9URVNUID0gMztcbmNvbnN0IFdJTkRJTkcgPSA0O1xuY29uc3QgREVQVEhfTUFTSyA9IDU7XG5jb25zdCBfU3RhdGUgPSBjbGFzcyBfU3RhdGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRhdGEgPSAwO1xuICAgIHRoaXMuYmxlbmRNb2RlID0gXCJub3JtYWxcIjtcbiAgICB0aGlzLnBvbHlnb25PZmZzZXQgPSAwO1xuICAgIHRoaXMuYmxlbmQgPSB0cnVlO1xuICAgIHRoaXMuZGVwdGhNYXNrID0gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogQWN0aXZhdGVzIGJsZW5kaW5nIG9mIHRoZSBjb21wdXRlZCBmcmFnbWVudCBjb2xvciB2YWx1ZXMuXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGdldCBibGVuZCgpIHtcbiAgICByZXR1cm4gISEodGhpcy5kYXRhICYgMSA8PCBCTEVORCk7XG4gIH1cbiAgc2V0IGJsZW5kKHZhbHVlKSB7XG4gICAgaWYgKCEhKHRoaXMuZGF0YSAmIDEgPDwgQkxFTkQpICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5kYXRhIF49IDEgPDwgQkxFTkQ7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBBY3RpdmF0ZXMgYWRkaW5nIGFuIG9mZnNldCB0byBkZXB0aCB2YWx1ZXMgb2YgcG9seWdvbidzIGZyYWdtZW50c1xuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZ2V0IG9mZnNldHMoKSB7XG4gICAgcmV0dXJuICEhKHRoaXMuZGF0YSAmIDEgPDwgT0ZGU0VUKTtcbiAgfVxuICBzZXQgb2Zmc2V0cyh2YWx1ZSkge1xuICAgIGlmICghISh0aGlzLmRhdGEgJiAxIDw8IE9GRlNFVCkgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLmRhdGEgXj0gMSA8PCBPRkZTRVQ7XG4gICAgfVxuICB9XG4gIC8qKiBUaGUgY3VsbGluZyBzZXR0aW5ncyBmb3IgdGhpcyBzdGF0ZSBub25lIC0gTm8gY3VsbGluZyBiYWNrIC0gQmFjayBmYWNlIGN1bGxpbmcgZnJvbnQgLSBGcm9udCBmYWNlIGN1bGxpbmcgKi9cbiAgc2V0IGN1bGxNb2RlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBcIm5vbmVcIikge1xuICAgICAgdGhpcy5jdWxsaW5nID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuY3VsbGluZyA9IHRydWU7XG4gICAgdGhpcy5jbG9ja3dpc2VGcm9udEZhY2UgPSB2YWx1ZSA9PT0gXCJmcm9udFwiO1xuICB9XG4gIGdldCBjdWxsTW9kZSgpIHtcbiAgICBpZiAoIXRoaXMuY3VsbGluZykge1xuICAgICAgcmV0dXJuIFwibm9uZVwiO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9ja3dpc2VGcm9udEZhY2UgPyBcImZyb250XCIgOiBcImJhY2tcIjtcbiAgfVxuICAvKipcbiAgICogQWN0aXZhdGVzIGN1bGxpbmcgb2YgcG9seWdvbnMuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBnZXQgY3VsbGluZygpIHtcbiAgICByZXR1cm4gISEodGhpcy5kYXRhICYgMSA8PCBDVUxMSU5HKTtcbiAgfVxuICBzZXQgY3VsbGluZyh2YWx1ZSkge1xuICAgIGlmICghISh0aGlzLmRhdGEgJiAxIDw8IENVTExJTkcpICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5kYXRhIF49IDEgPDwgQ1VMTElORztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEFjdGl2YXRlcyBkZXB0aCBjb21wYXJpc29ucyBhbmQgdXBkYXRlcyB0byB0aGUgZGVwdGggYnVmZmVyLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZ2V0IGRlcHRoVGVzdCgpIHtcbiAgICByZXR1cm4gISEodGhpcy5kYXRhICYgMSA8PCBERVBUSF9URVNUKTtcbiAgfVxuICBzZXQgZGVwdGhUZXN0KHZhbHVlKSB7XG4gICAgaWYgKCEhKHRoaXMuZGF0YSAmIDEgPDwgREVQVEhfVEVTVCkgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLmRhdGEgXj0gMSA8PCBERVBUSF9URVNUO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRW5hYmxlcyBvciBkaXNhYmxlcyB3cml0aW5nIHRvIHRoZSBkZXB0aCBidWZmZXIuXG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGdldCBkZXB0aE1hc2soKSB7XG4gICAgcmV0dXJuICEhKHRoaXMuZGF0YSAmIDEgPDwgREVQVEhfTUFTSyk7XG4gIH1cbiAgc2V0IGRlcHRoTWFzayh2YWx1ZSkge1xuICAgIGlmICghISh0aGlzLmRhdGEgJiAxIDw8IERFUFRIX01BU0spICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5kYXRhIF49IDEgPDwgREVQVEhfTUFTSztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCBmcm9udCBvciBiYWNrLWZhY2luZyBwb2x5Z29ucyBjYW4gYmUgY3VsbGVkLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZ2V0IGNsb2Nrd2lzZUZyb250RmFjZSgpIHtcbiAgICByZXR1cm4gISEodGhpcy5kYXRhICYgMSA8PCBXSU5ESU5HKTtcbiAgfVxuICBzZXQgY2xvY2t3aXNlRnJvbnRGYWNlKHZhbHVlKSB7XG4gICAgaWYgKCEhKHRoaXMuZGF0YSAmIDEgPDwgV0lORElORykgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLmRhdGEgXj0gMSA8PCBXSU5ESU5HO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVGhlIGJsZW5kIG1vZGUgdG8gYmUgYXBwbGllZCB3aGVuIHRoaXMgc3RhdGUgaXMgc2V0LiBBcHBseSBhIHZhbHVlIG9mIGBub3JtYWxgIHRvIHJlc2V0IHRoZSBibGVuZCBtb2RlLlxuICAgKiBTZXR0aW5nIHRoaXMgbW9kZSB0byBhbnl0aGluZyBvdGhlciB0aGFuIE5PX0JMRU5EIHdpbGwgYXV0b21hdGljYWxseSBzd2l0Y2ggYmxlbmRpbmcgb24uXG4gICAqIEBkZWZhdWx0ICdub3JtYWwnXG4gICAqL1xuICBnZXQgYmxlbmRNb2RlKCkge1xuICAgIHJldHVybiB0aGlzLl9ibGVuZE1vZGU7XG4gIH1cbiAgc2V0IGJsZW5kTW9kZSh2YWx1ZSkge1xuICAgIHRoaXMuYmxlbmQgPSB2YWx1ZSAhPT0gXCJub25lXCI7XG4gICAgdGhpcy5fYmxlbmRNb2RlID0gdmFsdWU7XG4gICAgdGhpcy5fYmxlbmRNb2RlSWQgPSBibGVuZE1vZGVJZHNbdmFsdWVdIHx8IDA7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBwb2x5Z29uIG9mZnNldC4gU2V0dGluZyB0aGlzIHByb3BlcnR5IHRvIGFueXRoaW5nIG90aGVyIHRoYW4gMCB3aWxsIGF1dG9tYXRpY2FsbHkgZW5hYmxlIHBvbHlnb24gb2Zmc2V0IGZpbGwuXG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIGdldCBwb2x5Z29uT2Zmc2V0KCkge1xuICAgIHJldHVybiB0aGlzLl9wb2x5Z29uT2Zmc2V0O1xuICB9XG4gIHNldCBwb2x5Z29uT2Zmc2V0KHZhbHVlKSB7XG4gICAgdGhpcy5vZmZzZXRzID0gISF2YWx1ZTtcbiAgICB0aGlzLl9wb2x5Z29uT2Zmc2V0ID0gdmFsdWU7XG4gIH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGBbcGl4aS5qcy9jb3JlOlN0YXRlIGJsZW5kTW9kZT0ke3RoaXMuYmxlbmRNb2RlfSBjbG9ja3dpc2VGcm9udEZhY2U9JHt0aGlzLmNsb2Nrd2lzZUZyb250RmFjZX0gY3VsbGluZz0ke3RoaXMuY3VsbGluZ30gZGVwdGhNYXNrPSR7dGhpcy5kZXB0aE1hc2t9IHBvbHlnb25PZmZzZXQ9JHt0aGlzLnBvbHlnb25PZmZzZXR9XWA7XG4gIH1cbiAgLyoqXG4gICAqIEEgcXVpY2tseSBnZXR0aW5nIGFuIGluc3RhbmNlIG9mIGEgU3RhdGUgdGhhdCBpcyBjb25maWd1cmVkIGZvciAyZCByZW5kZXJpbmcuXG4gICAqIEByZXR1cm5zIGEgbmV3IFN0YXRlIHdpdGggdmFsdWVzIHNldCBmb3IgMmQgcmVuZGVyaW5nXG4gICAqL1xuICBzdGF0aWMgZm9yMmQoKSB7XG4gICAgY29uc3Qgc3RhdGUgPSBuZXcgX1N0YXRlKCk7XG4gICAgc3RhdGUuZGVwdGhUZXN0ID0gZmFsc2U7XG4gICAgc3RhdGUuYmxlbmQgPSB0cnVlO1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufTtcbl9TdGF0ZS5kZWZhdWx0MmQgPSBfU3RhdGUuZm9yMmQoKTtcbmxldCBTdGF0ZSA9IF9TdGF0ZTtcblxuZXhwb3J0IHsgU3RhdGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0YXRlLm1qcy5tYXBcbiIsImltcG9ydCB7IERPTUFkYXB0ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9lbnZpcm9ubWVudC9hZGFwdGVyLm1qcyc7XG5pbXBvcnQgeyBuZXh0UG93MiB9IGZyb20gJy4uLy4uLy4uLy4uL21hdGhzL21pc2MvcG93Mi5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIENhbnZhc1Bvb2xDbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGNhbnZhc09wdGlvbnMpIHtcbiAgICB0aGlzLl9jYW52YXNQb29sID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5jYW52YXNPcHRpb25zID0gY2FudmFzT3B0aW9ucyB8fCB7fTtcbiAgICB0aGlzLmVuYWJsZUZ1bGxTY3JlZW4gPSBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyB0ZXh0dXJlIHdpdGggcGFyYW1zIHRoYXQgd2VyZSBzcGVjaWZpZWQgaW4gcG9vbCBjb25zdHJ1Y3Rvci5cbiAgICogQHBhcmFtIHBpeGVsV2lkdGggLSBXaWR0aCBvZiB0ZXh0dXJlIGluIHBpeGVscy5cbiAgICogQHBhcmFtIHBpeGVsSGVpZ2h0IC0gSGVpZ2h0IG9mIHRleHR1cmUgaW4gcGl4ZWxzLlxuICAgKi9cbiAgX2NyZWF0ZUNhbnZhc0FuZENvbnRleHQocGl4ZWxXaWR0aCwgcGl4ZWxIZWlnaHQpIHtcbiAgICBjb25zdCBjYW52YXMgPSBET01BZGFwdGVyLmdldCgpLmNyZWF0ZUNhbnZhcygpO1xuICAgIGNhbnZhcy53aWR0aCA9IHBpeGVsV2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IHBpeGVsSGVpZ2h0O1xuICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIHJldHVybiB7IGNhbnZhcywgY29udGV4dCB9O1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIGEgUG93ZXItb2YtVHdvIHJlbmRlciB0ZXh0dXJlIG9yIGZ1bGxTY3JlZW4gdGV4dHVyZVxuICAgKiBAcGFyYW0gbWluV2lkdGggLSBUaGUgbWluaW11bSB3aWR0aCBvZiB0aGUgcmVuZGVyIHRleHR1cmUuXG4gICAqIEBwYXJhbSBtaW5IZWlnaHQgLSBUaGUgbWluaW11bSBoZWlnaHQgb2YgdGhlIHJlbmRlciB0ZXh0dXJlLlxuICAgKiBAcGFyYW0gcmVzb2x1dGlvbiAtIFRoZSByZXNvbHV0aW9uIG9mIHRoZSByZW5kZXIgdGV4dHVyZS5cbiAgICogQHJldHVybnMgVGhlIG5ldyByZW5kZXIgdGV4dHVyZS5cbiAgICovXG4gIGdldE9wdGltYWxDYW52YXNBbmRDb250ZXh0KG1pbldpZHRoLCBtaW5IZWlnaHQsIHJlc29sdXRpb24gPSAxKSB7XG4gICAgbWluV2lkdGggPSBNYXRoLmNlaWwobWluV2lkdGggKiByZXNvbHV0aW9uIC0gMWUtNik7XG4gICAgbWluSGVpZ2h0ID0gTWF0aC5jZWlsKG1pbkhlaWdodCAqIHJlc29sdXRpb24gLSAxZS02KTtcbiAgICBtaW5XaWR0aCA9IG5leHRQb3cyKG1pbldpZHRoKTtcbiAgICBtaW5IZWlnaHQgPSBuZXh0UG93MihtaW5IZWlnaHQpO1xuICAgIGNvbnN0IGtleSA9IChtaW5XaWR0aCA8PCAxNykgKyAobWluSGVpZ2h0IDw8IDEpO1xuICAgIGlmICghdGhpcy5fY2FudmFzUG9vbFtrZXldKSB7XG4gICAgICB0aGlzLl9jYW52YXNQb29sW2tleV0gPSBbXTtcbiAgICB9XG4gICAgbGV0IGNhbnZhc0FuZENvbnRleHQgPSB0aGlzLl9jYW52YXNQb29sW2tleV0ucG9wKCk7XG4gICAgaWYgKCFjYW52YXNBbmRDb250ZXh0KSB7XG4gICAgICBjYW52YXNBbmRDb250ZXh0ID0gdGhpcy5fY3JlYXRlQ2FudmFzQW5kQ29udGV4dChtaW5XaWR0aCwgbWluSGVpZ2h0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNhbnZhc0FuZENvbnRleHQ7XG4gIH1cbiAgLyoqXG4gICAqIFBsYWNlIGEgcmVuZGVyIHRleHR1cmUgYmFjayBpbnRvIHRoZSBwb29sLlxuICAgKiBAcGFyYW0gY2FudmFzQW5kQ29udGV4dFxuICAgKi9cbiAgcmV0dXJuQ2FudmFzQW5kQ29udGV4dChjYW52YXNBbmRDb250ZXh0KSB7XG4gICAgY29uc3QgY2FudmFzID0gY2FudmFzQW5kQ29udGV4dC5jYW52YXM7XG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBjYW52YXM7XG4gICAgY29uc3Qga2V5ID0gKHdpZHRoIDw8IDE3KSArIChoZWlnaHQgPDwgMSk7XG4gICAgY2FudmFzQW5kQ29udGV4dC5jb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB0aGlzLl9jYW52YXNQb29sW2tleV0ucHVzaChjYW52YXNBbmRDb250ZXh0KTtcbiAgfVxuICBjbGVhcigpIHtcbiAgICB0aGlzLl9jYW52YXNQb29sID0ge307XG4gIH1cbn1cbmNvbnN0IENhbnZhc1Bvb2wgPSBuZXcgQ2FudmFzUG9vbENsYXNzKCk7XG5cbmV4cG9ydCB7IENhbnZhc1Bvb2wsIENhbnZhc1Bvb2xDbGFzcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2FudmFzUG9vbC5tanMubWFwXG4iLCJpbXBvcnQgeyBuZXh0UG93MiB9IGZyb20gJy4uLy4uLy4uLy4uL21hdGhzL21pc2MvcG93Mi5tanMnO1xuaW1wb3J0IHsgVGV4dHVyZVNvdXJjZSB9IGZyb20gJy4vc291cmNlcy9UZXh0dXJlU291cmNlLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi9UZXh0dXJlLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xubGV0IGNvdW50ID0gMDtcbmNsYXNzIFRleHR1cmVQb29sQ2xhc3Mge1xuICAvKipcbiAgICogQHBhcmFtIHRleHR1cmVPcHRpb25zIC0gb3B0aW9ucyB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIEJhc2VSZW5kZXJUZXh0dXJlIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7U0NBTEVfTU9ERX0gW3RleHR1cmVPcHRpb25zLnNjYWxlTW9kZV0gLSBTZWUge0BsaW5rIFNDQUxFX01PREV9IGZvciBwb3NzaWJsZSB2YWx1ZXMuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih0ZXh0dXJlT3B0aW9ucykge1xuICAgIHRoaXMuX3Bvb2xLZXlIYXNoID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fdGV4dHVyZVBvb2wgPSB7fTtcbiAgICB0aGlzLnRleHR1cmVPcHRpb25zID0gdGV4dHVyZU9wdGlvbnMgfHwge307XG4gICAgdGhpcy5lbmFibGVGdWxsU2NyZWVuID0gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGV4dHVyZSB3aXRoIHBhcmFtcyB0aGF0IHdlcmUgc3BlY2lmaWVkIGluIHBvb2wgY29uc3RydWN0b3IuXG4gICAqIEBwYXJhbSBwaXhlbFdpZHRoIC0gV2lkdGggb2YgdGV4dHVyZSBpbiBwaXhlbHMuXG4gICAqIEBwYXJhbSBwaXhlbEhlaWdodCAtIEhlaWdodCBvZiB0ZXh0dXJlIGluIHBpeGVscy5cbiAgICogQHBhcmFtIGFudGlhbGlhc1xuICAgKi9cbiAgY3JlYXRlVGV4dHVyZShwaXhlbFdpZHRoLCBwaXhlbEhlaWdodCwgYW50aWFsaWFzKSB7XG4gICAgY29uc3QgdGV4dHVyZVNvdXJjZSA9IG5ldyBUZXh0dXJlU291cmNlKHtcbiAgICAgIC4uLnRoaXMudGV4dHVyZU9wdGlvbnMsXG4gICAgICB3aWR0aDogcGl4ZWxXaWR0aCxcbiAgICAgIGhlaWdodDogcGl4ZWxIZWlnaHQsXG4gICAgICByZXNvbHV0aW9uOiAxLFxuICAgICAgYW50aWFsaWFzLFxuICAgICAgYXV0b0dhcmJhZ2VDb2xsZWN0OiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBUZXh0dXJlKHtcbiAgICAgIHNvdXJjZTogdGV4dHVyZVNvdXJjZSxcbiAgICAgIGxhYmVsOiBgdGV4dHVyZVBvb2xfJHtjb3VudCsrfWBcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogR2V0cyBhIFBvd2VyLW9mLVR3byByZW5kZXIgdGV4dHVyZSBvciBmdWxsU2NyZWVuIHRleHR1cmVcbiAgICogQHBhcmFtIGZyYW1lV2lkdGggLSBUaGUgbWluaW11bSB3aWR0aCBvZiB0aGUgcmVuZGVyIHRleHR1cmUuXG4gICAqIEBwYXJhbSBmcmFtZUhlaWdodCAtIFRoZSBtaW5pbXVtIGhlaWdodCBvZiB0aGUgcmVuZGVyIHRleHR1cmUuXG4gICAqIEBwYXJhbSByZXNvbHV0aW9uIC0gVGhlIHJlc29sdXRpb24gb2YgdGhlIHJlbmRlciB0ZXh0dXJlLlxuICAgKiBAcGFyYW0gYW50aWFsaWFzXG4gICAqIEByZXR1cm5zIFRoZSBuZXcgcmVuZGVyIHRleHR1cmUuXG4gICAqL1xuICBnZXRPcHRpbWFsVGV4dHVyZShmcmFtZVdpZHRoLCBmcmFtZUhlaWdodCwgcmVzb2x1dGlvbiA9IDEsIGFudGlhbGlhcykge1xuICAgIGxldCBwbzJXaWR0aCA9IE1hdGguY2VpbChmcmFtZVdpZHRoICogcmVzb2x1dGlvbiAtIDFlLTYpO1xuICAgIGxldCBwbzJIZWlnaHQgPSBNYXRoLmNlaWwoZnJhbWVIZWlnaHQgKiByZXNvbHV0aW9uIC0gMWUtNik7XG4gICAgcG8yV2lkdGggPSBuZXh0UG93MihwbzJXaWR0aCk7XG4gICAgcG8ySGVpZ2h0ID0gbmV4dFBvdzIocG8ySGVpZ2h0KTtcbiAgICBjb25zdCBrZXkgPSAocG8yV2lkdGggPDwgMTcpICsgKHBvMkhlaWdodCA8PCAxKSArIChhbnRpYWxpYXMgPyAxIDogMCk7XG4gICAgaWYgKCF0aGlzLl90ZXh0dXJlUG9vbFtrZXldKSB7XG4gICAgICB0aGlzLl90ZXh0dXJlUG9vbFtrZXldID0gW107XG4gICAgfVxuICAgIGxldCB0ZXh0dXJlID0gdGhpcy5fdGV4dHVyZVBvb2xba2V5XS5wb3AoKTtcbiAgICBpZiAoIXRleHR1cmUpIHtcbiAgICAgIHRleHR1cmUgPSB0aGlzLmNyZWF0ZVRleHR1cmUocG8yV2lkdGgsIHBvMkhlaWdodCwgYW50aWFsaWFzKTtcbiAgICB9XG4gICAgdGV4dHVyZS5zb3VyY2UuX3Jlc29sdXRpb24gPSByZXNvbHV0aW9uO1xuICAgIHRleHR1cmUuc291cmNlLndpZHRoID0gcG8yV2lkdGggLyByZXNvbHV0aW9uO1xuICAgIHRleHR1cmUuc291cmNlLmhlaWdodCA9IHBvMkhlaWdodCAvIHJlc29sdXRpb247XG4gICAgdGV4dHVyZS5zb3VyY2UucGl4ZWxXaWR0aCA9IHBvMldpZHRoO1xuICAgIHRleHR1cmUuc291cmNlLnBpeGVsSGVpZ2h0ID0gcG8ySGVpZ2h0O1xuICAgIHRleHR1cmUuZnJhbWUueCA9IDA7XG4gICAgdGV4dHVyZS5mcmFtZS55ID0gMDtcbiAgICB0ZXh0dXJlLmZyYW1lLndpZHRoID0gZnJhbWVXaWR0aDtcbiAgICB0ZXh0dXJlLmZyYW1lLmhlaWdodCA9IGZyYW1lSGVpZ2h0O1xuICAgIHRleHR1cmUudXBkYXRlVXZzKCk7XG4gICAgdGhpcy5fcG9vbEtleUhhc2hbdGV4dHVyZS51aWRdID0ga2V5O1xuICAgIHJldHVybiB0ZXh0dXJlO1xuICB9XG4gIC8qKlxuICAgKiBHZXRzIGV4dHJhIHRleHR1cmUgb2YgdGhlIHNhbWUgc2l6ZSBhcyBpbnB1dCByZW5kZXJUZXh0dXJlXG4gICAqIEBwYXJhbSB0ZXh0dXJlIC0gVGhlIHRleHR1cmUgdG8gY2hlY2sgd2hhdCBzaXplIGl0IGlzLlxuICAgKiBAcGFyYW0gYW50aWFsaWFzIC0gV2hldGhlciB0byB1c2UgYW50aWFsaWFzLlxuICAgKiBAcmV0dXJucyBBIHRleHR1cmUgdGhhdCBpcyBhIHBvd2VyIG9mIHR3b1xuICAgKi9cbiAgZ2V0U2FtZVNpemVUZXh0dXJlKHRleHR1cmUsIGFudGlhbGlhcyA9IGZhbHNlKSB7XG4gICAgY29uc3Qgc291cmNlID0gdGV4dHVyZS5zb3VyY2U7XG4gICAgcmV0dXJuIHRoaXMuZ2V0T3B0aW1hbFRleHR1cmUodGV4dHVyZS53aWR0aCwgdGV4dHVyZS5oZWlnaHQsIHNvdXJjZS5fcmVzb2x1dGlvbiwgYW50aWFsaWFzKTtcbiAgfVxuICAvKipcbiAgICogUGxhY2UgYSByZW5kZXIgdGV4dHVyZSBiYWNrIGludG8gdGhlIHBvb2wuXG4gICAqIEBwYXJhbSByZW5kZXJUZXh0dXJlIC0gVGhlIHJlbmRlclRleHR1cmUgdG8gZnJlZVxuICAgKi9cbiAgcmV0dXJuVGV4dHVyZShyZW5kZXJUZXh0dXJlKSB7XG4gICAgY29uc3Qga2V5ID0gdGhpcy5fcG9vbEtleUhhc2hbcmVuZGVyVGV4dHVyZS51aWRdO1xuICAgIHRoaXMuX3RleHR1cmVQb29sW2tleV0ucHVzaChyZW5kZXJUZXh0dXJlKTtcbiAgfVxuICAvKipcbiAgICogQ2xlYXJzIHRoZSBwb29sLlxuICAgKiBAcGFyYW0gZGVzdHJveVRleHR1cmVzIC0gRGVzdHJveSBhbGwgc3RvcmVkIHRleHR1cmVzLlxuICAgKi9cbiAgY2xlYXIoZGVzdHJveVRleHR1cmVzKSB7XG4gICAgZGVzdHJveVRleHR1cmVzID0gZGVzdHJveVRleHR1cmVzICE9PSBmYWxzZTtcbiAgICBpZiAoZGVzdHJveVRleHR1cmVzKSB7XG4gICAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5fdGV4dHVyZVBvb2wpIHtcbiAgICAgICAgY29uc3QgdGV4dHVyZXMgPSB0aGlzLl90ZXh0dXJlUG9vbFtpXTtcbiAgICAgICAgaWYgKHRleHR1cmVzKSB7XG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0ZXh0dXJlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgdGV4dHVyZXNbal0uZGVzdHJveSh0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fdGV4dHVyZVBvb2wgPSB7fTtcbiAgfVxufVxuY29uc3QgVGV4dHVyZVBvb2wgPSBuZXcgVGV4dHVyZVBvb2xDbGFzcygpO1xuXG5leHBvcnQgeyBUZXh0dXJlUG9vbCwgVGV4dHVyZVBvb2xDbGFzcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGV4dHVyZVBvb2wubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBjb2xvclRvVW5pZm9ybShyZ2IsIGFscGhhLCBvdXQsIG9mZnNldCkge1xuICBvdXRbb2Zmc2V0KytdID0gKHJnYiA+PiAxNiAmIDI1NSkgLyAyNTU7XG4gIG91dFtvZmZzZXQrK10gPSAocmdiID4+IDggJiAyNTUpIC8gMjU1O1xuICBvdXRbb2Zmc2V0KytdID0gKHJnYiAmIDI1NSkgLyAyNTU7XG4gIG91dFtvZmZzZXQrK10gPSBhbHBoYTtcbn1cbmZ1bmN0aW9uIGNvbG9yMzJCaXRUb1VuaWZvcm0oYWJnciwgb3V0LCBvZmZzZXQpIHtcbiAgY29uc3QgYWxwaGEgPSAoYWJnciA+PiAyNCAmIDI1NSkgLyAyNTU7XG4gIG91dFtvZmZzZXQrK10gPSAoYWJnciAmIDI1NSkgLyAyNTUgKiBhbHBoYTtcbiAgb3V0W29mZnNldCsrXSA9IChhYmdyID4+IDggJiAyNTUpIC8gMjU1ICogYWxwaGE7XG4gIG91dFtvZmZzZXQrK10gPSAoYWJnciA+PiAxNiAmIDI1NSkgLyAyNTUgKiBhbHBoYTtcbiAgb3V0W29mZnNldCsrXSA9IGFscGhhO1xufVxuXG5leHBvcnQgeyBjb2xvcjMyQml0VG9Vbmlmb3JtLCBjb2xvclRvVW5pZm9ybSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29sb3JUb1VuaWZvcm0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgU3RhdGUgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9zdGF0ZS9TdGF0ZS5tanMnO1xuaW1wb3J0IHsgQmlnUG9vbCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3Bvb2wvUG9vbEdyb3VwLm1qcyc7XG5pbXBvcnQgeyBjb2xvcjMyQml0VG9Vbmlmb3JtIH0gZnJvbSAnLi4vZ3B1L2NvbG9yVG9Vbmlmb3JtLm1qcyc7XG5pbXBvcnQgeyBCYXRjaGFibGVHcmFwaGljcyB9IGZyb20gJy4vQmF0Y2hhYmxlR3JhcGhpY3MubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBHcmFwaGljc1BpcGUge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlciwgYWRhcHRvcikge1xuICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5mb3IyZCgpO1xuICAgIC8vIGJhdGNoYWJsZSBncmFwaGljcyBsaXN0LCB1c2VkIHRvIHJlbmRlciBiYXRjaGVzXG4gICAgdGhpcy5fZ3JhcGhpY3NCYXRjaGVzSGFzaCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQm91bmQgPSB0aGlzLmRlc3Ryb3lSZW5kZXJhYmxlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuX2FkYXB0b3IgPSBhZGFwdG9yO1xuICAgIHRoaXMuX2FkYXB0b3IuaW5pdCgpO1xuICAgIHRoaXMucmVuZGVyZXIucmVuZGVyYWJsZUdDLmFkZE1hbmFnZWRIYXNoKHRoaXMsIFwiX2dyYXBoaWNzQmF0Y2hlc0hhc2hcIik7XG4gIH1cbiAgdmFsaWRhdGVSZW5kZXJhYmxlKGdyYXBoaWNzKSB7XG4gICAgY29uc3QgY29udGV4dCA9IGdyYXBoaWNzLmNvbnRleHQ7XG4gICAgY29uc3Qgd2FzQmF0Y2hlZCA9ICEhdGhpcy5fZ3JhcGhpY3NCYXRjaGVzSGFzaFtncmFwaGljcy51aWRdO1xuICAgIGNvbnN0IGdwdUNvbnRleHQgPSB0aGlzLnJlbmRlcmVyLmdyYXBoaWNzQ29udGV4dC51cGRhdGVHcHVDb250ZXh0KGNvbnRleHQpO1xuICAgIGlmIChncHVDb250ZXh0LmlzQmF0Y2hhYmxlIHx8IHdhc0JhdGNoZWQgIT09IGdwdUNvbnRleHQuaXNCYXRjaGFibGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgYWRkUmVuZGVyYWJsZShncmFwaGljcywgaW5zdHJ1Y3Rpb25TZXQpIHtcbiAgICBjb25zdCBncHVDb250ZXh0ID0gdGhpcy5yZW5kZXJlci5ncmFwaGljc0NvbnRleHQudXBkYXRlR3B1Q29udGV4dChncmFwaGljcy5jb250ZXh0KTtcbiAgICBpZiAoZ3JhcGhpY3MuZGlkVmlld1VwZGF0ZSkge1xuICAgICAgdGhpcy5fcmVidWlsZChncmFwaGljcyk7XG4gICAgfVxuICAgIGlmIChncHVDb250ZXh0LmlzQmF0Y2hhYmxlKSB7XG4gICAgICB0aGlzLl9hZGRUb0JhdGNoZXIoZ3JhcGhpY3MsIGluc3RydWN0aW9uU2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW5kZXJQaXBlcy5iYXRjaC5icmVhayhpbnN0cnVjdGlvblNldCk7XG4gICAgICBpbnN0cnVjdGlvblNldC5hZGQoZ3JhcGhpY3MpO1xuICAgIH1cbiAgfVxuICB1cGRhdGVSZW5kZXJhYmxlKGdyYXBoaWNzKSB7XG4gICAgY29uc3QgYmF0Y2hlcyA9IHRoaXMuX2dyYXBoaWNzQmF0Y2hlc0hhc2hbZ3JhcGhpY3MudWlkXTtcbiAgICBpZiAoYmF0Y2hlcykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiYXRjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGJhdGNoID0gYmF0Y2hlc1tpXTtcbiAgICAgICAgYmF0Y2guX2JhdGNoZXIudXBkYXRlRWxlbWVudChiYXRjaCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGRlc3Ryb3lSZW5kZXJhYmxlKGdyYXBoaWNzKSB7XG4gICAgaWYgKHRoaXMuX2dyYXBoaWNzQmF0Y2hlc0hhc2hbZ3JhcGhpY3MudWlkXSkge1xuICAgICAgdGhpcy5fcmVtb3ZlQmF0Y2hGb3JSZW5kZXJhYmxlKGdyYXBoaWNzLnVpZCk7XG4gICAgfVxuICAgIGdyYXBoaWNzLm9mZihcImRlc3Ryb3llZFwiLCB0aGlzLl9kZXN0cm95UmVuZGVyYWJsZUJvdW5kKTtcbiAgfVxuICBleGVjdXRlKGdyYXBoaWNzKSB7XG4gICAgaWYgKCFncmFwaGljcy5pc1JlbmRlcmFibGUpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xuICAgIGNvbnN0IGNvbnRleHQgPSBncmFwaGljcy5jb250ZXh0O1xuICAgIGNvbnN0IGNvbnRleHRTeXN0ZW0gPSByZW5kZXJlci5ncmFwaGljc0NvbnRleHQ7XG4gICAgaWYgKCFjb250ZXh0U3lzdGVtLmdldEdwdUNvbnRleHQoY29udGV4dCkuYmF0Y2hlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2hhZGVyID0gY29udGV4dC5jdXN0b21TaGFkZXIgfHwgdGhpcy5fYWRhcHRvci5zaGFkZXI7XG4gICAgdGhpcy5zdGF0ZS5ibGVuZE1vZGUgPSBncmFwaGljcy5ncm91cEJsZW5kTW9kZTtcbiAgICBjb25zdCBsb2NhbFVuaWZvcm1zID0gc2hhZGVyLnJlc291cmNlcy5sb2NhbFVuaWZvcm1zLnVuaWZvcm1zO1xuICAgIGxvY2FsVW5pZm9ybXMudVRyYW5zZm9ybU1hdHJpeCA9IGdyYXBoaWNzLmdyb3VwVHJhbnNmb3JtO1xuICAgIGxvY2FsVW5pZm9ybXMudVJvdW5kID0gcmVuZGVyZXIuX3JvdW5kUGl4ZWxzIHwgZ3JhcGhpY3MuX3JvdW5kUGl4ZWxzO1xuICAgIGNvbG9yMzJCaXRUb1VuaWZvcm0oXG4gICAgICBncmFwaGljcy5ncm91cENvbG9yQWxwaGEsXG4gICAgICBsb2NhbFVuaWZvcm1zLnVDb2xvcixcbiAgICAgIDBcbiAgICApO1xuICAgIHRoaXMuX2FkYXB0b3IuZXhlY3V0ZSh0aGlzLCBncmFwaGljcyk7XG4gIH1cbiAgX3JlYnVpbGQoZ3JhcGhpY3MpIHtcbiAgICBjb25zdCB3YXNCYXRjaGVkID0gISF0aGlzLl9ncmFwaGljc0JhdGNoZXNIYXNoW2dyYXBoaWNzLnVpZF07XG4gICAgY29uc3QgZ3B1Q29udGV4dCA9IHRoaXMucmVuZGVyZXIuZ3JhcGhpY3NDb250ZXh0LnVwZGF0ZUdwdUNvbnRleHQoZ3JhcGhpY3MuY29udGV4dCk7XG4gICAgaWYgKHdhc0JhdGNoZWQpIHtcbiAgICAgIHRoaXMuX3JlbW92ZUJhdGNoRm9yUmVuZGVyYWJsZShncmFwaGljcy51aWQpO1xuICAgIH1cbiAgICBpZiAoZ3B1Q29udGV4dC5pc0JhdGNoYWJsZSkge1xuICAgICAgdGhpcy5faW5pdEJhdGNoZXNGb3JSZW5kZXJhYmxlKGdyYXBoaWNzKTtcbiAgICB9XG4gICAgZ3JhcGhpY3MuYmF0Y2hlZCA9IGdwdUNvbnRleHQuaXNCYXRjaGFibGU7XG4gIH1cbiAgX2FkZFRvQmF0Y2hlcihncmFwaGljcywgaW5zdHJ1Y3Rpb25TZXQpIHtcbiAgICBjb25zdCBiYXRjaFBpcGUgPSB0aGlzLnJlbmRlcmVyLnJlbmRlclBpcGVzLmJhdGNoO1xuICAgIGNvbnN0IGJhdGNoZXMgPSB0aGlzLl9nZXRCYXRjaGVzRm9yUmVuZGVyYWJsZShncmFwaGljcyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiYXRjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBiYXRjaCA9IGJhdGNoZXNbaV07XG4gICAgICBiYXRjaFBpcGUuYWRkVG9CYXRjaChiYXRjaCwgaW5zdHJ1Y3Rpb25TZXQpO1xuICAgIH1cbiAgfVxuICBfZ2V0QmF0Y2hlc0ZvclJlbmRlcmFibGUoZ3JhcGhpY3MpIHtcbiAgICByZXR1cm4gdGhpcy5fZ3JhcGhpY3NCYXRjaGVzSGFzaFtncmFwaGljcy51aWRdIHx8IHRoaXMuX2luaXRCYXRjaGVzRm9yUmVuZGVyYWJsZShncmFwaGljcyk7XG4gIH1cbiAgX2luaXRCYXRjaGVzRm9yUmVuZGVyYWJsZShncmFwaGljcykge1xuICAgIGNvbnN0IGNvbnRleHQgPSBncmFwaGljcy5jb250ZXh0O1xuICAgIGNvbnN0IGdwdUNvbnRleHQgPSB0aGlzLnJlbmRlcmVyLmdyYXBoaWNzQ29udGV4dC5nZXRHcHVDb250ZXh0KGNvbnRleHQpO1xuICAgIGNvbnN0IHJvdW5kUGl4ZWxzID0gdGhpcy5yZW5kZXJlci5fcm91bmRQaXhlbHMgfCBncmFwaGljcy5fcm91bmRQaXhlbHM7XG4gICAgY29uc3QgYmF0Y2hlcyA9IGdwdUNvbnRleHQuYmF0Y2hlcy5tYXAoKGJhdGNoKSA9PiB7XG4gICAgICBjb25zdCBiYXRjaENsb25lID0gQmlnUG9vbC5nZXQoQmF0Y2hhYmxlR3JhcGhpY3MpO1xuICAgICAgYmF0Y2guY29weVRvKGJhdGNoQ2xvbmUpO1xuICAgICAgYmF0Y2hDbG9uZS5yZW5kZXJhYmxlID0gZ3JhcGhpY3M7XG4gICAgICBiYXRjaENsb25lLnJvdW5kUGl4ZWxzID0gcm91bmRQaXhlbHM7XG4gICAgICByZXR1cm4gYmF0Y2hDbG9uZTtcbiAgICB9KTtcbiAgICBpZiAodGhpcy5fZ3JhcGhpY3NCYXRjaGVzSGFzaFtncmFwaGljcy51aWRdID09PSB2b2lkIDApIHtcbiAgICAgIGdyYXBoaWNzLm9uKFwiZGVzdHJveWVkXCIsIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQm91bmQpO1xuICAgIH1cbiAgICB0aGlzLl9ncmFwaGljc0JhdGNoZXNIYXNoW2dyYXBoaWNzLnVpZF0gPSBiYXRjaGVzO1xuICAgIHJldHVybiBiYXRjaGVzO1xuICB9XG4gIF9yZW1vdmVCYXRjaEZvclJlbmRlcmFibGUoZ3JhcGhpY3NVaWQpIHtcbiAgICB0aGlzLl9ncmFwaGljc0JhdGNoZXNIYXNoW2dyYXBoaWNzVWlkXS5mb3JFYWNoKChiYXRjaCkgPT4ge1xuICAgICAgQmlnUG9vbC5yZXR1cm4oYmF0Y2gpO1xuICAgIH0pO1xuICAgIHRoaXMuX2dyYXBoaWNzQmF0Y2hlc0hhc2hbZ3JhcGhpY3NVaWRdID0gbnVsbDtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMucmVuZGVyZXIgPSBudWxsO1xuICAgIHRoaXMuX2FkYXB0b3IuZGVzdHJveSgpO1xuICAgIHRoaXMuX2FkYXB0b3IgPSBudWxsO1xuICAgIHRoaXMuc3RhdGUgPSBudWxsO1xuICAgIGZvciAoY29uc3QgaSBpbiB0aGlzLl9ncmFwaGljc0JhdGNoZXNIYXNoKSB7XG4gICAgICB0aGlzLl9yZW1vdmVCYXRjaEZvclJlbmRlcmFibGUoaSk7XG4gICAgfVxuICAgIHRoaXMuX2dyYXBoaWNzQmF0Y2hlc0hhc2ggPSBudWxsO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuR3JhcGhpY3NQaXBlLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xQaXBlcyxcbiAgICBFeHRlbnNpb25UeXBlLldlYkdQVVBpcGVzLFxuICAgIEV4dGVuc2lvblR5cGUuQ2FudmFzUGlwZXNcbiAgXSxcbiAgbmFtZTogXCJncmFwaGljc1wiXG59O1xuXG5leHBvcnQgeyBHcmFwaGljc1BpcGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdyYXBoaWNzUGlwZS5tanMubWFwXG4iLCJpbXBvcnQgeyBleHRlbnNpb25zIH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBHcmFwaGljc0NvbnRleHRTeXN0ZW0gfSBmcm9tICcuL3NoYXJlZC9HcmFwaGljc0NvbnRleHRTeXN0ZW0ubWpzJztcbmltcG9ydCB7IEdyYXBoaWNzUGlwZSB9IGZyb20gJy4vc2hhcmVkL0dyYXBoaWNzUGlwZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmV4dGVuc2lvbnMuYWRkKEdyYXBoaWNzUGlwZSk7XG5leHRlbnNpb25zLmFkZChHcmFwaGljc0NvbnRleHRTeXN0ZW0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5pdC5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBNYXRyaXggfSBmcm9tICcuLi8uLi8uLi9tYXRocy9tYXRyaXgvTWF0cml4Lm1qcyc7XG5pbXBvcnQgeyBCaW5kR3JvdXAgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dwdS9zaGFkZXIvQmluZEdyb3VwLm1qcyc7XG5pbXBvcnQgeyBVbmlmb3JtR3JvdXAgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9zaGFkZXIvVW5pZm9ybUdyb3VwLm1qcyc7XG5pbXBvcnQgeyBnZXRBZGp1c3RlZEJsZW5kTW9kZUJsZW5kIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvc3RhdGUvZ2V0QWRqdXN0ZWRCbGVuZE1vZGVCbGVuZC5tanMnO1xuaW1wb3J0IHsgQmlnUG9vbCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3Bvb2wvUG9vbEdyb3VwLm1qcyc7XG5pbXBvcnQgeyBjb2xvcjMyQml0VG9Vbmlmb3JtIH0gZnJvbSAnLi4vLi4vZ3JhcGhpY3MvZ3B1L2NvbG9yVG9Vbmlmb3JtLm1qcyc7XG5pbXBvcnQgeyBCYXRjaGFibGVNZXNoIH0gZnJvbSAnLi9CYXRjaGFibGVNZXNoLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgTWVzaFBpcGUge1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlciwgYWRhcHRvcikge1xuICAgIHRoaXMubG9jYWxVbmlmb3JtcyA9IG5ldyBVbmlmb3JtR3JvdXAoe1xuICAgICAgdVRyYW5zZm9ybU1hdHJpeDogeyB2YWx1ZTogbmV3IE1hdHJpeCgpLCB0eXBlOiBcIm1hdDN4MzxmMzI+XCIgfSxcbiAgICAgIHVDb2xvcjogeyB2YWx1ZTogbmV3IEZsb2F0MzJBcnJheShbMSwgMSwgMSwgMV0pLCB0eXBlOiBcInZlYzQ8ZjMyPlwiIH0sXG4gICAgICB1Um91bmQ6IHsgdmFsdWU6IDAsIHR5cGU6IFwiZjMyXCIgfVxuICAgIH0pO1xuICAgIHRoaXMubG9jYWxVbmlmb3Jtc0JpbmRHcm91cCA9IG5ldyBCaW5kR3JvdXAoe1xuICAgICAgMDogdGhpcy5sb2NhbFVuaWZvcm1zXG4gICAgfSk7XG4gICAgdGhpcy5fbWVzaERhdGFIYXNoID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZ3B1QmF0Y2hhYmxlTWVzaEhhc2ggPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9kZXN0cm95UmVuZGVyYWJsZUJvdW5kID0gdGhpcy5kZXN0cm95UmVuZGVyYWJsZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLl9hZGFwdG9yID0gYWRhcHRvcjtcbiAgICB0aGlzLl9hZGFwdG9yLmluaXQoKTtcbiAgICByZW5kZXJlci5yZW5kZXJhYmxlR0MuYWRkTWFuYWdlZEhhc2godGhpcywgXCJfZ3B1QmF0Y2hhYmxlTWVzaEhhc2hcIik7XG4gICAgcmVuZGVyZXIucmVuZGVyYWJsZUdDLmFkZE1hbmFnZWRIYXNoKHRoaXMsIFwiX21lc2hEYXRhSGFzaFwiKTtcbiAgfVxuICB2YWxpZGF0ZVJlbmRlcmFibGUobWVzaCkge1xuICAgIGNvbnN0IG1lc2hEYXRhID0gdGhpcy5fZ2V0TWVzaERhdGEobWVzaCk7XG4gICAgY29uc3Qgd2FzQmF0Y2hlZCA9IG1lc2hEYXRhLmJhdGNoZWQ7XG4gICAgY29uc3QgaXNCYXRjaGVkID0gbWVzaC5iYXRjaGVkO1xuICAgIG1lc2hEYXRhLmJhdGNoZWQgPSBpc0JhdGNoZWQ7XG4gICAgaWYgKHdhc0JhdGNoZWQgIT09IGlzQmF0Y2hlZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChpc0JhdGNoZWQpIHtcbiAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbWVzaC5fZ2VvbWV0cnk7XG4gICAgICBpZiAoZ2VvbWV0cnkuaW5kaWNlcy5sZW5ndGggIT09IG1lc2hEYXRhLmluZGV4U2l6ZSB8fCBnZW9tZXRyeS5wb3NpdGlvbnMubGVuZ3RoICE9PSBtZXNoRGF0YS52ZXJ0ZXhTaXplKSB7XG4gICAgICAgIG1lc2hEYXRhLmluZGV4U2l6ZSA9IGdlb21ldHJ5LmluZGljZXMubGVuZ3RoO1xuICAgICAgICBtZXNoRGF0YS52ZXJ0ZXhTaXplID0gZ2VvbWV0cnkucG9zaXRpb25zLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBjb25zdCBiYXRjaGFibGVNZXNoID0gdGhpcy5fZ2V0QmF0Y2hhYmxlTWVzaChtZXNoKTtcbiAgICAgIGNvbnN0IHRleHR1cmUgPSBtZXNoLnRleHR1cmU7XG4gICAgICBpZiAoYmF0Y2hhYmxlTWVzaC50ZXh0dXJlLl9zb3VyY2UgIT09IHRleHR1cmUuX3NvdXJjZSkge1xuICAgICAgICBpZiAoYmF0Y2hhYmxlTWVzaC50ZXh0dXJlLl9zb3VyY2UgIT09IHRleHR1cmUuX3NvdXJjZSkge1xuICAgICAgICAgIHJldHVybiAhYmF0Y2hhYmxlTWVzaC5fYmF0Y2hlci5jaGVja0FuZFVwZGF0ZVRleHR1cmUoYmF0Y2hhYmxlTWVzaCwgdGV4dHVyZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGFkZFJlbmRlcmFibGUobWVzaCwgaW5zdHJ1Y3Rpb25TZXQpIHtcbiAgICBjb25zdCBiYXRjaGVyID0gdGhpcy5yZW5kZXJlci5yZW5kZXJQaXBlcy5iYXRjaDtcbiAgICBjb25zdCB7IGJhdGNoZWQgfSA9IHRoaXMuX2dldE1lc2hEYXRhKG1lc2gpO1xuICAgIGlmIChiYXRjaGVkKSB7XG4gICAgICBjb25zdCBncHVCYXRjaGFibGVNZXNoID0gdGhpcy5fZ2V0QmF0Y2hhYmxlTWVzaChtZXNoKTtcbiAgICAgIGdwdUJhdGNoYWJsZU1lc2gudGV4dHVyZSA9IG1lc2guX3RleHR1cmU7XG4gICAgICBncHVCYXRjaGFibGVNZXNoLmdlb21ldHJ5ID0gbWVzaC5fZ2VvbWV0cnk7XG4gICAgICBiYXRjaGVyLmFkZFRvQmF0Y2goZ3B1QmF0Y2hhYmxlTWVzaCwgaW5zdHJ1Y3Rpb25TZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBiYXRjaGVyLmJyZWFrKGluc3RydWN0aW9uU2V0KTtcbiAgICAgIGluc3RydWN0aW9uU2V0LmFkZChtZXNoKTtcbiAgICB9XG4gIH1cbiAgdXBkYXRlUmVuZGVyYWJsZShtZXNoKSB7XG4gICAgaWYgKG1lc2guYmF0Y2hlZCkge1xuICAgICAgY29uc3QgZ3B1QmF0Y2hhYmxlTWVzaCA9IHRoaXMuX2dwdUJhdGNoYWJsZU1lc2hIYXNoW21lc2gudWlkXTtcbiAgICAgIGdwdUJhdGNoYWJsZU1lc2gudGV4dHVyZSA9IG1lc2guX3RleHR1cmU7XG4gICAgICBncHVCYXRjaGFibGVNZXNoLmdlb21ldHJ5ID0gbWVzaC5fZ2VvbWV0cnk7XG4gICAgICBncHVCYXRjaGFibGVNZXNoLl9iYXRjaGVyLnVwZGF0ZUVsZW1lbnQoZ3B1QmF0Y2hhYmxlTWVzaCk7XG4gICAgfVxuICB9XG4gIGRlc3Ryb3lSZW5kZXJhYmxlKG1lc2gpIHtcbiAgICB0aGlzLl9tZXNoRGF0YUhhc2hbbWVzaC51aWRdID0gbnVsbDtcbiAgICBjb25zdCBncHVNZXNoID0gdGhpcy5fZ3B1QmF0Y2hhYmxlTWVzaEhhc2hbbWVzaC51aWRdO1xuICAgIGlmIChncHVNZXNoKSB7XG4gICAgICBCaWdQb29sLnJldHVybihncHVNZXNoKTtcbiAgICAgIHRoaXMuX2dwdUJhdGNoYWJsZU1lc2hIYXNoW21lc2gudWlkXSA9IG51bGw7XG4gICAgfVxuICAgIG1lc2gub2ZmKFwiZGVzdHJveWVkXCIsIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQm91bmQpO1xuICB9XG4gIGV4ZWN1dGUobWVzaCkge1xuICAgIGlmICghbWVzaC5pc1JlbmRlcmFibGUpXG4gICAgICByZXR1cm47XG4gICAgbWVzaC5zdGF0ZS5ibGVuZE1vZGUgPSBnZXRBZGp1c3RlZEJsZW5kTW9kZUJsZW5kKG1lc2guZ3JvdXBCbGVuZE1vZGUsIG1lc2gudGV4dHVyZS5fc291cmNlKTtcbiAgICBjb25zdCBsb2NhbFVuaWZvcm1zID0gdGhpcy5sb2NhbFVuaWZvcm1zO1xuICAgIGxvY2FsVW5pZm9ybXMudW5pZm9ybXMudVRyYW5zZm9ybU1hdHJpeCA9IG1lc2guZ3JvdXBUcmFuc2Zvcm07XG4gICAgbG9jYWxVbmlmb3Jtcy51bmlmb3Jtcy51Um91bmQgPSB0aGlzLnJlbmRlcmVyLl9yb3VuZFBpeGVscyB8IG1lc2guX3JvdW5kUGl4ZWxzO1xuICAgIGxvY2FsVW5pZm9ybXMudXBkYXRlKCk7XG4gICAgY29sb3IzMkJpdFRvVW5pZm9ybShcbiAgICAgIG1lc2guZ3JvdXBDb2xvckFscGhhLFxuICAgICAgbG9jYWxVbmlmb3Jtcy51bmlmb3Jtcy51Q29sb3IsXG4gICAgICAwXG4gICAgKTtcbiAgICB0aGlzLl9hZGFwdG9yLmV4ZWN1dGUodGhpcywgbWVzaCk7XG4gIH1cbiAgX2dldE1lc2hEYXRhKG1lc2gpIHtcbiAgICByZXR1cm4gdGhpcy5fbWVzaERhdGFIYXNoW21lc2gudWlkXSB8fCB0aGlzLl9pbml0TWVzaERhdGEobWVzaCk7XG4gIH1cbiAgX2luaXRNZXNoRGF0YShtZXNoKSB7XG4gICAgdGhpcy5fbWVzaERhdGFIYXNoW21lc2gudWlkXSA9IHtcbiAgICAgIGJhdGNoZWQ6IG1lc2guYmF0Y2hlZCxcbiAgICAgIGluZGV4U2l6ZTogbWVzaC5fZ2VvbWV0cnkuaW5kaWNlcz8ubGVuZ3RoLFxuICAgICAgdmVydGV4U2l6ZTogbWVzaC5fZ2VvbWV0cnkucG9zaXRpb25zPy5sZW5ndGhcbiAgICB9O1xuICAgIG1lc2gub24oXCJkZXN0cm95ZWRcIiwgdGhpcy5fZGVzdHJveVJlbmRlcmFibGVCb3VuZCk7XG4gICAgcmV0dXJuIHRoaXMuX21lc2hEYXRhSGFzaFttZXNoLnVpZF07XG4gIH1cbiAgX2dldEJhdGNoYWJsZU1lc2gobWVzaCkge1xuICAgIHJldHVybiB0aGlzLl9ncHVCYXRjaGFibGVNZXNoSGFzaFttZXNoLnVpZF0gfHwgdGhpcy5faW5pdEJhdGNoYWJsZU1lc2gobWVzaCk7XG4gIH1cbiAgX2luaXRCYXRjaGFibGVNZXNoKG1lc2gpIHtcbiAgICBjb25zdCBncHVNZXNoID0gQmlnUG9vbC5nZXQoQmF0Y2hhYmxlTWVzaCk7XG4gICAgZ3B1TWVzaC5yZW5kZXJhYmxlID0gbWVzaDtcbiAgICBncHVNZXNoLnRleHR1cmUgPSBtZXNoLl90ZXh0dXJlO1xuICAgIGdwdU1lc2gudHJhbnNmb3JtID0gbWVzaC5ncm91cFRyYW5zZm9ybTtcbiAgICBncHVNZXNoLnJvdW5kUGl4ZWxzID0gdGhpcy5yZW5kZXJlci5fcm91bmRQaXhlbHMgfCBtZXNoLl9yb3VuZFBpeGVscztcbiAgICB0aGlzLl9ncHVCYXRjaGFibGVNZXNoSGFzaFttZXNoLnVpZF0gPSBncHVNZXNoO1xuICAgIHJldHVybiBncHVNZXNoO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgZm9yIChjb25zdCBpIGluIHRoaXMuX2dwdUJhdGNoYWJsZU1lc2hIYXNoKSB7XG4gICAgICBpZiAodGhpcy5fZ3B1QmF0Y2hhYmxlTWVzaEhhc2hbaV0pIHtcbiAgICAgICAgQmlnUG9vbC5yZXR1cm4odGhpcy5fZ3B1QmF0Y2hhYmxlTWVzaEhhc2hbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9ncHVCYXRjaGFibGVNZXNoSGFzaCA9IG51bGw7XG4gICAgdGhpcy5fbWVzaERhdGFIYXNoID0gbnVsbDtcbiAgICB0aGlzLmxvY2FsVW5pZm9ybXMgPSBudWxsO1xuICAgIHRoaXMubG9jYWxVbmlmb3Jtc0JpbmRHcm91cCA9IG51bGw7XG4gICAgdGhpcy5fYWRhcHRvci5kZXN0cm95KCk7XG4gICAgdGhpcy5fYWRhcHRvciA9IG51bGw7XG4gICAgdGhpcy5yZW5kZXJlciA9IG51bGw7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5NZXNoUGlwZS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMUGlwZXMsXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHUFVQaXBlcyxcbiAgICBFeHRlbnNpb25UeXBlLkNhbnZhc1BpcGVzXG4gIF0sXG4gIG5hbWU6IFwibWVzaFwiXG59O1xuXG5leHBvcnQgeyBNZXNoUGlwZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWVzaFBpcGUubWpzLm1hcFxuIiwiaW1wb3J0IHsgZXh0ZW5zaW9ucyB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgTWVzaFBpcGUgfSBmcm9tICcuL3NoYXJlZC9NZXNoUGlwZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmV4dGVuc2lvbnMuYWRkKE1lc2hQaXBlKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaXQubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBCYXRjaGFibGVNZXNoIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5iYXRjaGVyTmFtZSA9IFwiZGVmYXVsdFwiO1xuICAgIHRoaXMucGFja0FzUXVhZCA9IGZhbHNlO1xuICAgIHRoaXMuaW5kZXhPZmZzZXQgPSAwO1xuICAgIHRoaXMuYXR0cmlidXRlT2Zmc2V0ID0gMDtcbiAgICB0aGlzLnJvdW5kUGl4ZWxzID0gMDtcbiAgICB0aGlzLl9iYXRjaGVyID0gbnVsbDtcbiAgICB0aGlzLl9iYXRjaCA9IG51bGw7XG4gICAgdGhpcy5fdXZVcGRhdGVJZCA9IC0xO1xuICAgIHRoaXMuX3RleHR1cmVNYXRyaXhVcGRhdGVJZCA9IC0xO1xuICB9XG4gIGdldCBibGVuZE1vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyYWJsZS5ncm91cEJsZW5kTW9kZTtcbiAgfVxuICByZXNldCgpIHtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSBudWxsO1xuICAgIHRoaXMudGV4dHVyZSA9IG51bGw7XG4gICAgdGhpcy5fYmF0Y2hlciA9IG51bGw7XG4gICAgdGhpcy5fYmF0Y2ggPSBudWxsO1xuICAgIHRoaXMuZ2VvbWV0cnkgPSBudWxsO1xuICAgIHRoaXMuX3V2VXBkYXRlSWQgPSAtMTtcbiAgICB0aGlzLl90ZXh0dXJlTWF0cml4VXBkYXRlSWQgPSAtMTtcbiAgfVxuICBnZXQgdXZzKCkge1xuICAgIGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcbiAgICBjb25zdCB1dkJ1ZmZlciA9IGdlb21ldHJ5LmdldEJ1ZmZlcihcImFVVlwiKTtcbiAgICBjb25zdCB1dnMgPSB1dkJ1ZmZlci5kYXRhO1xuICAgIGxldCB0cmFuc2Zvcm1lZFV2cyA9IHV2cztcbiAgICBjb25zdCB0ZXh0dXJlTWF0cml4ID0gdGhpcy50ZXh0dXJlLnRleHR1cmVNYXRyaXg7XG4gICAgaWYgKCF0ZXh0dXJlTWF0cml4LmlzU2ltcGxlKSB7XG4gICAgICB0cmFuc2Zvcm1lZFV2cyA9IHRoaXMuX3RyYW5zZm9ybWVkVXZzO1xuICAgICAgaWYgKHRoaXMuX3RleHR1cmVNYXRyaXhVcGRhdGVJZCAhPT0gdGV4dHVyZU1hdHJpeC5fdXBkYXRlSUQgfHwgdGhpcy5fdXZVcGRhdGVJZCAhPT0gdXZCdWZmZXIuX3VwZGF0ZUlEKSB7XG4gICAgICAgIGlmICghdHJhbnNmb3JtZWRVdnMgfHwgdHJhbnNmb3JtZWRVdnMubGVuZ3RoIDwgdXZzLmxlbmd0aCkge1xuICAgICAgICAgIHRyYW5zZm9ybWVkVXZzID0gdGhpcy5fdHJhbnNmb3JtZWRVdnMgPSBuZXcgRmxvYXQzMkFycmF5KHV2cy5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RleHR1cmVNYXRyaXhVcGRhdGVJZCA9IHRleHR1cmVNYXRyaXguX3VwZGF0ZUlEO1xuICAgICAgICB0aGlzLl91dlVwZGF0ZUlkID0gdXZCdWZmZXIuX3VwZGF0ZUlEO1xuICAgICAgICB0ZXh0dXJlTWF0cml4Lm11bHRpcGx5VXZzKHV2cywgdHJhbnNmb3JtZWRVdnMpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJhbnNmb3JtZWRVdnM7XG4gIH1cbiAgZ2V0IHBvc2l0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5nZW9tZXRyeS5wb3NpdGlvbnM7XG4gIH1cbiAgZ2V0IGluZGljZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2VvbWV0cnkuaW5kaWNlcztcbiAgfVxuICBnZXQgY29sb3IoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyYWJsZS5ncm91cENvbG9yQWxwaGE7XG4gIH1cbiAgZ2V0IGdyb3VwVHJhbnNmb3JtKCkge1xuICAgIHJldHVybiB0aGlzLnJlbmRlcmFibGUuZ3JvdXBUcmFuc2Zvcm07XG4gIH1cbiAgZ2V0IGF0dHJpYnV0ZVNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2VvbWV0cnkucG9zaXRpb25zLmxlbmd0aCAvIDI7XG4gIH1cbiAgZ2V0IGluZGV4U2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZW9tZXRyeS5pbmRpY2VzLmxlbmd0aDtcbiAgfVxufVxuXG5leHBvcnQgeyBCYXRjaGFibGVNZXNoIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CYXRjaGFibGVNZXNoLm1qcy5tYXBcbiIsImltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL2J1ZmZlci9CdWZmZXIubWpzJztcbmltcG9ydCB7IEJ1ZmZlclVzYWdlIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvYnVmZmVyL2NvbnN0Lm1qcyc7XG5pbXBvcnQgeyBHZW9tZXRyeSB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL2dlb21ldHJ5L0dlb21ldHJ5Lm1qcyc7XG5pbXBvcnQgeyBkZXByZWNhdGlvbiwgdjhfMF8wIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvbG9nZ2luZy9kZXByZWNhdGlvbi5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IF9NZXNoR2VvbWV0cnkgPSBjbGFzcyBfTWVzaEdlb21ldHJ5IGV4dGVuZHMgR2VvbWV0cnkge1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmdzWzBdID8/IHt9O1xuICAgIGlmIChvcHRpb25zIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5KSB7XG4gICAgICBkZXByZWNhdGlvbih2OF8wXzAsIFwidXNlIG5ldyBNZXNoR2VvbWV0cnkoeyBwb3NpdGlvbnMsIHV2cywgaW5kaWNlcyB9KSBpbnN0ZWFkXCIpO1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgcG9zaXRpb25zOiBvcHRpb25zLFxuICAgICAgICB1dnM6IGFyZ3NbMV0sXG4gICAgICAgIGluZGljZXM6IGFyZ3NbMl1cbiAgICAgIH07XG4gICAgfVxuICAgIG9wdGlvbnMgPSB7IC4uLl9NZXNoR2VvbWV0cnkuZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfTtcbiAgICBjb25zdCBwb3NpdGlvbnMgPSBvcHRpb25zLnBvc2l0aW9ucyB8fCBuZXcgRmxvYXQzMkFycmF5KFswLCAwLCAxLCAwLCAxLCAxLCAwLCAxXSk7XG4gICAgY29uc3QgdXZzID0gb3B0aW9ucy51dnMgfHwgbmV3IEZsb2F0MzJBcnJheShbMCwgMCwgMSwgMCwgMSwgMSwgMCwgMV0pO1xuICAgIGNvbnN0IGluZGljZXMgPSBvcHRpb25zLmluZGljZXMgfHwgbmV3IFVpbnQzMkFycmF5KFswLCAxLCAyLCAwLCAyLCAzXSk7XG4gICAgY29uc3Qgc2hyaW5rVG9GaXQgPSBvcHRpb25zLnNocmlua0J1ZmZlcnNUb0ZpdDtcbiAgICBjb25zdCBwb3NpdGlvbkJ1ZmZlciA9IG5ldyBCdWZmZXIoe1xuICAgICAgZGF0YTogcG9zaXRpb25zLFxuICAgICAgbGFiZWw6IFwiYXR0cmlidXRlLW1lc2gtcG9zaXRpb25zXCIsXG4gICAgICBzaHJpbmtUb0ZpdCxcbiAgICAgIHVzYWdlOiBCdWZmZXJVc2FnZS5WRVJURVggfCBCdWZmZXJVc2FnZS5DT1BZX0RTVFxuICAgIH0pO1xuICAgIGNvbnN0IHV2QnVmZmVyID0gbmV3IEJ1ZmZlcih7XG4gICAgICBkYXRhOiB1dnMsXG4gICAgICBsYWJlbDogXCJhdHRyaWJ1dGUtbWVzaC11dnNcIixcbiAgICAgIHNocmlua1RvRml0LFxuICAgICAgdXNhZ2U6IEJ1ZmZlclVzYWdlLlZFUlRFWCB8IEJ1ZmZlclVzYWdlLkNPUFlfRFNUXG4gICAgfSk7XG4gICAgY29uc3QgaW5kZXhCdWZmZXIgPSBuZXcgQnVmZmVyKHtcbiAgICAgIGRhdGE6IGluZGljZXMsXG4gICAgICBsYWJlbDogXCJpbmRleC1tZXNoLWJ1ZmZlclwiLFxuICAgICAgc2hyaW5rVG9GaXQsXG4gICAgICB1c2FnZTogQnVmZmVyVXNhZ2UuSU5ERVggfCBCdWZmZXJVc2FnZS5DT1BZX0RTVFxuICAgIH0pO1xuICAgIHN1cGVyKHtcbiAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgYVBvc2l0aW9uOiB7XG4gICAgICAgICAgYnVmZmVyOiBwb3NpdGlvbkJ1ZmZlcixcbiAgICAgICAgICBmb3JtYXQ6IFwiZmxvYXQzMngyXCIsXG4gICAgICAgICAgc3RyaWRlOiAyICogNCxcbiAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgfSxcbiAgICAgICAgYVVWOiB7XG4gICAgICAgICAgYnVmZmVyOiB1dkJ1ZmZlcixcbiAgICAgICAgICBmb3JtYXQ6IFwiZmxvYXQzMngyXCIsXG4gICAgICAgICAgc3RyaWRlOiAyICogNCxcbiAgICAgICAgICBvZmZzZXQ6IDBcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGluZGV4QnVmZmVyLFxuICAgICAgdG9wb2xvZ3k6IG9wdGlvbnMudG9wb2xvZ3lcbiAgICB9KTtcbiAgICB0aGlzLmJhdGNoTW9kZSA9IFwiYXV0b1wiO1xuICB9XG4gIC8qKiBUaGUgcG9zaXRpb25zIG9mIHRoZSBtZXNoLiAqL1xuICBnZXQgcG9zaXRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZXMuYVBvc2l0aW9uLmJ1ZmZlci5kYXRhO1xuICB9XG4gIHNldCBwb3NpdGlvbnModmFsdWUpIHtcbiAgICB0aGlzLmF0dHJpYnV0ZXMuYVBvc2l0aW9uLmJ1ZmZlci5kYXRhID0gdmFsdWU7XG4gIH1cbiAgLyoqIFRoZSBVVnMgb2YgdGhlIG1lc2guICovXG4gIGdldCB1dnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcy5hVVYuYnVmZmVyLmRhdGE7XG4gIH1cbiAgc2V0IHV2cyh2YWx1ZSkge1xuICAgIHRoaXMuYXR0cmlidXRlcy5hVVYuYnVmZmVyLmRhdGEgPSB2YWx1ZTtcbiAgfVxuICAvKiogVGhlIGluZGljZXMgb2YgdGhlIG1lc2guICovXG4gIGdldCBpbmRpY2VzKCkge1xuICAgIHJldHVybiB0aGlzLmluZGV4QnVmZmVyLmRhdGE7XG4gIH1cbiAgc2V0IGluZGljZXModmFsdWUpIHtcbiAgICB0aGlzLmluZGV4QnVmZmVyLmRhdGEgPSB2YWx1ZTtcbiAgfVxufTtcbl9NZXNoR2VvbWV0cnkuZGVmYXVsdE9wdGlvbnMgPSB7XG4gIHRvcG9sb2d5OiBcInRyaWFuZ2xlLWxpc3RcIixcbiAgc2hyaW5rQnVmZmVyc1RvRml0OiBmYWxzZVxufTtcbmxldCBNZXNoR2VvbWV0cnkgPSBfTWVzaEdlb21ldHJ5O1xuXG5leHBvcnQgeyBNZXNoR2VvbWV0cnkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1lc2hHZW9tZXRyeS5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdsUGFydGljbGVDb250YWluZXJBZGFwdG9yIHtcbiAgZXhlY3V0ZShwYXJ0aWNsZUNvbnRhaW5lclBvcCwgY29udGFpbmVyKSB7XG4gICAgY29uc3Qgc3RhdGUgPSBwYXJ0aWNsZUNvbnRhaW5lclBvcC5zdGF0ZTtcbiAgICBjb25zdCByZW5kZXJlciA9IHBhcnRpY2xlQ29udGFpbmVyUG9wLnJlbmRlcmVyO1xuICAgIGNvbnN0IHNoYWRlciA9IGNvbnRhaW5lci5zaGFkZXIgfHwgcGFydGljbGVDb250YWluZXJQb3AuZGVmYXVsdFNoYWRlcjtcbiAgICBzaGFkZXIucmVzb3VyY2VzLnVUZXh0dXJlID0gY29udGFpbmVyLnRleHR1cmUuX3NvdXJjZTtcbiAgICBzaGFkZXIucmVzb3VyY2VzLnVuaWZvcm1zID0gcGFydGljbGVDb250YWluZXJQb3AubG9jYWxVbmlmb3JtcztcbiAgICBjb25zdCBnbCA9IHJlbmRlcmVyLmdsO1xuICAgIGNvbnN0IGJ1ZmZlciA9IHBhcnRpY2xlQ29udGFpbmVyUG9wLmdldEJ1ZmZlcnMoY29udGFpbmVyKTtcbiAgICByZW5kZXJlci5zaGFkZXIuYmluZChzaGFkZXIpO1xuICAgIHJlbmRlcmVyLnN0YXRlLnNldChzdGF0ZSk7XG4gICAgcmVuZGVyZXIuZ2VvbWV0cnkuYmluZChidWZmZXIuZ2VvbWV0cnksIHNoYWRlci5nbFByb2dyYW0pO1xuICAgIGNvbnN0IGJ5dGVTaXplID0gYnVmZmVyLmdlb21ldHJ5LmluZGV4QnVmZmVyLmRhdGEuQllURVNfUEVSX0VMRU1FTlQ7XG4gICAgY29uc3QgZ2xUeXBlID0gYnl0ZVNpemUgPT09IDIgPyBnbC5VTlNJR05FRF9TSE9SVCA6IGdsLlVOU0lHTkVEX0lOVDtcbiAgICBnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVTLCBjb250YWluZXIucGFydGljbGVDaGlsZHJlbi5sZW5ndGggKiA2LCBnbFR5cGUsIDApO1xuICB9XG59XG5cbmV4cG9ydCB7IEdsUGFydGljbGVDb250YWluZXJBZGFwdG9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HbFBhcnRpY2xlQ29udGFpbmVyQWRhcHRvci5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGNyZWF0ZUluZGljZXNGb3JRdWFkcyhzaXplLCBvdXRCdWZmZXIgPSBudWxsKSB7XG4gIGNvbnN0IHRvdGFsSW5kaWNlcyA9IHNpemUgKiA2O1xuICBpZiAodG90YWxJbmRpY2VzID4gNjU1MzUpIHtcbiAgICBvdXRCdWZmZXIgPSBvdXRCdWZmZXIgfHwgbmV3IFVpbnQzMkFycmF5KHRvdGFsSW5kaWNlcyk7XG4gIH0gZWxzZSB7XG4gICAgb3V0QnVmZmVyID0gb3V0QnVmZmVyIHx8IG5ldyBVaW50MTZBcnJheSh0b3RhbEluZGljZXMpO1xuICB9XG4gIGlmIChvdXRCdWZmZXIubGVuZ3RoICE9PSB0b3RhbEluZGljZXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE91dCBidWZmZXIgbGVuZ3RoIGlzIGluY29ycmVjdCwgZ290ICR7b3V0QnVmZmVyLmxlbmd0aH0gYW5kIGV4cGVjdGVkICR7dG90YWxJbmRpY2VzfWApO1xuICB9XG4gIGZvciAobGV0IGkgPSAwLCBqID0gMDsgaSA8IHRvdGFsSW5kaWNlczsgaSArPSA2LCBqICs9IDQpIHtcbiAgICBvdXRCdWZmZXJbaSArIDBdID0gaiArIDA7XG4gICAgb3V0QnVmZmVyW2kgKyAxXSA9IGogKyAxO1xuICAgIG91dEJ1ZmZlcltpICsgMl0gPSBqICsgMjtcbiAgICBvdXRCdWZmZXJbaSArIDNdID0gaiArIDA7XG4gICAgb3V0QnVmZmVyW2kgKyA0XSA9IGogKyAyO1xuICAgIG91dEJ1ZmZlcltpICsgNV0gPSBqICsgMztcbiAgfVxuICByZXR1cm4gb3V0QnVmZmVyO1xufVxuXG5leHBvcnQgeyBjcmVhdGVJbmRpY2VzRm9yUXVhZHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUluZGljZXNGb3JRdWFkcy5tanMubWFwXG4iLCJpbXBvcnQgeyBnZXRBdHRyaWJ1dGVJbmZvRnJvbUZvcm1hdCB9IGZyb20gJy4uLy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL2dlb21ldHJ5L3V0aWxzL2dldEF0dHJpYnV0ZUluZm9Gcm9tRm9ybWF0Lm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gZ2VuZXJhdGVQYXJ0aWNsZVVwZGF0ZUZ1bmN0aW9uKHByb3BlcnRpZXMpIHtcbiAgcmV0dXJuIHtcbiAgICBkeW5hbWljVXBkYXRlOiBnZW5lcmF0ZVVwZGF0ZUZ1bmN0aW9uKHByb3BlcnRpZXMsIHRydWUpLFxuICAgIHN0YXRpY1VwZGF0ZTogZ2VuZXJhdGVVcGRhdGVGdW5jdGlvbihwcm9wZXJ0aWVzLCBmYWxzZSlcbiAgfTtcbn1cbmZ1bmN0aW9uIGdlbmVyYXRlVXBkYXRlRnVuY3Rpb24ocHJvcGVydGllcywgZHluYW1pYykge1xuICBjb25zdCBmdW5jRnJhZ21lbnRzID0gW107XG4gIGZ1bmNGcmFnbWVudHMucHVzaChgXG4gICAgICBcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBzLmxlbmd0aDsgKytpKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBwID0gcHNbaV07XG5cbiAgICAgICAgICAgIGApO1xuICBsZXQgb2Zmc2V0ID0gMDtcbiAgZm9yIChjb25zdCBpIGluIHByb3BlcnRpZXMpIHtcbiAgICBjb25zdCBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbaV07XG4gICAgaWYgKGR5bmFtaWMgIT09IHByb3BlcnR5LmR5bmFtaWMpXG4gICAgICBjb250aW51ZTtcbiAgICBmdW5jRnJhZ21lbnRzLnB1c2goYG9mZnNldCA9IGluZGV4ICsgJHtvZmZzZXR9YCk7XG4gICAgZnVuY0ZyYWdtZW50cy5wdXNoKHByb3BlcnR5LmNvZGUpO1xuICAgIGNvbnN0IGF0dHJpYnV0ZUluZm8gPSBnZXRBdHRyaWJ1dGVJbmZvRnJvbUZvcm1hdChwcm9wZXJ0eS5mb3JtYXQpO1xuICAgIG9mZnNldCArPSBhdHRyaWJ1dGVJbmZvLnN0cmlkZSAvIDQ7XG4gIH1cbiAgZnVuY0ZyYWdtZW50cy5wdXNoKGBcbiAgICAgICAgICAgIGluZGV4ICs9IHN0cmlkZSAqIDQ7XG4gICAgICAgIH1cbiAgICBgKTtcbiAgZnVuY0ZyYWdtZW50cy51bnNoaWZ0KGBcbiAgICAgICAgdmFyIHN0cmlkZSA9ICR7b2Zmc2V0fTtcbiAgICBgKTtcbiAgY29uc3QgZnVuY3Rpb25Tb3VyY2UgPSBmdW5jRnJhZ21lbnRzLmpvaW4oXCJcXG5cIik7XG4gIHJldHVybiBuZXcgRnVuY3Rpb24oXCJwc1wiLCBcImYzMnZcIiwgXCJ1MzJ2XCIsIGZ1bmN0aW9uU291cmNlKTtcbn1cblxuZXhwb3J0IHsgZ2VuZXJhdGVQYXJ0aWNsZVVwZGF0ZUZ1bmN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW5lcmF0ZVBhcnRpY2xlVXBkYXRlRnVuY3Rpb24ubWpzLm1hcFxuIiwiaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvYnVmZmVyL0J1ZmZlci5tanMnO1xuaW1wb3J0IHsgQnVmZmVyVXNhZ2UgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9idWZmZXIvY29uc3QubWpzJztcbmltcG9ydCB7IEdlb21ldHJ5IH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvZ2VvbWV0cnkvR2VvbWV0cnkubWpzJztcbmltcG9ydCB7IGdldEF0dHJpYnV0ZUluZm9Gcm9tRm9ybWF0IH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvZ2VvbWV0cnkvdXRpbHMvZ2V0QXR0cmlidXRlSW5mb0Zyb21Gb3JtYXQubWpzJztcbmltcG9ydCB7IFZpZXdhYmxlQnVmZmVyIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZGF0YS9WaWV3YWJsZUJ1ZmZlci5tanMnO1xuaW1wb3J0IHsgY3JlYXRlSW5kaWNlc0ZvclF1YWRzIH0gZnJvbSAnLi91dGlscy9jcmVhdGVJbmRpY2VzRm9yUXVhZHMubWpzJztcbmltcG9ydCB7IGdlbmVyYXRlUGFydGljbGVVcGRhdGVGdW5jdGlvbiB9IGZyb20gJy4vdXRpbHMvZ2VuZXJhdGVQYXJ0aWNsZVVwZGF0ZUZ1bmN0aW9uLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgUGFydGljbGVCdWZmZXIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgdGhpcy5fZ2VuZXJhdGVQYXJ0aWNsZVVwZGF0ZUNhY2hlID0ge307XG4gICAgY29uc3Qgc2l6ZSA9IHRoaXMuX3NpemUgPSBvcHRpb25zLnNpemUgPz8gMWUzO1xuICAgIGNvbnN0IHByb3BlcnRpZXMgPSBvcHRpb25zLnByb3BlcnRpZXM7XG4gICAgbGV0IHN0YXRpY1ZlcnRleFNpemUgPSAwO1xuICAgIGxldCBkeW5hbWljVmVydGV4U2l6ZSA9IDA7XG4gICAgZm9yIChjb25zdCBpIGluIHByb3BlcnRpZXMpIHtcbiAgICAgIGNvbnN0IHByb3BlcnR5ID0gcHJvcGVydGllc1tpXTtcbiAgICAgIGNvbnN0IGF0dHJpYnV0ZUluZm8gPSBnZXRBdHRyaWJ1dGVJbmZvRnJvbUZvcm1hdChwcm9wZXJ0eS5mb3JtYXQpO1xuICAgICAgaWYgKHByb3BlcnR5LmR5bmFtaWMpIHtcbiAgICAgICAgZHluYW1pY1ZlcnRleFNpemUgKz0gYXR0cmlidXRlSW5mby5zdHJpZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0aWNWZXJ0ZXhTaXplICs9IGF0dHJpYnV0ZUluZm8uc3RyaWRlO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9keW5hbWljU3RyaWRlID0gZHluYW1pY1ZlcnRleFNpemUgLyA0O1xuICAgIHRoaXMuX3N0YXRpY1N0cmlkZSA9IHN0YXRpY1ZlcnRleFNpemUgLyA0O1xuICAgIHRoaXMuc3RhdGljQXR0cmlidXRlQnVmZmVyID0gbmV3IFZpZXdhYmxlQnVmZmVyKHNpemUgKiA0ICogc3RhdGljVmVydGV4U2l6ZSk7XG4gICAgdGhpcy5keW5hbWljQXR0cmlidXRlQnVmZmVyID0gbmV3IFZpZXdhYmxlQnVmZmVyKHNpemUgKiA0ICogZHluYW1pY1ZlcnRleFNpemUpO1xuICAgIHRoaXMuaW5kZXhCdWZmZXIgPSBjcmVhdGVJbmRpY2VzRm9yUXVhZHMoc2l6ZSk7XG4gICAgY29uc3QgZ2VvbWV0cnkgPSBuZXcgR2VvbWV0cnkoKTtcbiAgICBsZXQgZHluYW1pY09mZnNldCA9IDA7XG4gICAgbGV0IHN0YXRpY09mZnNldCA9IDA7XG4gICAgdGhpcy5fc3RhdGljQnVmZmVyID0gbmV3IEJ1ZmZlcih7XG4gICAgICBkYXRhOiBuZXcgRmxvYXQzMkFycmF5KDEpLFxuICAgICAgbGFiZWw6IFwic3RhdGljLXBhcnRpY2xlLWJ1ZmZlclwiLFxuICAgICAgc2hyaW5rVG9GaXQ6IGZhbHNlLFxuICAgICAgdXNhZ2U6IEJ1ZmZlclVzYWdlLlZFUlRFWCB8IEJ1ZmZlclVzYWdlLkNPUFlfRFNUXG4gICAgfSk7XG4gICAgdGhpcy5fZHluYW1pY0J1ZmZlciA9IG5ldyBCdWZmZXIoe1xuICAgICAgZGF0YTogbmV3IEZsb2F0MzJBcnJheSgxKSxcbiAgICAgIGxhYmVsOiBcImR5bmFtaWMtcGFydGljbGUtYnVmZmVyXCIsXG4gICAgICBzaHJpbmtUb0ZpdDogZmFsc2UsXG4gICAgICB1c2FnZTogQnVmZmVyVXNhZ2UuVkVSVEVYIHwgQnVmZmVyVXNhZ2UuQ09QWV9EU1RcbiAgICB9KTtcbiAgICBmb3IgKGNvbnN0IGkgaW4gcHJvcGVydGllcykge1xuICAgICAgY29uc3QgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2ldO1xuICAgICAgY29uc3QgYXR0cmlidXRlSW5mbyA9IGdldEF0dHJpYnV0ZUluZm9Gcm9tRm9ybWF0KHByb3BlcnR5LmZvcm1hdCk7XG4gICAgICBpZiAocHJvcGVydHkuZHluYW1pYykge1xuICAgICAgICBnZW9tZXRyeS5hZGRBdHRyaWJ1dGUocHJvcGVydHkuYXR0cmlidXRlTmFtZSwge1xuICAgICAgICAgIGJ1ZmZlcjogdGhpcy5fZHluYW1pY0J1ZmZlcixcbiAgICAgICAgICBzdHJpZGU6IHRoaXMuX2R5bmFtaWNTdHJpZGUgKiA0LFxuICAgICAgICAgIG9mZnNldDogZHluYW1pY09mZnNldCAqIDQsXG4gICAgICAgICAgZm9ybWF0OiBwcm9wZXJ0eS5mb3JtYXRcbiAgICAgICAgfSk7XG4gICAgICAgIGR5bmFtaWNPZmZzZXQgKz0gYXR0cmlidXRlSW5mby5zaXplO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2VvbWV0cnkuYWRkQXR0cmlidXRlKHByb3BlcnR5LmF0dHJpYnV0ZU5hbWUsIHtcbiAgICAgICAgICBidWZmZXI6IHRoaXMuX3N0YXRpY0J1ZmZlcixcbiAgICAgICAgICBzdHJpZGU6IHRoaXMuX3N0YXRpY1N0cmlkZSAqIDQsXG4gICAgICAgICAgb2Zmc2V0OiBzdGF0aWNPZmZzZXQgKiA0LFxuICAgICAgICAgIGZvcm1hdDogcHJvcGVydHkuZm9ybWF0XG4gICAgICAgIH0pO1xuICAgICAgICBzdGF0aWNPZmZzZXQgKz0gYXR0cmlidXRlSW5mby5zaXplO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW9tZXRyeS5hZGRJbmRleCh0aGlzLmluZGV4QnVmZmVyKTtcbiAgICBjb25zdCB1cGxvYWRGdW5jdGlvbiA9IHRoaXMuZ2V0UGFydGljbGVVcGRhdGUocHJvcGVydGllcyk7XG4gICAgdGhpcy5fZHluYW1pY1VwbG9hZCA9IHVwbG9hZEZ1bmN0aW9uLmR5bmFtaWNVcGRhdGU7XG4gICAgdGhpcy5fc3RhdGljVXBsb2FkID0gdXBsb2FkRnVuY3Rpb24uc3RhdGljVXBkYXRlO1xuICAgIHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcbiAgfVxuICBnZXRQYXJ0aWNsZVVwZGF0ZShwcm9wZXJ0aWVzKSB7XG4gICAgY29uc3Qga2V5ID0gZ2V0UGFydGljbGVTeW5jS2V5KHByb3BlcnRpZXMpO1xuICAgIGlmICh0aGlzLl9nZW5lcmF0ZVBhcnRpY2xlVXBkYXRlQ2FjaGVba2V5XSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2dlbmVyYXRlUGFydGljbGVVcGRhdGVDYWNoZVtrZXldO1xuICAgIH1cbiAgICB0aGlzLl9nZW5lcmF0ZVBhcnRpY2xlVXBkYXRlQ2FjaGVba2V5XSA9IHRoaXMuZ2VuZXJhdGVQYXJ0aWNsZVVwZGF0ZShwcm9wZXJ0aWVzKTtcbiAgICByZXR1cm4gdGhpcy5fZ2VuZXJhdGVQYXJ0aWNsZVVwZGF0ZUNhY2hlW2tleV07XG4gIH1cbiAgZ2VuZXJhdGVQYXJ0aWNsZVVwZGF0ZShwcm9wZXJ0aWVzKSB7XG4gICAgcmV0dXJuIGdlbmVyYXRlUGFydGljbGVVcGRhdGVGdW5jdGlvbihwcm9wZXJ0aWVzKTtcbiAgfVxuICB1cGRhdGUocGFydGljbGVzLCB1cGxvYWRTdGF0aWMpIHtcbiAgICBpZiAocGFydGljbGVzLmxlbmd0aCA+IHRoaXMuX3NpemUpIHtcbiAgICAgIHVwbG9hZFN0YXRpYyA9IHRydWU7XG4gICAgICB0aGlzLl9zaXplID0gTWF0aC5tYXgocGFydGljbGVzLmxlbmd0aCwgdGhpcy5fc2l6ZSAqIDEuNSB8IDApO1xuICAgICAgdGhpcy5zdGF0aWNBdHRyaWJ1dGVCdWZmZXIgPSBuZXcgVmlld2FibGVCdWZmZXIodGhpcy5fc2l6ZSAqIHRoaXMuX3N0YXRpY1N0cmlkZSAqIDQgKiA0KTtcbiAgICAgIHRoaXMuZHluYW1pY0F0dHJpYnV0ZUJ1ZmZlciA9IG5ldyBWaWV3YWJsZUJ1ZmZlcih0aGlzLl9zaXplICogdGhpcy5fZHluYW1pY1N0cmlkZSAqIDQgKiA0KTtcbiAgICAgIHRoaXMuaW5kZXhCdWZmZXIgPSBjcmVhdGVJbmRpY2VzRm9yUXVhZHModGhpcy5fc2l6ZSk7XG4gICAgICB0aGlzLmdlb21ldHJ5LmluZGV4QnVmZmVyLnNldERhdGFXaXRoU2l6ZShcbiAgICAgICAgdGhpcy5pbmRleEJ1ZmZlcixcbiAgICAgICAgdGhpcy5pbmRleEJ1ZmZlci5ieXRlTGVuZ3RoLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBkeW5hbWljQXR0cmlidXRlQnVmZmVyID0gdGhpcy5keW5hbWljQXR0cmlidXRlQnVmZmVyO1xuICAgIHRoaXMuX2R5bmFtaWNVcGxvYWQocGFydGljbGVzLCBkeW5hbWljQXR0cmlidXRlQnVmZmVyLmZsb2F0MzJWaWV3LCBkeW5hbWljQXR0cmlidXRlQnVmZmVyLnVpbnQzMlZpZXcpO1xuICAgIHRoaXMuX2R5bmFtaWNCdWZmZXIuc2V0RGF0YVdpdGhTaXplKFxuICAgICAgdGhpcy5keW5hbWljQXR0cmlidXRlQnVmZmVyLmZsb2F0MzJWaWV3LFxuICAgICAgcGFydGljbGVzLmxlbmd0aCAqIHRoaXMuX2R5bmFtaWNTdHJpZGUgKiA0LFxuICAgICAgdHJ1ZVxuICAgICk7XG4gICAgaWYgKHVwbG9hZFN0YXRpYykge1xuICAgICAgY29uc3Qgc3RhdGljQXR0cmlidXRlQnVmZmVyID0gdGhpcy5zdGF0aWNBdHRyaWJ1dGVCdWZmZXI7XG4gICAgICB0aGlzLl9zdGF0aWNVcGxvYWQocGFydGljbGVzLCBzdGF0aWNBdHRyaWJ1dGVCdWZmZXIuZmxvYXQzMlZpZXcsIHN0YXRpY0F0dHJpYnV0ZUJ1ZmZlci51aW50MzJWaWV3KTtcbiAgICAgIHRoaXMuX3N0YXRpY0J1ZmZlci5zZXREYXRhV2l0aFNpemUoXG4gICAgICAgIHN0YXRpY0F0dHJpYnV0ZUJ1ZmZlci5mbG9hdDMyVmlldyxcbiAgICAgICAgcGFydGljbGVzLmxlbmd0aCAqIHRoaXMuX3N0YXRpY1N0cmlkZSAqIDQsXG4gICAgICAgIHRydWVcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fc3RhdGljQnVmZmVyLmRlc3Ryb3koKTtcbiAgICB0aGlzLl9keW5hbWljQnVmZmVyLmRlc3Ryb3koKTtcbiAgICB0aGlzLmdlb21ldHJ5LmRlc3Ryb3koKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0UGFydGljbGVTeW5jS2V5KHByb3BlcnRpZXMpIHtcbiAgY29uc3Qga2V5R2VuID0gW107XG4gIGZvciAoY29uc3Qga2V5IGluIHByb3BlcnRpZXMpIHtcbiAgICBjb25zdCBwcm9wZXJ0eSA9IHByb3BlcnRpZXNba2V5XTtcbiAgICBrZXlHZW4ucHVzaChrZXksIHByb3BlcnR5LmNvZGUsIHByb3BlcnR5LmR5bmFtaWMgPyBcImRcIiA6IFwic1wiKTtcbiAgfVxuICByZXR1cm4ga2V5R2VuLmpvaW4oXCJfXCIpO1xufVxuXG5leHBvcnQgeyBQYXJ0aWNsZUJ1ZmZlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGFydGljbGVCdWZmZXIubWpzLm1hcFxuIiwidmFyIHdnc2wgPSBcIlxcbnN0cnVjdCBQYXJ0aWNsZVVuaWZvcm1zIHtcXG4gIHVQcm9qZWN0aW9uTWF0cml4Om1hdDN4MzxmMzI+LFxcbiAgdVJlc29sdXRpb246dmVjMjxmMzI+LFxcbiAgdVJvdW5kUGl4ZWxzOmYzMixcXG59O1xcblxcbkBncm91cCgwKSBAYmluZGluZygwKSB2YXI8dW5pZm9ybT4gdW5pZm9ybXM6IFBhcnRpY2xlVW5pZm9ybXM7XFxuXFxuQGdyb3VwKDEpIEBiaW5kaW5nKDApIHZhciB1VGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xcbkBncm91cCgxKSBAYmluZGluZygxKSB2YXIgdVNhbXBsZXIgOiBzYW1wbGVyO1xcblxcbnN0cnVjdCBWU091dHB1dCB7XFxuICAgIEBidWlsdGluKHBvc2l0aW9uKSBwb3NpdGlvbjogdmVjNDxmMzI+LFxcbiAgICBAbG9jYXRpb24oMCkgdXYgOiB2ZWMyPGYzMj4sXFxuICAgIEBsb2NhdGlvbigxKSBjb2xvciA6IHZlYzQ8ZjMyPixcXG4gIH07XFxuQHZlcnRleFxcbmZuIG1haW5WZXJ0ZXgoXFxuICBAbG9jYXRpb24oMCkgYVZlcnRleDogdmVjMjxmMzI+LFxcbiAgQGxvY2F0aW9uKDEpIGFQb3NpdGlvbjogdmVjMjxmMzI+LFxcbiAgQGxvY2F0aW9uKDIpIGFVVjogdmVjMjxmMzI+LFxcbiAgQGxvY2F0aW9uKDMpIGFDb2xvcjogdmVjNDxmMzI+LFxcbiAgQGxvY2F0aW9uKDQpIGFSb3RhdGlvbjogZjMyLFxcbikgLT4gVlNPdXRwdXQge1xcbiAgXFxuICAgbGV0IHYgPSB2ZWMyKFxcbiAgICAgICBhVmVydGV4LnggKiBjb3MoYVJvdGF0aW9uKSAtIGFWZXJ0ZXgueSAqIHNpbihhUm90YXRpb24pLFxcbiAgICAgICBhVmVydGV4LnggKiBzaW4oYVJvdGF0aW9uKSArIGFWZXJ0ZXgueSAqIGNvcyhhUm90YXRpb24pXFxuICAgKSArIGFQb3NpdGlvbjtcXG5cXG4gICBsZXQgcG9zaXRpb24gPSB2ZWM0KCh1bmlmb3Jtcy51UHJvamVjdGlvbk1hdHJpeCAqIHZlYzModiwgMS4wKSkueHksIDAuMCwgMS4wKTtcXG5cXG4gIHJldHVybiBWU091dHB1dChcXG4gICBwb3NpdGlvbixcXG4gICBhVVYsXFxuICAgYUNvbG9yLFxcbiAgKTtcXG59XFxuXFxuQGZyYWdtZW50XFxuZm4gbWFpbkZyYWdtZW50KFxcbiAgQGxvY2F0aW9uKDApIHV2OiB2ZWMyPGYzMj4sXFxuICBAbG9jYXRpb24oMSkgY29sb3I6IHZlYzQ8ZjMyPixcXG4gIEBidWlsdGluKHBvc2l0aW9uKSBwb3NpdGlvbjogdmVjNDxmMzI+LFxcbikgLT4gQGxvY2F0aW9uKDApIHZlYzQ8ZjMyPiB7XFxuXFxuICAgIHZhciBzYW1wbGUgPSB0ZXh0dXJlU2FtcGxlKHVUZXh0dXJlLCB1U2FtcGxlciwgdXYpICogY29sb3I7XFxuICAgXFxuICAgIHJldHVybiBzYW1wbGU7XFxufVwiO1xuXG5leHBvcnQgeyB3Z3NsIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnRpY2xlcy53Z3NsLm1qcy5tYXBcbiIsImltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29sb3IvQ29sb3IubWpzJztcbmltcG9ydCB7IE1hdHJpeCB9IGZyb20gJy4uLy4uLy4uLy4uL21hdGhzL21hdHJpeC9NYXRyaXgubWpzJztcbmltcG9ydCB7IEdsUHJvZ3JhbSB9IGZyb20gJy4uLy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvZ2wvc2hhZGVyL0dsUHJvZ3JhbS5tanMnO1xuaW1wb3J0IHsgR3B1UHJvZ3JhbSB9IGZyb20gJy4uLy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvZ3B1L3NoYWRlci9HcHVQcm9ncmFtLm1qcyc7XG5pbXBvcnQgeyBTaGFkZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9zaGFkZXIvU2hhZGVyLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi4vLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvdGV4dHVyZS9UZXh0dXJlLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlU3R5bGUgfSBmcm9tICcuLi8uLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC90ZXh0dXJlL1RleHR1cmVTdHlsZS5tanMnO1xuaW1wb3J0IGZyYWdtZW50IGZyb20gJy4vcGFydGljbGVzLmZyYWcubWpzJztcbmltcG9ydCB2ZXJ0ZXggZnJvbSAnLi9wYXJ0aWNsZXMudmVydC5tanMnO1xuaW1wb3J0IHdnc2wgZnJvbSAnLi9wYXJ0aWNsZXMud2dzbC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIFBhcnRpY2xlU2hhZGVyIGV4dGVuZHMgU2hhZGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgZ2xQcm9ncmFtID0gR2xQcm9ncmFtLmZyb20oe1xuICAgICAgdmVydGV4LFxuICAgICAgZnJhZ21lbnRcbiAgICB9KTtcbiAgICBjb25zdCBncHVQcm9ncmFtID0gR3B1UHJvZ3JhbS5mcm9tKHtcbiAgICAgIGZyYWdtZW50OiB7XG4gICAgICAgIHNvdXJjZTogd2dzbCxcbiAgICAgICAgZW50cnlQb2ludDogXCJtYWluRnJhZ21lbnRcIlxuICAgICAgfSxcbiAgICAgIHZlcnRleDoge1xuICAgICAgICBzb3VyY2U6IHdnc2wsXG4gICAgICAgIGVudHJ5UG9pbnQ6IFwibWFpblZlcnRleFwiXG4gICAgICB9XG4gICAgfSk7XG4gICAgc3VwZXIoe1xuICAgICAgZ2xQcm9ncmFtLFxuICAgICAgZ3B1UHJvZ3JhbSxcbiAgICAgIHJlc291cmNlczoge1xuICAgICAgICAvLyB0aGlzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCB0aGUgdGV4dHVyZSBmcm9tIHRoZSBwYXJ0aWNsZSBjb250YWluZXJcbiAgICAgICAgdVRleHR1cmU6IFRleHR1cmUuV0hJVEUuc291cmNlLFxuICAgICAgICAvLyB0aGlzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCB0aGUgdGV4dHVyZSBzdHlsZSBmcm9tIHRoZSBwYXJ0aWNsZSBjb250YWluZXJcbiAgICAgICAgdVNhbXBsZXI6IG5ldyBUZXh0dXJlU3R5bGUoe30pLFxuICAgICAgICAvLyB0aGlzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCB0aGUgbG9jYWwgdW5pZm9ybXMgZnJvbSB0aGUgcGFydGljbGUgY29udGFpbmVyXG4gICAgICAgIHVuaWZvcm1zOiB7XG4gICAgICAgICAgdVRyYW5zbGF0aW9uTWF0cml4OiB7IHZhbHVlOiBuZXcgTWF0cml4KCksIHR5cGU6IFwibWF0M3gzPGYzMj5cIiB9LFxuICAgICAgICAgIHVDb2xvcjogeyB2YWx1ZTogbmV3IENvbG9yKDE2Nzc3MjE1KSwgdHlwZTogXCJ2ZWM0PGYzMj5cIiB9LFxuICAgICAgICAgIHVSb3VuZDogeyB2YWx1ZTogMSwgdHlwZTogXCJmMzJcIiB9LFxuICAgICAgICAgIHVSZXNvbHV0aW9uOiB7IHZhbHVlOiBbMCwgMF0sIHR5cGU6IFwidmVjMjxmMzI+XCIgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgUGFydGljbGVTaGFkZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBhcnRpY2xlU2hhZGVyLm1qcy5tYXBcbiIsInZhciB2ZXJ0ZXggPSBcImF0dHJpYnV0ZSB2ZWMyIGFWZXJ0ZXg7XFxuYXR0cmlidXRlIHZlYzIgYVVWO1xcbmF0dHJpYnV0ZSB2ZWM0IGFDb2xvcjtcXG5cXG5hdHRyaWJ1dGUgdmVjMiBhUG9zaXRpb247XFxuYXR0cmlidXRlIGZsb2F0IGFSb3RhdGlvbjtcXG5cXG51bmlmb3JtIG1hdDMgdVRyYW5zbGF0aW9uTWF0cml4O1xcbnVuaWZvcm0gZmxvYXQgdVJvdW5kO1xcbnVuaWZvcm0gdmVjMiB1UmVzb2x1dGlvbjtcXG51bmlmb3JtIHZlYzQgdUNvbG9yO1xcblxcbnZhcnlpbmcgdmVjMiB2VVY7XFxudmFyeWluZyB2ZWM0IHZDb2xvcjtcXG5cXG52ZWMyIHJvdW5kUGl4ZWxzKHZlYzIgcG9zaXRpb24sIHZlYzIgdGFyZ2V0U2l6ZSlcXG57ICAgICAgIFxcbiAgICByZXR1cm4gKGZsb29yKCgocG9zaXRpb24gKiAwLjUgKyAwLjUpICogdGFyZ2V0U2l6ZSkgKyAwLjUpIC8gdGFyZ2V0U2l6ZSkgKiAyLjAgLSAxLjA7XFxufVxcblxcbnZvaWQgbWFpbih2b2lkKXtcXG4gICAgZmxvYXQgY29zUm90YXRpb24gPSBjb3MoYVJvdGF0aW9uKTtcXG4gICAgZmxvYXQgc2luUm90YXRpb24gPSBzaW4oYVJvdGF0aW9uKTtcXG4gICAgZmxvYXQgeCA9IGFWZXJ0ZXgueCAqIGNvc1JvdGF0aW9uIC0gYVZlcnRleC55ICogc2luUm90YXRpb247XFxuICAgIGZsb2F0IHkgPSBhVmVydGV4LnggKiBzaW5Sb3RhdGlvbiArIGFWZXJ0ZXgueSAqIGNvc1JvdGF0aW9uO1xcblxcbiAgICB2ZWMyIHYgPSB2ZWMyKHgsIHkpO1xcbiAgICB2ID0gdiArIGFQb3NpdGlvbjtcXG5cXG4gICAgZ2xfUG9zaXRpb24gPSB2ZWM0KCh1VHJhbnNsYXRpb25NYXRyaXggKiB2ZWMzKHYsIDEuMCkpLnh5LCAwLjAsIDEuMCk7XFxuXFxuICAgIGlmKHVSb3VuZCA9PSAxLjApXFxuICAgIHtcXG4gICAgICAgIGdsX1Bvc2l0aW9uLnh5ID0gcm91bmRQaXhlbHMoZ2xfUG9zaXRpb24ueHksIHVSZXNvbHV0aW9uKTtcXG4gICAgfVxcblxcbiAgICB2VVYgPSBhVVY7XFxuICAgIHZDb2xvciA9IGFDb2xvciAqIHVDb2xvcjtcXG59XFxuXCI7XG5cbmV4cG9ydCB7IHZlcnRleCBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJ0aWNsZXMudmVydC5tanMubWFwXG4iLCJ2YXIgZnJhZ21lbnQgPSBcInZhcnlpbmcgdmVjMiB2VVY7XFxudmFyeWluZyB2ZWM0IHZDb2xvcjtcXG5cXG51bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG5cXG52b2lkIG1haW4odm9pZCl7XFxuICAgIHZlYzQgY29sb3IgPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZVVikgKiB2Q29sb3I7XFxuICAgIGdsX0ZyYWdDb2xvciA9IGNvbG9yO1xcbn1cIjtcblxuZXhwb3J0IHsgZnJhZ21lbnQgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFydGljbGVzLmZyYWcubWpzLm1hcFxuIiwiaW1wb3J0IHsgTWF0cml4IH0gZnJvbSAnLi4vLi4vLi4vbWF0aHMvbWF0cml4L01hdHJpeC5tanMnO1xuaW1wb3J0IHsgVW5pZm9ybUdyb3VwIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvc2hhZGVyL1VuaWZvcm1Hcm91cC5tanMnO1xuaW1wb3J0IHsgZ2V0QWRqdXN0ZWRCbGVuZE1vZGVCbGVuZCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3N0YXRlL2dldEFkanVzdGVkQmxlbmRNb2RlQmxlbmQubWpzJztcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvc3RhdGUvU3RhdGUubWpzJztcbmltcG9ydCB7IGNvbG9yMzJCaXRUb1VuaWZvcm0gfSBmcm9tICcuLi8uLi9ncmFwaGljcy9ncHUvY29sb3JUb1VuaWZvcm0ubWpzJztcbmltcG9ydCB7IFBhcnRpY2xlQnVmZmVyIH0gZnJvbSAnLi9QYXJ0aWNsZUJ1ZmZlci5tanMnO1xuaW1wb3J0IHsgUGFydGljbGVTaGFkZXIgfSBmcm9tICcuL3NoYWRlci9QYXJ0aWNsZVNoYWRlci5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIFBhcnRpY2xlQ29udGFpbmVyUGlwZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0gcmVuZGVyZXIgLSBUaGUgcmVuZGVyZXIgdGhpcyBzcHJpdGUgYmF0Y2ggd29ya3MgZm9yLlxuICAgKiBAcGFyYW0gYWRhcHRvclxuICAgKi9cbiAgY29uc3RydWN0b3IocmVuZGVyZXIsIGFkYXB0b3IpIHtcbiAgICB0aGlzLnN0YXRlID0gU3RhdGUuZm9yMmQoKTtcbiAgICB0aGlzLl9ncHVCdWZmZXJIYXNoID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbiAgICB0aGlzLl9kZXN0cm95UmVuZGVyYWJsZUJvdW5kID0gdGhpcy5kZXN0cm95UmVuZGVyYWJsZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMubG9jYWxVbmlmb3JtcyA9IG5ldyBVbmlmb3JtR3JvdXAoe1xuICAgICAgdVRyYW5zbGF0aW9uTWF0cml4OiB7IHZhbHVlOiBuZXcgTWF0cml4KCksIHR5cGU6IFwibWF0M3gzPGYzMj5cIiB9LFxuICAgICAgdUNvbG9yOiB7IHZhbHVlOiBuZXcgRmxvYXQzMkFycmF5KDQpLCB0eXBlOiBcInZlYzQ8ZjMyPlwiIH0sXG4gICAgICB1Um91bmQ6IHsgdmFsdWU6IDEsIHR5cGU6IFwiZjMyXCIgfSxcbiAgICAgIHVSZXNvbHV0aW9uOiB7IHZhbHVlOiBbMCwgMF0sIHR5cGU6IFwidmVjMjxmMzI+XCIgfVxuICAgIH0pO1xuICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLmFkYXB0b3IgPSBhZGFwdG9yO1xuICAgIHRoaXMuZGVmYXVsdFNoYWRlciA9IG5ldyBQYXJ0aWNsZVNoYWRlcigpO1xuICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5mb3IyZCgpO1xuICB9XG4gIHZhbGlkYXRlUmVuZGVyYWJsZShfcmVuZGVyYWJsZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBhZGRSZW5kZXJhYmxlKHJlbmRlcmFibGUsIGluc3RydWN0aW9uU2V0KSB7XG4gICAgdGhpcy5yZW5kZXJlci5yZW5kZXJQaXBlcy5iYXRjaC5icmVhayhpbnN0cnVjdGlvblNldCk7XG4gICAgaW5zdHJ1Y3Rpb25TZXQuYWRkKHJlbmRlcmFibGUpO1xuICB9XG4gIGdldEJ1ZmZlcnMocmVuZGVyYWJsZSkge1xuICAgIHJldHVybiB0aGlzLl9ncHVCdWZmZXJIYXNoW3JlbmRlcmFibGUudWlkXSB8fCB0aGlzLl9pbml0QnVmZmVyKHJlbmRlcmFibGUpO1xuICB9XG4gIF9pbml0QnVmZmVyKHJlbmRlcmFibGUpIHtcbiAgICB0aGlzLl9ncHVCdWZmZXJIYXNoW3JlbmRlcmFibGUudWlkXSA9IG5ldyBQYXJ0aWNsZUJ1ZmZlcih7XG4gICAgICBzaXplOiByZW5kZXJhYmxlLnBhcnRpY2xlQ2hpbGRyZW4ubGVuZ3RoLFxuICAgICAgcHJvcGVydGllczogcmVuZGVyYWJsZS5fcHJvcGVydGllc1xuICAgIH0pO1xuICAgIHJlbmRlcmFibGUub24oXCJkZXN0cm95ZWRcIiwgdGhpcy5fZGVzdHJveVJlbmRlcmFibGVCb3VuZCk7XG4gICAgcmV0dXJuIHRoaXMuX2dwdUJ1ZmZlckhhc2hbcmVuZGVyYWJsZS51aWRdO1xuICB9XG4gIHVwZGF0ZVJlbmRlcmFibGUoX3JlbmRlcmFibGUpIHtcbiAgfVxuICBkZXN0cm95UmVuZGVyYWJsZShyZW5kZXJhYmxlKSB7XG4gICAgY29uc3QgYnVmZmVyID0gdGhpcy5fZ3B1QnVmZmVySGFzaFtyZW5kZXJhYmxlLnVpZF07XG4gICAgYnVmZmVyLmRlc3Ryb3koKTtcbiAgICB0aGlzLl9ncHVCdWZmZXJIYXNoW3JlbmRlcmFibGUudWlkXSA9IG51bGw7XG4gICAgcmVuZGVyYWJsZS5vZmYoXCJkZXN0cm95ZWRcIiwgdGhpcy5fZGVzdHJveVJlbmRlcmFibGVCb3VuZCk7XG4gIH1cbiAgZXhlY3V0ZShjb250YWluZXIpIHtcbiAgICBjb25zdCBjaGlsZHJlbiA9IGNvbnRhaW5lci5wYXJ0aWNsZUNoaWxkcmVuO1xuICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xuICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMuZ2V0QnVmZmVycyhjb250YWluZXIpO1xuICAgIGNvbnRhaW5lci50ZXh0dXJlIHx8IChjb250YWluZXIudGV4dHVyZSA9IGNoaWxkcmVuWzBdLnRleHR1cmUpO1xuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICBidWZmZXIudXBkYXRlKGNoaWxkcmVuLCBjb250YWluZXIuX2NoaWxkcmVuRGlydHkpO1xuICAgIGNvbnRhaW5lci5fY2hpbGRyZW5EaXJ0eSA9IGZhbHNlO1xuICAgIHN0YXRlLmJsZW5kTW9kZSA9IGdldEFkanVzdGVkQmxlbmRNb2RlQmxlbmQoY29udGFpbmVyLmJsZW5kTW9kZSwgY29udGFpbmVyLnRleHR1cmUuX3NvdXJjZSk7XG4gICAgY29uc3QgdW5pZm9ybXMgPSB0aGlzLmxvY2FsVW5pZm9ybXMudW5pZm9ybXM7XG4gICAgY29uc3QgdHJhbnNmb3JtYXRpb25NYXRyaXggPSB1bmlmb3Jtcy51VHJhbnNsYXRpb25NYXRyaXg7XG4gICAgY29udGFpbmVyLndvcmxkVHJhbnNmb3JtLmNvcHlUbyh0cmFuc2Zvcm1hdGlvbk1hdHJpeCk7XG4gICAgdHJhbnNmb3JtYXRpb25NYXRyaXgucHJlcGVuZChyZW5kZXJlci5nbG9iYWxVbmlmb3Jtcy5nbG9iYWxVbmlmb3JtRGF0YS5wcm9qZWN0aW9uTWF0cml4KTtcbiAgICB1bmlmb3Jtcy51UmVzb2x1dGlvbiA9IHJlbmRlcmVyLmdsb2JhbFVuaWZvcm1zLmdsb2JhbFVuaWZvcm1EYXRhLnJlc29sdXRpb247XG4gICAgdW5pZm9ybXMudVJvdW5kID0gcmVuZGVyZXIuX3JvdW5kUGl4ZWxzIHwgY29udGFpbmVyLl9yb3VuZFBpeGVscztcbiAgICBjb2xvcjMyQml0VG9Vbmlmb3JtKFxuICAgICAgY29udGFpbmVyLmdyb3VwQ29sb3JBbHBoYSxcbiAgICAgIHVuaWZvcm1zLnVDb2xvcixcbiAgICAgIDBcbiAgICApO1xuICAgIHRoaXMuYWRhcHRvci5leGVjdXRlKHRoaXMsIGNvbnRhaW5lcik7XG4gIH1cbiAgLyoqIERlc3Ryb3lzIHRoZSBQYXJ0aWNsZVJlbmRlcmVyLiAqL1xuICBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmRlZmF1bHRTaGFkZXIpIHtcbiAgICAgIHRoaXMuZGVmYXVsdFNoYWRlci5kZXN0cm95KCk7XG4gICAgICB0aGlzLmRlZmF1bHRTaGFkZXIgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBQYXJ0aWNsZUNvbnRhaW5lclBpcGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBhcnRpY2xlQ29udGFpbmVyUGlwZS5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBHbFBhcnRpY2xlQ29udGFpbmVyQWRhcHRvciB9IGZyb20gJy4uL2dsL0dsUGFydGljbGVDb250YWluZXJBZGFwdG9yLm1qcyc7XG5pbXBvcnQgeyBQYXJ0aWNsZUNvbnRhaW5lclBpcGUgfSBmcm9tICcuL1BhcnRpY2xlQ29udGFpbmVyUGlwZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdsUGFydGljbGVDb250YWluZXJQaXBlIGV4dGVuZHMgUGFydGljbGVDb250YWluZXJQaXBlIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICBzdXBlcihyZW5kZXJlciwgbmV3IEdsUGFydGljbGVDb250YWluZXJBZGFwdG9yKCkpO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuR2xQYXJ0aWNsZUNvbnRhaW5lclBpcGUuZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFBpcGVzXG4gIF0sXG4gIG5hbWU6IFwicGFydGljbGVcIlxufTtcblxuZXhwb3J0IHsgR2xQYXJ0aWNsZUNvbnRhaW5lclBpcGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdsUGFydGljbGVDb250YWluZXJQaXBlLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY2xhc3MgR3B1UGFydGljbGVDb250YWluZXJBZGFwdG9yIHtcbiAgZXhlY3V0ZShwYXJ0aWNsZUNvbnRhaW5lclBvcCwgY29udGFpbmVyKSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBwYXJ0aWNsZUNvbnRhaW5lclBvcC5yZW5kZXJlcjtcbiAgICBjb25zdCBzaGFkZXIgPSBjb250YWluZXIuc2hhZGVyIHx8IHBhcnRpY2xlQ29udGFpbmVyUG9wLmRlZmF1bHRTaGFkZXI7XG4gICAgc2hhZGVyLmdyb3Vwc1swXSA9IHJlbmRlcmVyLnJlbmRlclBpcGVzLnVuaWZvcm1CYXRjaC5nZXRVbmlmb3JtQmluZEdyb3VwKHBhcnRpY2xlQ29udGFpbmVyUG9wLmxvY2FsVW5pZm9ybXMsIHRydWUpO1xuICAgIHNoYWRlci5ncm91cHNbMV0gPSByZW5kZXJlci50ZXh0dXJlLmdldFRleHR1cmVCaW5kR3JvdXAoY29udGFpbmVyLnRleHR1cmUpO1xuICAgIGNvbnN0IHN0YXRlID0gcGFydGljbGVDb250YWluZXJQb3Auc3RhdGU7XG4gICAgY29uc3QgYnVmZmVyID0gcGFydGljbGVDb250YWluZXJQb3AuZ2V0QnVmZmVycyhjb250YWluZXIpO1xuICAgIHJlbmRlcmVyLmVuY29kZXIuZHJhdyh7XG4gICAgICBnZW9tZXRyeTogYnVmZmVyLmdlb21ldHJ5LFxuICAgICAgc2hhZGVyOiBjb250YWluZXIuc2hhZGVyIHx8IHBhcnRpY2xlQ29udGFpbmVyUG9wLmRlZmF1bHRTaGFkZXIsXG4gICAgICBzdGF0ZSxcbiAgICAgIHNpemU6IGNvbnRhaW5lci5wYXJ0aWNsZUNoaWxkcmVuLmxlbmd0aCAqIDZcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgeyBHcHVQYXJ0aWNsZUNvbnRhaW5lckFkYXB0b3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdwdVBhcnRpY2xlQ29udGFpbmVyQWRhcHRvci5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBHcHVQYXJ0aWNsZUNvbnRhaW5lckFkYXB0b3IgfSBmcm9tICcuLi9ncHUvR3B1UGFydGljbGVDb250YWluZXJBZGFwdG9yLm1qcyc7XG5pbXBvcnQgeyBQYXJ0aWNsZUNvbnRhaW5lclBpcGUgfSBmcm9tICcuL1BhcnRpY2xlQ29udGFpbmVyUGlwZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEdwdVBhcnRpY2xlQ29udGFpbmVyUGlwZSBleHRlbmRzIFBhcnRpY2xlQ29udGFpbmVyUGlwZSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgc3VwZXIocmVuZGVyZXIsIG5ldyBHcHVQYXJ0aWNsZUNvbnRhaW5lckFkYXB0b3IoKSk7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5HcHVQYXJ0aWNsZUNvbnRhaW5lclBpcGUuZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHUFVQaXBlc1xuICBdLFxuICBuYW1lOiBcInBhcnRpY2xlXCJcbn07XG5cbmV4cG9ydCB7IEdwdVBhcnRpY2xlQ29udGFpbmVyUGlwZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R3B1UGFydGljbGVDb250YWluZXJQaXBlLm1qcy5tYXBcbiIsImltcG9ydCB7IGV4dGVuc2lvbnMgfSBmcm9tICcuLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IEdsUGFydGljbGVDb250YWluZXJQaXBlIH0gZnJvbSAnLi9zaGFyZWQvR2xQYXJ0aWNsZUNvbnRhaW5lclBpcGUubWpzJztcbmltcG9ydCB7IEdwdVBhcnRpY2xlQ29udGFpbmVyUGlwZSB9IGZyb20gJy4vc2hhcmVkL0dwdVBhcnRpY2xlQ29udGFpbmVyUGlwZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmV4dGVuc2lvbnMuYWRkKEdsUGFydGljbGVDb250YWluZXJQaXBlKTtcbmV4dGVuc2lvbnMuYWRkKEdwdVBhcnRpY2xlQ29udGFpbmVyUGlwZSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbml0Lm1qcy5tYXBcbiIsImltcG9ydCB7IGRlcHJlY2F0aW9uLCB2OF8wXzAgfSBmcm9tICcuLi8uLi91dGlscy9sb2dnaW5nL2RlcHJlY2F0aW9uLm1qcyc7XG5pbXBvcnQgeyBNZXNoR2VvbWV0cnkgfSBmcm9tICcuLi9tZXNoL3NoYXJlZC9NZXNoR2VvbWV0cnkubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBfUGxhbmVHZW9tZXRyeSA9IGNsYXNzIF9QbGFuZUdlb21ldHJ5IGV4dGVuZHMgTWVzaEdlb21ldHJ5IHtcbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIHN1cGVyKHt9KTtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3NbMF0gPz8ge307XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcIm51bWJlclwiKSB7XG4gICAgICBkZXByZWNhdGlvbih2OF8wXzAsIFwiUGxhbmVHZW9tZXRyeSBjb25zdHJ1Y3RvciBjaGFuZ2VkIHBsZWFzZSB1c2UgeyB3aWR0aCwgaGVpZ2h0LCB2ZXJ0aWNlc1gsIHZlcnRpY2VzWSB9IGluc3RlYWRcIik7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICB3aWR0aDogb3B0aW9ucyxcbiAgICAgICAgaGVpZ2h0OiBhcmdzWzFdLFxuICAgICAgICB2ZXJ0aWNlc1g6IGFyZ3NbMl0sXG4gICAgICAgIHZlcnRpY2VzWTogYXJnc1szXVxuICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy5idWlsZChvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogUmVmcmVzaGVzIHBsYW5lIGNvb3JkaW5hdGVzXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBiZSBhcHBsaWVkIHRvIHBsYW5lIGdlb21ldHJ5XG4gICAqL1xuICBidWlsZChvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHsgLi4uX1BsYW5lR2VvbWV0cnkuZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfTtcbiAgICB0aGlzLnZlcnRpY2VzWCA9IHRoaXMudmVydGljZXNYID8/IG9wdGlvbnMudmVydGljZXNYO1xuICAgIHRoaXMudmVydGljZXNZID0gdGhpcy52ZXJ0aWNlc1kgPz8gb3B0aW9ucy52ZXJ0aWNlc1k7XG4gICAgdGhpcy53aWR0aCA9IHRoaXMud2lkdGggPz8gb3B0aW9ucy53aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IHRoaXMuaGVpZ2h0ID8/IG9wdGlvbnMuaGVpZ2h0O1xuICAgIGNvbnN0IHRvdGFsID0gdGhpcy52ZXJ0aWNlc1ggKiB0aGlzLnZlcnRpY2VzWTtcbiAgICBjb25zdCB2ZXJ0cyA9IFtdO1xuICAgIGNvbnN0IHV2cyA9IFtdO1xuICAgIGNvbnN0IGluZGljZXMgPSBbXTtcbiAgICBjb25zdCB2ZXJ0aWNlc1ggPSB0aGlzLnZlcnRpY2VzWCAtIDE7XG4gICAgY29uc3QgdmVydGljZXNZID0gdGhpcy52ZXJ0aWNlc1kgLSAxO1xuICAgIGNvbnN0IHNpemVYID0gdGhpcy53aWR0aCAvIHZlcnRpY2VzWDtcbiAgICBjb25zdCBzaXplWSA9IHRoaXMuaGVpZ2h0IC8gdmVydGljZXNZO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG90YWw7IGkrKykge1xuICAgICAgY29uc3QgeCA9IGkgJSB0aGlzLnZlcnRpY2VzWDtcbiAgICAgIGNvbnN0IHkgPSBpIC8gdGhpcy52ZXJ0aWNlc1ggfCAwO1xuICAgICAgdmVydHMucHVzaCh4ICogc2l6ZVgsIHkgKiBzaXplWSk7XG4gICAgICB1dnMucHVzaCh4IC8gdmVydGljZXNYLCB5IC8gdmVydGljZXNZKTtcbiAgICB9XG4gICAgY29uc3QgdG90YWxTdWIgPSB2ZXJ0aWNlc1ggKiB2ZXJ0aWNlc1k7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b3RhbFN1YjsgaSsrKSB7XG4gICAgICBjb25zdCB4cG9zID0gaSAlIHZlcnRpY2VzWDtcbiAgICAgIGNvbnN0IHlwb3MgPSBpIC8gdmVydGljZXNYIHwgMDtcbiAgICAgIGNvbnN0IHZhbHVlID0geXBvcyAqIHRoaXMudmVydGljZXNYICsgeHBvcztcbiAgICAgIGNvbnN0IHZhbHVlMiA9IHlwb3MgKiB0aGlzLnZlcnRpY2VzWCArIHhwb3MgKyAxO1xuICAgICAgY29uc3QgdmFsdWUzID0gKHlwb3MgKyAxKSAqIHRoaXMudmVydGljZXNYICsgeHBvcztcbiAgICAgIGNvbnN0IHZhbHVlNCA9ICh5cG9zICsgMSkgKiB0aGlzLnZlcnRpY2VzWCArIHhwb3MgKyAxO1xuICAgICAgaW5kaWNlcy5wdXNoKFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdmFsdWUyLFxuICAgICAgICB2YWx1ZTMsXG4gICAgICAgIHZhbHVlMixcbiAgICAgICAgdmFsdWU0LFxuICAgICAgICB2YWx1ZTNcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuYnVmZmVyc1swXS5kYXRhID0gbmV3IEZsb2F0MzJBcnJheSh2ZXJ0cyk7XG4gICAgdGhpcy5idWZmZXJzWzFdLmRhdGEgPSBuZXcgRmxvYXQzMkFycmF5KHV2cyk7XG4gICAgdGhpcy5pbmRleEJ1ZmZlci5kYXRhID0gbmV3IFVpbnQzMkFycmF5KGluZGljZXMpO1xuICAgIHRoaXMuYnVmZmVyc1swXS51cGRhdGUoKTtcbiAgICB0aGlzLmJ1ZmZlcnNbMV0udXBkYXRlKCk7XG4gICAgdGhpcy5pbmRleEJ1ZmZlci51cGRhdGUoKTtcbiAgfVxufTtcbl9QbGFuZUdlb21ldHJ5LmRlZmF1bHRPcHRpb25zID0ge1xuICB3aWR0aDogMTAwLFxuICBoZWlnaHQ6IDEwMCxcbiAgdmVydGljZXNYOiAxMCxcbiAgdmVydGljZXNZOiAxMFxufTtcbmxldCBQbGFuZUdlb21ldHJ5ID0gX1BsYW5lR2VvbWV0cnk7XG5cbmV4cG9ydCB7IFBsYW5lR2VvbWV0cnkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBsYW5lR2VvbWV0cnkubWpzLm1hcFxuIiwiaW1wb3J0IHsgUGxhbmVHZW9tZXRyeSB9IGZyb20gJy4uL21lc2gtcGxhbmUvUGxhbmVHZW9tZXRyeS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IF9OaW5lU2xpY2VHZW9tZXRyeSA9IGNsYXNzIF9OaW5lU2xpY2VHZW9tZXRyeSBleHRlbmRzIFBsYW5lR2VvbWV0cnkge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICBvcHRpb25zID0geyAuLi5fTmluZVNsaWNlR2VvbWV0cnkuZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfTtcbiAgICBzdXBlcih7XG4gICAgICB3aWR0aDogb3B0aW9ucy53aWR0aCxcbiAgICAgIGhlaWdodDogb3B0aW9ucy5oZWlnaHQsXG4gICAgICB2ZXJ0aWNlc1g6IDQsXG4gICAgICB2ZXJ0aWNlc1k6IDRcbiAgICB9KTtcbiAgICB0aGlzLnVwZGF0ZShvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgTmluZVNsaWNlR2VvbWV0cnkgd2l0aCB0aGUgb3B0aW9ucy5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvZiB0aGUgTmluZVNsaWNlR2VvbWV0cnkuXG4gICAqL1xuICB1cGRhdGUob3B0aW9ucykge1xuICAgIHRoaXMud2lkdGggPSBvcHRpb25zLndpZHRoID8/IHRoaXMud2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBvcHRpb25zLmhlaWdodCA/PyB0aGlzLmhlaWdodDtcbiAgICB0aGlzLl9vcmlnaW5hbFdpZHRoID0gb3B0aW9ucy5vcmlnaW5hbFdpZHRoID8/IHRoaXMuX29yaWdpbmFsV2lkdGg7XG4gICAgdGhpcy5fb3JpZ2luYWxIZWlnaHQgPSBvcHRpb25zLm9yaWdpbmFsSGVpZ2h0ID8/IHRoaXMuX29yaWdpbmFsSGVpZ2h0O1xuICAgIHRoaXMuX2xlZnRXaWR0aCA9IG9wdGlvbnMubGVmdFdpZHRoID8/IHRoaXMuX2xlZnRXaWR0aDtcbiAgICB0aGlzLl9yaWdodFdpZHRoID0gb3B0aW9ucy5yaWdodFdpZHRoID8/IHRoaXMuX3JpZ2h0V2lkdGg7XG4gICAgdGhpcy5fdG9wSGVpZ2h0ID0gb3B0aW9ucy50b3BIZWlnaHQgPz8gdGhpcy5fdG9wSGVpZ2h0O1xuICAgIHRoaXMuX2JvdHRvbUhlaWdodCA9IG9wdGlvbnMuYm90dG9tSGVpZ2h0ID8/IHRoaXMuX2JvdHRvbUhlaWdodDtcbiAgICB0aGlzLnVwZGF0ZVV2cygpO1xuICAgIHRoaXMudXBkYXRlUG9zaXRpb25zKCk7XG4gIH1cbiAgLyoqIFVwZGF0ZXMgdGhlIHBvc2l0aW9ucyBvZiB0aGUgdmVydGljZXMuICovXG4gIHVwZGF0ZVBvc2l0aW9ucygpIHtcbiAgICBjb25zdCBwb3NpdGlvbnMgPSB0aGlzLnBvc2l0aW9ucztcbiAgICBjb25zdCB3ID0gdGhpcy5fbGVmdFdpZHRoICsgdGhpcy5fcmlnaHRXaWR0aDtcbiAgICBjb25zdCBzY2FsZVcgPSB0aGlzLndpZHRoID4gdyA/IDEgOiB0aGlzLndpZHRoIC8gdztcbiAgICBjb25zdCBoID0gdGhpcy5fdG9wSGVpZ2h0ICsgdGhpcy5fYm90dG9tSGVpZ2h0O1xuICAgIGNvbnN0IHNjYWxlSCA9IHRoaXMuaGVpZ2h0ID4gaCA/IDEgOiB0aGlzLmhlaWdodCAvIGg7XG4gICAgY29uc3Qgc2NhbGUgPSBNYXRoLm1pbihzY2FsZVcsIHNjYWxlSCk7XG4gICAgcG9zaXRpb25zWzldID0gcG9zaXRpb25zWzExXSA9IHBvc2l0aW9uc1sxM10gPSBwb3NpdGlvbnNbMTVdID0gdGhpcy5fdG9wSGVpZ2h0ICogc2NhbGU7XG4gICAgcG9zaXRpb25zWzE3XSA9IHBvc2l0aW9uc1sxOV0gPSBwb3NpdGlvbnNbMjFdID0gcG9zaXRpb25zWzIzXSA9IHRoaXMuaGVpZ2h0IC0gdGhpcy5fYm90dG9tSGVpZ2h0ICogc2NhbGU7XG4gICAgcG9zaXRpb25zWzI1XSA9IHBvc2l0aW9uc1syN10gPSBwb3NpdGlvbnNbMjldID0gcG9zaXRpb25zWzMxXSA9IHRoaXMuaGVpZ2h0O1xuICAgIHBvc2l0aW9uc1syXSA9IHBvc2l0aW9uc1sxMF0gPSBwb3NpdGlvbnNbMThdID0gcG9zaXRpb25zWzI2XSA9IHRoaXMuX2xlZnRXaWR0aCAqIHNjYWxlO1xuICAgIHBvc2l0aW9uc1s0XSA9IHBvc2l0aW9uc1sxMl0gPSBwb3NpdGlvbnNbMjBdID0gcG9zaXRpb25zWzI4XSA9IHRoaXMud2lkdGggLSB0aGlzLl9yaWdodFdpZHRoICogc2NhbGU7XG4gICAgcG9zaXRpb25zWzZdID0gcG9zaXRpb25zWzE0XSA9IHBvc2l0aW9uc1syMl0gPSBwb3NpdGlvbnNbMzBdID0gdGhpcy53aWR0aDtcbiAgICB0aGlzLmdldEJ1ZmZlcihcImFQb3NpdGlvblwiKS51cGRhdGUoKTtcbiAgfVxuICAvKiogVXBkYXRlcyB0aGUgVVZzIG9mIHRoZSB2ZXJ0aWNlcy4gKi9cbiAgdXBkYXRlVXZzKCkge1xuICAgIGNvbnN0IHV2cyA9IHRoaXMudXZzO1xuICAgIHV2c1swXSA9IHV2c1s4XSA9IHV2c1sxNl0gPSB1dnNbMjRdID0gMDtcbiAgICB1dnNbMV0gPSB1dnNbM10gPSB1dnNbNV0gPSB1dnNbN10gPSAwO1xuICAgIHV2c1s2XSA9IHV2c1sxNF0gPSB1dnNbMjJdID0gdXZzWzMwXSA9IDE7XG4gICAgdXZzWzI1XSA9IHV2c1syN10gPSB1dnNbMjldID0gdXZzWzMxXSA9IDE7XG4gICAgY29uc3QgX3V2dyA9IDEgLyB0aGlzLl9vcmlnaW5hbFdpZHRoO1xuICAgIGNvbnN0IF91dmggPSAxIC8gdGhpcy5fb3JpZ2luYWxIZWlnaHQ7XG4gICAgdXZzWzJdID0gdXZzWzEwXSA9IHV2c1sxOF0gPSB1dnNbMjZdID0gX3V2dyAqIHRoaXMuX2xlZnRXaWR0aDtcbiAgICB1dnNbOV0gPSB1dnNbMTFdID0gdXZzWzEzXSA9IHV2c1sxNV0gPSBfdXZoICogdGhpcy5fdG9wSGVpZ2h0O1xuICAgIHV2c1s0XSA9IHV2c1sxMl0gPSB1dnNbMjBdID0gdXZzWzI4XSA9IDEgLSBfdXZ3ICogdGhpcy5fcmlnaHRXaWR0aDtcbiAgICB1dnNbMTddID0gdXZzWzE5XSA9IHV2c1syMV0gPSB1dnNbMjNdID0gMSAtIF91dmggKiB0aGlzLl9ib3R0b21IZWlnaHQ7XG4gICAgdGhpcy5nZXRCdWZmZXIoXCJhVVZcIikudXBkYXRlKCk7XG4gIH1cbn07XG4vKiogVGhlIGRlZmF1bHQgb3B0aW9ucyBmb3IgdGhlIE5pbmVTbGljZUdlb21ldHJ5LiAqL1xuX05pbmVTbGljZUdlb21ldHJ5LmRlZmF1bHRPcHRpb25zID0ge1xuICAvKiogVGhlIHdpZHRoIG9mIHRoZSBOaW5lU2xpY2VQbGFuZSwgc2V0dGluZyB0aGlzIHdpbGwgYWN0dWFsbHkgbW9kaWZ5IHRoZSB2ZXJ0aWNlcyBhbmQgVVYncyBvZiB0aGlzIHBsYW5lLiAqL1xuICB3aWR0aDogMTAwLFxuICAvKiogVGhlIGhlaWdodCBvZiB0aGUgTmluZVNsaWNlUGxhbmUsIHNldHRpbmcgdGhpcyB3aWxsIGFjdHVhbGx5IG1vZGlmeSB0aGUgdmVydGljZXMgYW5kIFVWJ3Mgb2YgdGhpcyBwbGFuZS4gKi9cbiAgaGVpZ2h0OiAxMDAsXG4gIC8qKiBUaGUgd2lkdGggb2YgdGhlIGxlZnQgY29sdW1uLiAqL1xuICBsZWZ0V2lkdGg6IDEwLFxuICAvKiogVGhlIGhlaWdodCBvZiB0aGUgdG9wIHJvdy4gKi9cbiAgdG9wSGVpZ2h0OiAxMCxcbiAgLyoqIFRoZSB3aWR0aCBvZiB0aGUgcmlnaHQgY29sdW1uLiAqL1xuICByaWdodFdpZHRoOiAxMCxcbiAgLyoqIFRoZSBoZWlnaHQgb2YgdGhlIGJvdHRvbSByb3cuICovXG4gIGJvdHRvbUhlaWdodDogMTAsXG4gIC8qKiBUaGUgb3JpZ2luYWwgd2lkdGggb2YgdGhlIHRleHR1cmUgKi9cbiAgb3JpZ2luYWxXaWR0aDogMTAwLFxuICAvKiogVGhlIG9yaWdpbmFsIGhlaWdodCBvZiB0aGUgdGV4dHVyZSAqL1xuICBvcmlnaW5hbEhlaWdodDogMTAwXG59O1xubGV0IE5pbmVTbGljZUdlb21ldHJ5ID0gX05pbmVTbGljZUdlb21ldHJ5O1xuXG5leHBvcnQgeyBOaW5lU2xpY2VHZW9tZXRyeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TmluZVNsaWNlR2VvbWV0cnkubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgQmlnUG9vbCB9IGZyb20gJy4uLy4uL3V0aWxzL3Bvb2wvUG9vbEdyb3VwLm1qcyc7XG5pbXBvcnQgeyBCYXRjaGFibGVNZXNoIH0gZnJvbSAnLi4vbWVzaC9zaGFyZWQvQmF0Y2hhYmxlTWVzaC5tanMnO1xuaW1wb3J0IHsgTmluZVNsaWNlR2VvbWV0cnkgfSBmcm9tICcuL05pbmVTbGljZUdlb21ldHJ5Lm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgTmluZVNsaWNlU3ByaXRlUGlwZSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fZ3B1U3ByaXRlSGFzaCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQm91bmQgPSB0aGlzLmRlc3Ryb3lSZW5kZXJhYmxlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLl9yZW5kZXJlci5yZW5kZXJhYmxlR0MuYWRkTWFuYWdlZEhhc2godGhpcywgXCJfZ3B1U3ByaXRlSGFzaFwiKTtcbiAgfVxuICBhZGRSZW5kZXJhYmxlKHNwcml0ZSwgaW5zdHJ1Y3Rpb25TZXQpIHtcbiAgICBjb25zdCBncHVTcHJpdGUgPSB0aGlzLl9nZXRHcHVTcHJpdGUoc3ByaXRlKTtcbiAgICBpZiAoc3ByaXRlLmRpZFZpZXdVcGRhdGUpXG4gICAgICB0aGlzLl91cGRhdGVCYXRjaGFibGVTcHJpdGUoc3ByaXRlLCBncHVTcHJpdGUpO1xuICAgIHRoaXMuX3JlbmRlcmVyLnJlbmRlclBpcGVzLmJhdGNoLmFkZFRvQmF0Y2goZ3B1U3ByaXRlLCBpbnN0cnVjdGlvblNldCk7XG4gIH1cbiAgdXBkYXRlUmVuZGVyYWJsZShzcHJpdGUpIHtcbiAgICBjb25zdCBncHVTcHJpdGUgPSB0aGlzLl9ncHVTcHJpdGVIYXNoW3Nwcml0ZS51aWRdO1xuICAgIGlmIChzcHJpdGUuZGlkVmlld1VwZGF0ZSlcbiAgICAgIHRoaXMuX3VwZGF0ZUJhdGNoYWJsZVNwcml0ZShzcHJpdGUsIGdwdVNwcml0ZSk7XG4gICAgZ3B1U3ByaXRlLl9iYXRjaGVyLnVwZGF0ZUVsZW1lbnQoZ3B1U3ByaXRlKTtcbiAgfVxuICB2YWxpZGF0ZVJlbmRlcmFibGUoc3ByaXRlKSB7XG4gICAgY29uc3QgdGV4dHVyZSA9IHNwcml0ZS5fdGV4dHVyZTtcbiAgICBjb25zdCBncHVTcHJpdGUgPSB0aGlzLl9nZXRHcHVTcHJpdGUoc3ByaXRlKTtcbiAgICBpZiAoZ3B1U3ByaXRlLnRleHR1cmUuX3NvdXJjZSAhPT0gdGV4dHVyZS5fc291cmNlKSB7XG4gICAgICByZXR1cm4gIWdwdVNwcml0ZS5fYmF0Y2hlci5jaGVja0FuZFVwZGF0ZVRleHR1cmUoZ3B1U3ByaXRlLCB0ZXh0dXJlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGRlc3Ryb3lSZW5kZXJhYmxlKHNwcml0ZSkge1xuICAgIGNvbnN0IGJhdGNoYWJsZU1lc2ggPSB0aGlzLl9ncHVTcHJpdGVIYXNoW3Nwcml0ZS51aWRdO1xuICAgIEJpZ1Bvb2wucmV0dXJuKGJhdGNoYWJsZU1lc2guZ2VvbWV0cnkpO1xuICAgIEJpZ1Bvb2wucmV0dXJuKGJhdGNoYWJsZU1lc2gpO1xuICAgIHRoaXMuX2dwdVNwcml0ZUhhc2hbc3ByaXRlLnVpZF0gPSBudWxsO1xuICAgIHNwcml0ZS5vZmYoXCJkZXN0cm95ZWRcIiwgdGhpcy5fZGVzdHJveVJlbmRlcmFibGVCb3VuZCk7XG4gIH1cbiAgX3VwZGF0ZUJhdGNoYWJsZVNwcml0ZShzcHJpdGUsIGJhdGNoYWJsZVNwcml0ZSkge1xuICAgIGJhdGNoYWJsZVNwcml0ZS5nZW9tZXRyeS51cGRhdGUoc3ByaXRlKTtcbiAgICBiYXRjaGFibGVTcHJpdGUudGV4dHVyZSA9IHNwcml0ZS5fdGV4dHVyZTtcbiAgfVxuICBfZ2V0R3B1U3ByaXRlKHNwcml0ZSkge1xuICAgIHJldHVybiB0aGlzLl9ncHVTcHJpdGVIYXNoW3Nwcml0ZS51aWRdIHx8IHRoaXMuX2luaXRHUFVTcHJpdGUoc3ByaXRlKTtcbiAgfVxuICBfaW5pdEdQVVNwcml0ZShzcHJpdGUpIHtcbiAgICBjb25zdCBiYXRjaGFibGVNZXNoID0gQmlnUG9vbC5nZXQoQmF0Y2hhYmxlTWVzaCk7XG4gICAgYmF0Y2hhYmxlTWVzaC5nZW9tZXRyeSA9IEJpZ1Bvb2wuZ2V0KE5pbmVTbGljZUdlb21ldHJ5KTtcbiAgICBiYXRjaGFibGVNZXNoLnJlbmRlcmFibGUgPSBzcHJpdGU7XG4gICAgYmF0Y2hhYmxlTWVzaC50cmFuc2Zvcm0gPSBzcHJpdGUuZ3JvdXBUcmFuc2Zvcm07XG4gICAgYmF0Y2hhYmxlTWVzaC50ZXh0dXJlID0gc3ByaXRlLl90ZXh0dXJlO1xuICAgIGJhdGNoYWJsZU1lc2gucm91bmRQaXhlbHMgPSB0aGlzLl9yZW5kZXJlci5fcm91bmRQaXhlbHMgfCBzcHJpdGUuX3JvdW5kUGl4ZWxzO1xuICAgIHRoaXMuX2dwdVNwcml0ZUhhc2hbc3ByaXRlLnVpZF0gPSBiYXRjaGFibGVNZXNoO1xuICAgIGlmICghc3ByaXRlLmRpZFZpZXdVcGRhdGUpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZUJhdGNoYWJsZVNwcml0ZShzcHJpdGUsIGJhdGNoYWJsZU1lc2gpO1xuICAgIH1cbiAgICBzcHJpdGUub24oXCJkZXN0cm95ZWRcIiwgdGhpcy5fZGVzdHJveVJlbmRlcmFibGVCb3VuZCk7XG4gICAgcmV0dXJuIGJhdGNoYWJsZU1lc2g7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5fZ3B1U3ByaXRlSGFzaCkge1xuICAgICAgY29uc3QgYmF0Y2hhYmxlTWVzaCA9IHRoaXMuX2dwdVNwcml0ZUhhc2hbaV07XG4gICAgICBiYXRjaGFibGVNZXNoLmdlb21ldHJ5LmRlc3Ryb3koKTtcbiAgICB9XG4gICAgdGhpcy5fZ3B1U3ByaXRlSGFzaCA9IG51bGw7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuTmluZVNsaWNlU3ByaXRlUGlwZS5leHRlbnNpb24gPSB7XG4gIHR5cGU6IFtcbiAgICBFeHRlbnNpb25UeXBlLldlYkdMUGlwZXMsXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHUFVQaXBlcyxcbiAgICBFeHRlbnNpb25UeXBlLkNhbnZhc1BpcGVzXG4gIF0sXG4gIG5hbWU6IFwibmluZVNsaWNlU3ByaXRlXCJcbn07XG5cbmV4cG9ydCB7IE5pbmVTbGljZVNwcml0ZVBpcGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5pbmVTbGljZVNwcml0ZVBpcGUubWpzLm1hcFxuIiwiaW1wb3J0IHsgZXh0ZW5zaW9ucyB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgTmluZVNsaWNlU3ByaXRlUGlwZSB9IGZyb20gJy4vTmluZVNsaWNlU3ByaXRlUGlwZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmV4dGVuc2lvbnMuYWRkKE5pbmVTbGljZVNwcml0ZVBpcGUpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5pdC5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IHRpbGluZ0JpdCA9IHtcbiAgbmFtZTogXCJ0aWxpbmctYml0XCIsXG4gIHZlcnRleDoge1xuICAgIGhlYWRlcjogKFxuICAgICAgLyogd2dzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgc3RydWN0IFRpbGluZ1VuaWZvcm1zIHtcbiAgICAgICAgICAgICAgICB1TWFwQ29vcmQ6bWF0M3gzPGYzMj4sXG4gICAgICAgICAgICAgICAgdUNsYW1wRnJhbWU6dmVjNDxmMzI+LFxuICAgICAgICAgICAgICAgIHVDbGFtcE9mZnNldDp2ZWMyPGYzMj4sXG4gICAgICAgICAgICAgICAgdVRleHR1cmVUcmFuc2Zvcm06bWF0M3gzPGYzMj4sXG4gICAgICAgICAgICAgICAgdVNpemVBbmNob3I6dmVjNDxmMzI+XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBAZ3JvdXAoMikgQGJpbmRpbmcoMCkgdmFyPHVuaWZvcm0+IHRpbGluZ1VuaWZvcm1zOiBUaWxpbmdVbmlmb3JtcztcbiAgICAgICAgICAgIEBncm91cCgyKSBAYmluZGluZygxKSB2YXIgdVRleHR1cmU6IHRleHR1cmVfMmQ8ZjMyPjtcbiAgICAgICAgICAgIEBncm91cCgyKSBAYmluZGluZygyKSB2YXIgdVNhbXBsZXI6IHNhbXBsZXI7XG4gICAgICAgIGBcbiAgICApLFxuICAgIG1haW46IChcbiAgICAgIC8qIHdnc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIHV2ID0gKHRpbGluZ1VuaWZvcm1zLnVUZXh0dXJlVHJhbnNmb3JtICogdmVjMyh1diwgMS4wKSkueHk7XG5cbiAgICAgICAgICAgIHBvc2l0aW9uID0gKHBvc2l0aW9uIC0gdGlsaW5nVW5pZm9ybXMudVNpemVBbmNob3IuencpICogdGlsaW5nVW5pZm9ybXMudVNpemVBbmNob3IueHk7XG4gICAgICAgIGBcbiAgICApXG4gIH0sXG4gIGZyYWdtZW50OiB7XG4gICAgaGVhZGVyOiAoXG4gICAgICAvKiB3Z3NsICovXG4gICAgICBgXG4gICAgICAgICAgICBzdHJ1Y3QgVGlsaW5nVW5pZm9ybXMge1xuICAgICAgICAgICAgICAgIHVNYXBDb29yZDptYXQzeDM8ZjMyPixcbiAgICAgICAgICAgICAgICB1Q2xhbXBGcmFtZTp2ZWM0PGYzMj4sXG4gICAgICAgICAgICAgICAgdUNsYW1wT2Zmc2V0OnZlYzI8ZjMyPixcbiAgICAgICAgICAgICAgICB1VGV4dHVyZVRyYW5zZm9ybTptYXQzeDM8ZjMyPixcbiAgICAgICAgICAgICAgICB1U2l6ZUFuY2hvcjp2ZWM0PGYzMj5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIEBncm91cCgyKSBAYmluZGluZygwKSB2YXI8dW5pZm9ybT4gdGlsaW5nVW5pZm9ybXM6IFRpbGluZ1VuaWZvcm1zO1xuICAgICAgICAgICAgQGdyb3VwKDIpIEBiaW5kaW5nKDEpIHZhciB1VGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xuICAgICAgICAgICAgQGdyb3VwKDIpIEBiaW5kaW5nKDIpIHZhciB1U2FtcGxlcjogc2FtcGxlcjtcbiAgICAgICAgYFxuICAgICksXG4gICAgbWFpbjogKFxuICAgICAgLyogd2dzbCAqL1xuICAgICAgYFxuXG4gICAgICAgICAgICB2YXIgY29vcmQgPSB2VVYgKyBjZWlsKHRpbGluZ1VuaWZvcm1zLnVDbGFtcE9mZnNldCAtIHZVVik7XG4gICAgICAgICAgICBjb29yZCA9ICh0aWxpbmdVbmlmb3Jtcy51TWFwQ29vcmQgKiB2ZWMzKGNvb3JkLCAxLjApKS54eTtcbiAgICAgICAgICAgIHZhciB1bmNsYW1wZWQgPSBjb29yZDtcbiAgICAgICAgICAgIGNvb3JkID0gY2xhbXAoY29vcmQsIHRpbGluZ1VuaWZvcm1zLnVDbGFtcEZyYW1lLnh5LCB0aWxpbmdVbmlmb3Jtcy51Q2xhbXBGcmFtZS56dyk7XG5cbiAgICAgICAgICAgIHZhciBiaWFzID0gMC47XG5cbiAgICAgICAgICAgIGlmKHVuY2xhbXBlZC54ID09IGNvb3JkLnggJiYgdW5jbGFtcGVkLnkgPT0gY29vcmQueSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBiaWFzID0gLTMyLjtcbiAgICAgICAgICAgIH0gXG5cbiAgICAgICAgICAgIG91dENvbG9yID0gdGV4dHVyZVNhbXBsZUJpYXModVRleHR1cmUsIHVTYW1wbGVyLCBjb29yZCwgYmlhcyk7XG4gICAgICAgIGBcbiAgICApXG4gIH1cbn07XG5jb25zdCB0aWxpbmdCaXRHbCA9IHtcbiAgbmFtZTogXCJ0aWxpbmctYml0XCIsXG4gIHZlcnRleDoge1xuICAgIGhlYWRlcjogKFxuICAgICAgLyogZ2xzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgdW5pZm9ybSBtYXQzIHVUZXh0dXJlVHJhbnNmb3JtO1xuICAgICAgICAgICAgdW5pZm9ybSB2ZWM0IHVTaXplQW5jaG9yO1xuICAgICAgICBcbiAgICAgICAgYFxuICAgICksXG4gICAgbWFpbjogKFxuICAgICAgLyogZ2xzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgdXYgPSAodVRleHR1cmVUcmFuc2Zvcm0gKiB2ZWMzKGFVViwgMS4wKSkueHk7XG5cbiAgICAgICAgICAgIHBvc2l0aW9uID0gKHBvc2l0aW9uIC0gdVNpemVBbmNob3IuencpICogdVNpemVBbmNob3IueHk7XG4gICAgICAgIGBcbiAgICApXG4gIH0sXG4gIGZyYWdtZW50OiB7XG4gICAgaGVhZGVyOiAoXG4gICAgICAvKiBnbHNsICovXG4gICAgICBgXG4gICAgICAgICAgICB1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcbiAgICAgICAgICAgIHVuaWZvcm0gbWF0MyB1TWFwQ29vcmQ7XG4gICAgICAgICAgICB1bmlmb3JtIHZlYzQgdUNsYW1wRnJhbWU7XG4gICAgICAgICAgICB1bmlmb3JtIHZlYzIgdUNsYW1wT2Zmc2V0O1xuICAgICAgICBgXG4gICAgKSxcbiAgICBtYWluOiAoXG4gICAgICAvKiBnbHNsICovXG4gICAgICBgXG5cbiAgICAgICAgdmVjMiBjb29yZCA9IHZVViArIGNlaWwodUNsYW1wT2Zmc2V0IC0gdlVWKTtcbiAgICAgICAgY29vcmQgPSAodU1hcENvb3JkICogdmVjMyhjb29yZCwgMS4wKSkueHk7XG4gICAgICAgIHZlYzIgdW5jbGFtcGVkID0gY29vcmQ7XG4gICAgICAgIGNvb3JkID0gY2xhbXAoY29vcmQsIHVDbGFtcEZyYW1lLnh5LCB1Q2xhbXBGcmFtZS56dyk7XG4gICAgICAgIFxuICAgICAgICBvdXRDb2xvciA9IHRleHR1cmUodVRleHR1cmUsIGNvb3JkLCB1bmNsYW1wZWQgPT0gY29vcmQgPyAwLjAgOiAtMzIuMCk7Ly8gbG9kLWJpYXMgdmVyeSBuZWdhdGl2ZSB0byBmb3JjZSBsb2QgMFxuICAgIFxuICAgICAgICBgXG4gICAgKVxuICB9XG59O1xuXG5leHBvcnQgeyB0aWxpbmdCaXQsIHRpbGluZ0JpdEdsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aWxpbmdCaXQubWpzLm1hcFxuIiwiaW1wb3J0IHsgTWF0cml4IH0gZnJvbSAnLi4vLi4vLi4vbWF0aHMvbWF0cml4L01hdHJpeC5tanMnO1xuaW1wb3J0IHsgY29tcGlsZUhpZ2hTaGFkZXJHcHVQcm9ncmFtLCBjb21waWxlSGlnaFNoYWRlckdsUHJvZ3JhbSB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9oaWdoLXNoYWRlci9jb21waWxlSGlnaFNoYWRlclRvUHJvZ3JhbS5tanMnO1xuaW1wb3J0IHsgbG9jYWxVbmlmb3JtQml0LCBsb2NhbFVuaWZvcm1CaXRHbCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9oaWdoLXNoYWRlci9zaGFkZXItYml0cy9sb2NhbFVuaWZvcm1CaXQubWpzJztcbmltcG9ydCB7IHJvdW5kUGl4ZWxzQml0LCByb3VuZFBpeGVsc0JpdEdsIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL2hpZ2gtc2hhZGVyL3NoYWRlci1iaXRzL3JvdW5kUGl4ZWxzQml0Lm1qcyc7XG5pbXBvcnQgeyBTaGFkZXIgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9zaGFkZXIvU2hhZGVyLm1qcyc7XG5pbXBvcnQgeyBVbmlmb3JtR3JvdXAgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9zaGFkZXIvVW5pZm9ybUdyb3VwLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvdGV4dHVyZS9UZXh0dXJlLm1qcyc7XG5pbXBvcnQgeyB0aWxpbmdCaXQsIHRpbGluZ0JpdEdsIH0gZnJvbSAnLi90aWxpbmdCaXQubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5sZXQgZ3B1UHJvZ3JhbTtcbmxldCBnbFByb2dyYW07XG5jbGFzcyBUaWxpbmdTcHJpdGVTaGFkZXIgZXh0ZW5kcyBTaGFkZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBncHVQcm9ncmFtID8/IChncHVQcm9ncmFtID0gY29tcGlsZUhpZ2hTaGFkZXJHcHVQcm9ncmFtKHtcbiAgICAgIG5hbWU6IFwidGlsaW5nLXNwcml0ZS1zaGFkZXJcIixcbiAgICAgIGJpdHM6IFtcbiAgICAgICAgbG9jYWxVbmlmb3JtQml0LFxuICAgICAgICB0aWxpbmdCaXQsXG4gICAgICAgIHJvdW5kUGl4ZWxzQml0XG4gICAgICBdXG4gICAgfSkpO1xuICAgIGdsUHJvZ3JhbSA/PyAoZ2xQcm9ncmFtID0gY29tcGlsZUhpZ2hTaGFkZXJHbFByb2dyYW0oe1xuICAgICAgbmFtZTogXCJ0aWxpbmctc3ByaXRlLXNoYWRlclwiLFxuICAgICAgYml0czogW1xuICAgICAgICBsb2NhbFVuaWZvcm1CaXRHbCxcbiAgICAgICAgdGlsaW5nQml0R2wsXG4gICAgICAgIHJvdW5kUGl4ZWxzQml0R2xcbiAgICAgIF1cbiAgICB9KSk7XG4gICAgY29uc3QgdGlsaW5nVW5pZm9ybXMgPSBuZXcgVW5pZm9ybUdyb3VwKHtcbiAgICAgIHVNYXBDb29yZDogeyB2YWx1ZTogbmV3IE1hdHJpeCgpLCB0eXBlOiBcIm1hdDN4MzxmMzI+XCIgfSxcbiAgICAgIHVDbGFtcEZyYW1lOiB7IHZhbHVlOiBuZXcgRmxvYXQzMkFycmF5KFswLCAwLCAxLCAxXSksIHR5cGU6IFwidmVjNDxmMzI+XCIgfSxcbiAgICAgIHVDbGFtcE9mZnNldDogeyB2YWx1ZTogbmV3IEZsb2F0MzJBcnJheShbMCwgMF0pLCB0eXBlOiBcInZlYzI8ZjMyPlwiIH0sXG4gICAgICB1VGV4dHVyZVRyYW5zZm9ybTogeyB2YWx1ZTogbmV3IE1hdHJpeCgpLCB0eXBlOiBcIm1hdDN4MzxmMzI+XCIgfSxcbiAgICAgIHVTaXplQW5jaG9yOiB7IHZhbHVlOiBuZXcgRmxvYXQzMkFycmF5KFsxMDAsIDEwMCwgMC41LCAwLjVdKSwgdHlwZTogXCJ2ZWM0PGYzMj5cIiB9XG4gICAgfSk7XG4gICAgc3VwZXIoe1xuICAgICAgZ2xQcm9ncmFtLFxuICAgICAgZ3B1UHJvZ3JhbSxcbiAgICAgIHJlc291cmNlczoge1xuICAgICAgICBsb2NhbFVuaWZvcm1zOiBuZXcgVW5pZm9ybUdyb3VwKHtcbiAgICAgICAgICB1VHJhbnNmb3JtTWF0cml4OiB7IHZhbHVlOiBuZXcgTWF0cml4KCksIHR5cGU6IFwibWF0M3gzPGYzMj5cIiB9LFxuICAgICAgICAgIHVDb2xvcjogeyB2YWx1ZTogbmV3IEZsb2F0MzJBcnJheShbMSwgMSwgMSwgMV0pLCB0eXBlOiBcInZlYzQ8ZjMyPlwiIH0sXG4gICAgICAgICAgdVJvdW5kOiB7IHZhbHVlOiAwLCB0eXBlOiBcImYzMlwiIH1cbiAgICAgICAgfSksXG4gICAgICAgIHRpbGluZ1VuaWZvcm1zLFxuICAgICAgICB1VGV4dHVyZTogVGV4dHVyZS5FTVBUWS5zb3VyY2UsXG4gICAgICAgIHVTYW1wbGVyOiBUZXh0dXJlLkVNUFRZLnNvdXJjZS5zdHlsZVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHVwZGF0ZVVuaWZvcm1zKHdpZHRoLCBoZWlnaHQsIG1hdHJpeCwgYW5jaG9yWCwgYW5jaG9yWSwgdGV4dHVyZSkge1xuICAgIGNvbnN0IHRpbGluZ1VuaWZvcm1zID0gdGhpcy5yZXNvdXJjZXMudGlsaW5nVW5pZm9ybXM7XG4gICAgY29uc3QgdGV4dHVyZVdpZHRoID0gdGV4dHVyZS53aWR0aDtcbiAgICBjb25zdCB0ZXh0dXJlSGVpZ2h0ID0gdGV4dHVyZS5oZWlnaHQ7XG4gICAgY29uc3QgdGV4dHVyZU1hdHJpeCA9IHRleHR1cmUudGV4dHVyZU1hdHJpeDtcbiAgICBjb25zdCB1VGV4dHVyZVRyYW5zZm9ybSA9IHRpbGluZ1VuaWZvcm1zLnVuaWZvcm1zLnVUZXh0dXJlVHJhbnNmb3JtO1xuICAgIHVUZXh0dXJlVHJhbnNmb3JtLnNldChcbiAgICAgIG1hdHJpeC5hICogdGV4dHVyZVdpZHRoIC8gd2lkdGgsXG4gICAgICBtYXRyaXguYiAqIHRleHR1cmVXaWR0aCAvIGhlaWdodCxcbiAgICAgIG1hdHJpeC5jICogdGV4dHVyZUhlaWdodCAvIHdpZHRoLFxuICAgICAgbWF0cml4LmQgKiB0ZXh0dXJlSGVpZ2h0IC8gaGVpZ2h0LFxuICAgICAgbWF0cml4LnR4IC8gd2lkdGgsXG4gICAgICBtYXRyaXgudHkgLyBoZWlnaHRcbiAgICApO1xuICAgIHVUZXh0dXJlVHJhbnNmb3JtLmludmVydCgpO1xuICAgIHRpbGluZ1VuaWZvcm1zLnVuaWZvcm1zLnVNYXBDb29yZCA9IHRleHR1cmVNYXRyaXgubWFwQ29vcmQ7XG4gICAgdGlsaW5nVW5pZm9ybXMudW5pZm9ybXMudUNsYW1wRnJhbWUgPSB0ZXh0dXJlTWF0cml4LnVDbGFtcEZyYW1lO1xuICAgIHRpbGluZ1VuaWZvcm1zLnVuaWZvcm1zLnVDbGFtcE9mZnNldCA9IHRleHR1cmVNYXRyaXgudUNsYW1wT2Zmc2V0O1xuICAgIHRpbGluZ1VuaWZvcm1zLnVuaWZvcm1zLnVUZXh0dXJlVHJhbnNmb3JtID0gdVRleHR1cmVUcmFuc2Zvcm07XG4gICAgdGlsaW5nVW5pZm9ybXMudW5pZm9ybXMudVNpemVBbmNob3JbMF0gPSB3aWR0aDtcbiAgICB0aWxpbmdVbmlmb3Jtcy51bmlmb3Jtcy51U2l6ZUFuY2hvclsxXSA9IGhlaWdodDtcbiAgICB0aWxpbmdVbmlmb3Jtcy51bmlmb3Jtcy51U2l6ZUFuY2hvclsyXSA9IGFuY2hvclg7XG4gICAgdGlsaW5nVW5pZm9ybXMudW5pZm9ybXMudVNpemVBbmNob3JbM10gPSBhbmNob3JZO1xuICAgIGlmICh0ZXh0dXJlKSB7XG4gICAgICB0aGlzLnJlc291cmNlcy51VGV4dHVyZSA9IHRleHR1cmUuc291cmNlO1xuICAgICAgdGhpcy5yZXNvdXJjZXMudVNhbXBsZXIgPSB0ZXh0dXJlLnNvdXJjZS5zdHlsZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsgVGlsaW5nU3ByaXRlU2hhZGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UaWxpbmdTcHJpdGVTaGFkZXIubWpzLm1hcFxuIiwiaW1wb3J0IHsgTWVzaEdlb21ldHJ5IH0gZnJvbSAnLi4vLi4vbWVzaC9zaGFyZWQvTWVzaEdlb21ldHJ5Lm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgUXVhZEdlb21ldHJ5IGV4dGVuZHMgTWVzaEdlb21ldHJ5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe1xuICAgICAgcG9zaXRpb25zOiBuZXcgRmxvYXQzMkFycmF5KFswLCAwLCAxLCAwLCAxLCAxLCAwLCAxXSksXG4gICAgICB1dnM6IG5ldyBGbG9hdDMyQXJyYXkoWzAsIDAsIDEsIDAsIDEsIDEsIDAsIDFdKSxcbiAgICAgIGluZGljZXM6IG5ldyBVaW50MzJBcnJheShbMCwgMSwgMiwgMCwgMiwgM10pXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgUXVhZEdlb21ldHJ5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1RdWFkR2VvbWV0cnkubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgZ2V0QWRqdXN0ZWRCbGVuZE1vZGVCbGVuZCB9IGZyb20gJy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3N0YXRlL2dldEFkanVzdGVkQmxlbmRNb2RlQmxlbmQubWpzJztcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvc3RhdGUvU3RhdGUubWpzJztcbmltcG9ydCB7IFJlbmRlcmVyVHlwZSB9IGZyb20gJy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvdHlwZXMubWpzJztcbmltcG9ydCB7IGNvbG9yMzJCaXRUb1VuaWZvcm0gfSBmcm9tICcuLi9ncmFwaGljcy9ncHUvY29sb3JUb1VuaWZvcm0ubWpzJztcbmltcG9ydCB7IEJhdGNoYWJsZU1lc2ggfSBmcm9tICcuLi9tZXNoL3NoYXJlZC9CYXRjaGFibGVNZXNoLm1qcyc7XG5pbXBvcnQgeyBNZXNoR2VvbWV0cnkgfSBmcm9tICcuLi9tZXNoL3NoYXJlZC9NZXNoR2VvbWV0cnkubWpzJztcbmltcG9ydCB7IFRpbGluZ1Nwcml0ZVNoYWRlciB9IGZyb20gJy4vc2hhZGVyL1RpbGluZ1Nwcml0ZVNoYWRlci5tanMnO1xuaW1wb3J0IHsgUXVhZEdlb21ldHJ5IH0gZnJvbSAnLi91dGlscy9RdWFkR2VvbWV0cnkubWpzJztcbmltcG9ydCB7IHNldFBvc2l0aW9ucyB9IGZyb20gJy4vdXRpbHMvc2V0UG9zaXRpb25zLm1qcyc7XG5pbXBvcnQgeyBzZXRVdnMgfSBmcm9tICcuL3V0aWxzL3NldFV2cy5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IHNoYXJlZFF1YWQgPSBuZXcgUXVhZEdlb21ldHJ5KCk7XG5jbGFzcyBUaWxpbmdTcHJpdGVQaXBlIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICB0aGlzLl9zdGF0ZSA9IFN0YXRlLmRlZmF1bHQyZDtcbiAgICB0aGlzLl90aWxpbmdTcHJpdGVEYXRhSGFzaCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQm91bmQgPSB0aGlzLmRlc3Ryb3lSZW5kZXJhYmxlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLl9yZW5kZXJlci5yZW5kZXJhYmxlR0MuYWRkTWFuYWdlZEhhc2godGhpcywgXCJfdGlsaW5nU3ByaXRlRGF0YUhhc2hcIik7XG4gIH1cbiAgdmFsaWRhdGVSZW5kZXJhYmxlKHJlbmRlcmFibGUpIHtcbiAgICBjb25zdCB0aWxpbmdTcHJpdGVEYXRhID0gdGhpcy5fZ2V0VGlsaW5nU3ByaXRlRGF0YShyZW5kZXJhYmxlKTtcbiAgICBjb25zdCBjb3VsZEJhdGNoID0gdGlsaW5nU3ByaXRlRGF0YS5jYW5CYXRjaDtcbiAgICB0aGlzLl91cGRhdGVDYW5CYXRjaChyZW5kZXJhYmxlKTtcbiAgICBjb25zdCBjYW5CYXRjaCA9IHRpbGluZ1Nwcml0ZURhdGEuY2FuQmF0Y2g7XG4gICAgaWYgKGNhbkJhdGNoICYmIGNhbkJhdGNoID09PSBjb3VsZEJhdGNoKSB7XG4gICAgICBjb25zdCB7IGJhdGNoYWJsZU1lc2ggfSA9IHRpbGluZ1Nwcml0ZURhdGE7XG4gICAgICBpZiAoYmF0Y2hhYmxlTWVzaCAmJiBiYXRjaGFibGVNZXNoLnRleHR1cmUuX3NvdXJjZSAhPT0gcmVuZGVyYWJsZS50ZXh0dXJlLl9zb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuICFiYXRjaGFibGVNZXNoLl9iYXRjaGVyLmNoZWNrQW5kVXBkYXRlVGV4dHVyZShiYXRjaGFibGVNZXNoLCByZW5kZXJhYmxlLnRleHR1cmUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY291bGRCYXRjaCAhPT0gY2FuQmF0Y2g7XG4gIH1cbiAgYWRkUmVuZGVyYWJsZSh0aWxpbmdTcHJpdGUsIGluc3RydWN0aW9uU2V0KSB7XG4gICAgY29uc3QgYmF0Y2hlciA9IHRoaXMuX3JlbmRlcmVyLnJlbmRlclBpcGVzLmJhdGNoO1xuICAgIHRoaXMuX3VwZGF0ZUNhbkJhdGNoKHRpbGluZ1Nwcml0ZSk7XG4gICAgY29uc3QgdGlsaW5nU3ByaXRlRGF0YSA9IHRoaXMuX2dldFRpbGluZ1Nwcml0ZURhdGEodGlsaW5nU3ByaXRlKTtcbiAgICBjb25zdCB7IGdlb21ldHJ5LCBjYW5CYXRjaCB9ID0gdGlsaW5nU3ByaXRlRGF0YTtcbiAgICBpZiAoY2FuQmF0Y2gpIHtcbiAgICAgIHRpbGluZ1Nwcml0ZURhdGEuYmF0Y2hhYmxlTWVzaCB8fCAodGlsaW5nU3ByaXRlRGF0YS5iYXRjaGFibGVNZXNoID0gbmV3IEJhdGNoYWJsZU1lc2goKSk7XG4gICAgICBjb25zdCBiYXRjaGFibGVNZXNoID0gdGlsaW5nU3ByaXRlRGF0YS5iYXRjaGFibGVNZXNoO1xuICAgICAgaWYgKHRpbGluZ1Nwcml0ZS5kaWRWaWV3VXBkYXRlKSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUJhdGNoYWJsZU1lc2godGlsaW5nU3ByaXRlKTtcbiAgICAgICAgYmF0Y2hhYmxlTWVzaC5nZW9tZXRyeSA9IGdlb21ldHJ5O1xuICAgICAgICBiYXRjaGFibGVNZXNoLnJlbmRlcmFibGUgPSB0aWxpbmdTcHJpdGU7XG4gICAgICAgIGJhdGNoYWJsZU1lc2gudHJhbnNmb3JtID0gdGlsaW5nU3ByaXRlLmdyb3VwVHJhbnNmb3JtO1xuICAgICAgICBiYXRjaGFibGVNZXNoLnRleHR1cmUgPSB0aWxpbmdTcHJpdGUuX3RleHR1cmU7XG4gICAgICB9XG4gICAgICBiYXRjaGFibGVNZXNoLnJvdW5kUGl4ZWxzID0gdGhpcy5fcmVuZGVyZXIuX3JvdW5kUGl4ZWxzIHwgdGlsaW5nU3ByaXRlLl9yb3VuZFBpeGVscztcbiAgICAgIGJhdGNoZXIuYWRkVG9CYXRjaChiYXRjaGFibGVNZXNoLCBpbnN0cnVjdGlvblNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJhdGNoZXIuYnJlYWsoaW5zdHJ1Y3Rpb25TZXQpO1xuICAgICAgdGlsaW5nU3ByaXRlRGF0YS5zaGFkZXIgfHwgKHRpbGluZ1Nwcml0ZURhdGEuc2hhZGVyID0gbmV3IFRpbGluZ1Nwcml0ZVNoYWRlcigpKTtcbiAgICAgIHRoaXMudXBkYXRlUmVuZGVyYWJsZSh0aWxpbmdTcHJpdGUpO1xuICAgICAgaW5zdHJ1Y3Rpb25TZXQuYWRkKHRpbGluZ1Nwcml0ZSk7XG4gICAgfVxuICB9XG4gIGV4ZWN1dGUodGlsaW5nU3ByaXRlKSB7XG4gICAgY29uc3QgeyBzaGFkZXIgfSA9IHRoaXMuX3RpbGluZ1Nwcml0ZURhdGFIYXNoW3RpbGluZ1Nwcml0ZS51aWRdO1xuICAgIHNoYWRlci5ncm91cHNbMF0gPSB0aGlzLl9yZW5kZXJlci5nbG9iYWxVbmlmb3Jtcy5iaW5kR3JvdXA7XG4gICAgY29uc3QgbG9jYWxVbmlmb3JtcyA9IHNoYWRlci5yZXNvdXJjZXMubG9jYWxVbmlmb3Jtcy51bmlmb3JtcztcbiAgICBsb2NhbFVuaWZvcm1zLnVUcmFuc2Zvcm1NYXRyaXggPSB0aWxpbmdTcHJpdGUuZ3JvdXBUcmFuc2Zvcm07XG4gICAgbG9jYWxVbmlmb3Jtcy51Um91bmQgPSB0aGlzLl9yZW5kZXJlci5fcm91bmRQaXhlbHMgfCB0aWxpbmdTcHJpdGUuX3JvdW5kUGl4ZWxzO1xuICAgIGNvbG9yMzJCaXRUb1VuaWZvcm0oXG4gICAgICB0aWxpbmdTcHJpdGUuZ3JvdXBDb2xvckFscGhhLFxuICAgICAgbG9jYWxVbmlmb3Jtcy51Q29sb3IsXG4gICAgICAwXG4gICAgKTtcbiAgICB0aGlzLl9zdGF0ZS5ibGVuZE1vZGUgPSBnZXRBZGp1c3RlZEJsZW5kTW9kZUJsZW5kKHRpbGluZ1Nwcml0ZS5ncm91cEJsZW5kTW9kZSwgdGlsaW5nU3ByaXRlLnRleHR1cmUuX3NvdXJjZSk7XG4gICAgdGhpcy5fcmVuZGVyZXIuZW5jb2Rlci5kcmF3KHtcbiAgICAgIGdlb21ldHJ5OiBzaGFyZWRRdWFkLFxuICAgICAgc2hhZGVyLFxuICAgICAgc3RhdGU6IHRoaXMuX3N0YXRlXG4gICAgfSk7XG4gIH1cbiAgdXBkYXRlUmVuZGVyYWJsZSh0aWxpbmdTcHJpdGUpIHtcbiAgICBjb25zdCB0aWxpbmdTcHJpdGVEYXRhID0gdGhpcy5fZ2V0VGlsaW5nU3ByaXRlRGF0YSh0aWxpbmdTcHJpdGUpO1xuICAgIGNvbnN0IHsgY2FuQmF0Y2ggfSA9IHRpbGluZ1Nwcml0ZURhdGE7XG4gICAgaWYgKGNhbkJhdGNoKSB7XG4gICAgICBjb25zdCB7IGJhdGNoYWJsZU1lc2ggfSA9IHRpbGluZ1Nwcml0ZURhdGE7XG4gICAgICBpZiAodGlsaW5nU3ByaXRlLmRpZFZpZXdVcGRhdGUpXG4gICAgICAgIHRoaXMuX3VwZGF0ZUJhdGNoYWJsZU1lc2godGlsaW5nU3ByaXRlKTtcbiAgICAgIGJhdGNoYWJsZU1lc2guX2JhdGNoZXIudXBkYXRlRWxlbWVudChiYXRjaGFibGVNZXNoKTtcbiAgICB9IGVsc2UgaWYgKHRpbGluZ1Nwcml0ZS5kaWRWaWV3VXBkYXRlKSB7XG4gICAgICBjb25zdCB7IHNoYWRlciB9ID0gdGlsaW5nU3ByaXRlRGF0YTtcbiAgICAgIHNoYWRlci51cGRhdGVVbmlmb3JtcyhcbiAgICAgICAgdGlsaW5nU3ByaXRlLndpZHRoLFxuICAgICAgICB0aWxpbmdTcHJpdGUuaGVpZ2h0LFxuICAgICAgICB0aWxpbmdTcHJpdGUuX3RpbGVUcmFuc2Zvcm0ubWF0cml4LFxuICAgICAgICB0aWxpbmdTcHJpdGUuYW5jaG9yLngsXG4gICAgICAgIHRpbGluZ1Nwcml0ZS5hbmNob3IueSxcbiAgICAgICAgdGlsaW5nU3ByaXRlLnRleHR1cmVcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGRlc3Ryb3lSZW5kZXJhYmxlKHRpbGluZ1Nwcml0ZSkge1xuICAgIGNvbnN0IHRpbGluZ1Nwcml0ZURhdGEgPSB0aGlzLl9nZXRUaWxpbmdTcHJpdGVEYXRhKHRpbGluZ1Nwcml0ZSk7XG4gICAgdGlsaW5nU3ByaXRlRGF0YS5iYXRjaGFibGVNZXNoID0gbnVsbDtcbiAgICB0aWxpbmdTcHJpdGVEYXRhLnNoYWRlcj8uZGVzdHJveSgpO1xuICAgIHRoaXMuX3RpbGluZ1Nwcml0ZURhdGFIYXNoW3RpbGluZ1Nwcml0ZS51aWRdID0gbnVsbDtcbiAgICB0aWxpbmdTcHJpdGUub2ZmKFwiZGVzdHJveWVkXCIsIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQm91bmQpO1xuICB9XG4gIF9nZXRUaWxpbmdTcHJpdGVEYXRhKHJlbmRlcmFibGUpIHtcbiAgICByZXR1cm4gdGhpcy5fdGlsaW5nU3ByaXRlRGF0YUhhc2hbcmVuZGVyYWJsZS51aWRdIHx8IHRoaXMuX2luaXRUaWxpbmdTcHJpdGVEYXRhKHJlbmRlcmFibGUpO1xuICB9XG4gIF9pbml0VGlsaW5nU3ByaXRlRGF0YSh0aWxpbmdTcHJpdGUpIHtcbiAgICBjb25zdCBnZW9tZXRyeSA9IG5ldyBNZXNoR2VvbWV0cnkoe1xuICAgICAgaW5kaWNlczogc2hhcmVkUXVhZC5pbmRpY2VzLFxuICAgICAgcG9zaXRpb25zOiBzaGFyZWRRdWFkLnBvc2l0aW9ucy5zbGljZSgpLFxuICAgICAgdXZzOiBzaGFyZWRRdWFkLnV2cy5zbGljZSgpXG4gICAgfSk7XG4gICAgdGhpcy5fdGlsaW5nU3ByaXRlRGF0YUhhc2hbdGlsaW5nU3ByaXRlLnVpZF0gPSB7XG4gICAgICBjYW5CYXRjaDogdHJ1ZSxcbiAgICAgIHJlbmRlcmFibGU6IHRpbGluZ1Nwcml0ZSxcbiAgICAgIGdlb21ldHJ5XG4gICAgfTtcbiAgICB0aWxpbmdTcHJpdGUub24oXCJkZXN0cm95ZWRcIiwgdGhpcy5fZGVzdHJveVJlbmRlcmFibGVCb3VuZCk7XG4gICAgcmV0dXJuIHRoaXMuX3RpbGluZ1Nwcml0ZURhdGFIYXNoW3RpbGluZ1Nwcml0ZS51aWRdO1xuICB9XG4gIF91cGRhdGVCYXRjaGFibGVNZXNoKHRpbGluZ1Nwcml0ZSkge1xuICAgIGNvbnN0IHJlbmRlcmFibGVEYXRhID0gdGhpcy5fZ2V0VGlsaW5nU3ByaXRlRGF0YSh0aWxpbmdTcHJpdGUpO1xuICAgIGNvbnN0IHsgZ2VvbWV0cnkgfSA9IHJlbmRlcmFibGVEYXRhO1xuICAgIGNvbnN0IHN0eWxlID0gdGlsaW5nU3ByaXRlLnRleHR1cmUuc291cmNlLnN0eWxlO1xuICAgIGlmIChzdHlsZS5hZGRyZXNzTW9kZSAhPT0gXCJyZXBlYXRcIikge1xuICAgICAgc3R5bGUuYWRkcmVzc01vZGUgPSBcInJlcGVhdFwiO1xuICAgICAgc3R5bGUudXBkYXRlKCk7XG4gICAgfVxuICAgIHNldFV2cyh0aWxpbmdTcHJpdGUsIGdlb21ldHJ5LnV2cyk7XG4gICAgc2V0UG9zaXRpb25zKHRpbGluZ1Nwcml0ZSwgZ2VvbWV0cnkucG9zaXRpb25zKTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIGZvciAoY29uc3QgaSBpbiB0aGlzLl90aWxpbmdTcHJpdGVEYXRhSGFzaCkge1xuICAgICAgdGhpcy5kZXN0cm95UmVuZGVyYWJsZSh0aGlzLl90aWxpbmdTcHJpdGVEYXRhSGFzaFtpXS5yZW5kZXJhYmxlKTtcbiAgICB9XG4gICAgdGhpcy5fdGlsaW5nU3ByaXRlRGF0YUhhc2ggPSBudWxsO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcbiAgfVxuICBfdXBkYXRlQ2FuQmF0Y2godGlsaW5nU3ByaXRlKSB7XG4gICAgY29uc3QgcmVuZGVyYWJsZURhdGEgPSB0aGlzLl9nZXRUaWxpbmdTcHJpdGVEYXRhKHRpbGluZ1Nwcml0ZSk7XG4gICAgY29uc3QgdGV4dHVyZSA9IHRpbGluZ1Nwcml0ZS50ZXh0dXJlO1xuICAgIGxldCBfbm9uUG93T2Yyd3JhcHBpbmcgPSB0cnVlO1xuICAgIGlmICh0aGlzLl9yZW5kZXJlci50eXBlID09PSBSZW5kZXJlclR5cGUuV0VCR0wpIHtcbiAgICAgIF9ub25Qb3dPZjJ3cmFwcGluZyA9IHRoaXMuX3JlbmRlcmVyLmNvbnRleHQuc3VwcG9ydHMubm9uUG93T2Yyd3JhcHBpbmc7XG4gICAgfVxuICAgIHJlbmRlcmFibGVEYXRhLmNhbkJhdGNoID0gdGV4dHVyZS50ZXh0dXJlTWF0cml4LmlzU2ltcGxlICYmIChfbm9uUG93T2Yyd3JhcHBpbmcgfHwgdGV4dHVyZS5zb3VyY2UuaXNQb3dlck9mVHdvKTtcbiAgICByZXR1cm4gcmVuZGVyYWJsZURhdGEuY2FuQmF0Y2g7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5UaWxpbmdTcHJpdGVQaXBlLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xQaXBlcyxcbiAgICBFeHRlbnNpb25UeXBlLldlYkdQVVBpcGVzLFxuICAgIEV4dGVuc2lvblR5cGUuQ2FudmFzUGlwZXNcbiAgXSxcbiAgbmFtZTogXCJ0aWxpbmdTcHJpdGVcIlxufTtcblxuZXhwb3J0IHsgVGlsaW5nU3ByaXRlUGlwZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGlsaW5nU3ByaXRlUGlwZS5tanMubWFwXG4iLCJpbXBvcnQgeyBNYXRyaXggfSBmcm9tICcuLi8uLi8uLi9tYXRocy9tYXRyaXgvTWF0cml4Lm1qcyc7XG5pbXBvcnQgeyBhcHBseU1hdHJpeCB9IGZyb20gJy4vYXBwbHlNYXRyaXgubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBzZXRVdnModGlsaW5nU3ByaXRlLCB1dnMpIHtcbiAgY29uc3QgdGV4dHVyZSA9IHRpbGluZ1Nwcml0ZS50ZXh0dXJlO1xuICBjb25zdCB3aWR0aCA9IHRleHR1cmUuZnJhbWUud2lkdGg7XG4gIGNvbnN0IGhlaWdodCA9IHRleHR1cmUuZnJhbWUuaGVpZ2h0O1xuICBsZXQgYW5jaG9yWCA9IDA7XG4gIGxldCBhbmNob3JZID0gMDtcbiAgaWYgKHRpbGluZ1Nwcml0ZS5fYXBwbHlBbmNob3JUb1RleHR1cmUpIHtcbiAgICBhbmNob3JYID0gdGlsaW5nU3ByaXRlLmFuY2hvci54O1xuICAgIGFuY2hvclkgPSB0aWxpbmdTcHJpdGUuYW5jaG9yLnk7XG4gIH1cbiAgdXZzWzBdID0gdXZzWzZdID0gLWFuY2hvclg7XG4gIHV2c1syXSA9IHV2c1s0XSA9IDEgLSBhbmNob3JYO1xuICB1dnNbMV0gPSB1dnNbM10gPSAtYW5jaG9yWTtcbiAgdXZzWzVdID0gdXZzWzddID0gMSAtIGFuY2hvclk7XG4gIGNvbnN0IHRleHR1cmVNYXRyaXggPSBNYXRyaXguc2hhcmVkO1xuICB0ZXh0dXJlTWF0cml4LmNvcHlGcm9tKHRpbGluZ1Nwcml0ZS5fdGlsZVRyYW5zZm9ybS5tYXRyaXgpO1xuICB0ZXh0dXJlTWF0cml4LnR4IC89IHRpbGluZ1Nwcml0ZS53aWR0aDtcbiAgdGV4dHVyZU1hdHJpeC50eSAvPSB0aWxpbmdTcHJpdGUuaGVpZ2h0O1xuICB0ZXh0dXJlTWF0cml4LmludmVydCgpO1xuICB0ZXh0dXJlTWF0cml4LnNjYWxlKHRpbGluZ1Nwcml0ZS53aWR0aCAvIHdpZHRoLCB0aWxpbmdTcHJpdGUuaGVpZ2h0IC8gaGVpZ2h0KTtcbiAgYXBwbHlNYXRyaXgodXZzLCAyLCAwLCB0ZXh0dXJlTWF0cml4KTtcbn1cblxuZXhwb3J0IHsgc2V0VXZzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXRVdnMubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBhcHBseU1hdHJpeChhcnJheSwgc3RyaWRlLCBvZmZzZXQsIG1hdHJpeCkge1xuICBsZXQgaW5kZXggPSAwO1xuICBjb25zdCBzaXplID0gYXJyYXkubGVuZ3RoIC8gKHN0cmlkZSB8fCAyKTtcbiAgY29uc3QgYSA9IG1hdHJpeC5hO1xuICBjb25zdCBiID0gbWF0cml4LmI7XG4gIGNvbnN0IGMgPSBtYXRyaXguYztcbiAgY29uc3QgZCA9IG1hdHJpeC5kO1xuICBjb25zdCB0eCA9IG1hdHJpeC50eDtcbiAgY29uc3QgdHkgPSBtYXRyaXgudHk7XG4gIG9mZnNldCAqPSBzdHJpZGU7XG4gIHdoaWxlIChpbmRleCA8IHNpemUpIHtcbiAgICBjb25zdCB4ID0gYXJyYXlbb2Zmc2V0XTtcbiAgICBjb25zdCB5ID0gYXJyYXlbb2Zmc2V0ICsgMV07XG4gICAgYXJyYXlbb2Zmc2V0XSA9IGEgKiB4ICsgYyAqIHkgKyB0eDtcbiAgICBhcnJheVtvZmZzZXQgKyAxXSA9IGIgKiB4ICsgZCAqIHkgKyB0eTtcbiAgICBvZmZzZXQgKz0gc3RyaWRlO1xuICAgIGluZGV4Kys7XG4gIH1cbn1cblxuZXhwb3J0IHsgYXBwbHlNYXRyaXggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcGx5TWF0cml4Lm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gc2V0UG9zaXRpb25zKHRpbGluZ1Nwcml0ZSwgcG9zaXRpb25zKSB7XG4gIGNvbnN0IGFuY2hvclggPSB0aWxpbmdTcHJpdGUuYW5jaG9yLng7XG4gIGNvbnN0IGFuY2hvclkgPSB0aWxpbmdTcHJpdGUuYW5jaG9yLnk7XG4gIHBvc2l0aW9uc1swXSA9IC1hbmNob3JYICogdGlsaW5nU3ByaXRlLndpZHRoO1xuICBwb3NpdGlvbnNbMV0gPSAtYW5jaG9yWSAqIHRpbGluZ1Nwcml0ZS5oZWlnaHQ7XG4gIHBvc2l0aW9uc1syXSA9ICgxIC0gYW5jaG9yWCkgKiB0aWxpbmdTcHJpdGUud2lkdGg7XG4gIHBvc2l0aW9uc1szXSA9IC1hbmNob3JZICogdGlsaW5nU3ByaXRlLmhlaWdodDtcbiAgcG9zaXRpb25zWzRdID0gKDEgLSBhbmNob3JYKSAqIHRpbGluZ1Nwcml0ZS53aWR0aDtcbiAgcG9zaXRpb25zWzVdID0gKDEgLSBhbmNob3JZKSAqIHRpbGluZ1Nwcml0ZS5oZWlnaHQ7XG4gIHBvc2l0aW9uc1s2XSA9IC1hbmNob3JYICogdGlsaW5nU3ByaXRlLndpZHRoO1xuICBwb3NpdGlvbnNbN10gPSAoMSAtIGFuY2hvclkpICogdGlsaW5nU3ByaXRlLmhlaWdodDtcbn1cblxuZXhwb3J0IHsgc2V0UG9zaXRpb25zIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXRQb3NpdGlvbnMubWpzLm1hcFxuIiwiaW1wb3J0IHsgZXh0ZW5zaW9ucyB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgVGlsaW5nU3ByaXRlUGlwZSB9IGZyb20gJy4vVGlsaW5nU3ByaXRlUGlwZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmV4dGVuc2lvbnMuYWRkKFRpbGluZ1Nwcml0ZVBpcGUpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5pdC5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmNsYXNzIEJhdGNoYWJsZVNwcml0ZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYmF0Y2hlck5hbWUgPSBcImRlZmF1bHRcIjtcbiAgICAvLyBiYXRjaCBzcGVjaWZpYy4uXG4gICAgdGhpcy5hdHRyaWJ1dGVTaXplID0gNDtcbiAgICB0aGlzLmluZGV4U2l6ZSA9IDY7XG4gICAgdGhpcy5wYWNrQXNRdWFkID0gdHJ1ZTtcbiAgICB0aGlzLnJvdW5kUGl4ZWxzID0gMDtcbiAgICB0aGlzLl9hdHRyaWJ1dGVTdGFydCA9IDA7XG4gICAgLy8gbG9jYXRpb24gaW4gdGhlIGJ1ZmZlclxuICAgIHRoaXMuX2JhdGNoZXIgPSBudWxsO1xuICAgIHRoaXMuX2JhdGNoID0gbnVsbDtcbiAgfVxuICBnZXQgYmxlbmRNb2RlKCkge1xuICAgIHJldHVybiB0aGlzLnJlbmRlcmFibGUuZ3JvdXBCbGVuZE1vZGU7XG4gIH1cbiAgZ2V0IGNvbG9yKCkge1xuICAgIHJldHVybiB0aGlzLnJlbmRlcmFibGUuZ3JvdXBDb2xvckFscGhhO1xuICB9XG4gIHJlc2V0KCkge1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IG51bGw7XG4gICAgdGhpcy50ZXh0dXJlID0gbnVsbDtcbiAgICB0aGlzLl9iYXRjaGVyID0gbnVsbDtcbiAgICB0aGlzLl9iYXRjaCA9IG51bGw7XG4gICAgdGhpcy5ib3VuZHMgPSBudWxsO1xuICB9XG59XG5cbmV4cG9ydCB7IEJhdGNoYWJsZVNwcml0ZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmF0Y2hhYmxlU3ByaXRlLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY29uc3QgbG9jYWxVbmlmb3JtTVNERkJpdCA9IHtcbiAgbmFtZTogXCJsb2NhbC11bmlmb3JtLW1zZGYtYml0XCIsXG4gIHZlcnRleDoge1xuICAgIGhlYWRlcjogKFxuICAgICAgLyogd2dzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgc3RydWN0IExvY2FsVW5pZm9ybXMge1xuICAgICAgICAgICAgICAgIHVDb2xvcjp2ZWM0PGYzMj4sXG4gICAgICAgICAgICAgICAgdVRyYW5zZm9ybU1hdHJpeDptYXQzeDM8ZjMyPixcbiAgICAgICAgICAgICAgICB1RGlzdGFuY2U6IGYzMixcbiAgICAgICAgICAgICAgICB1Um91bmQ6ZjMyLFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBAZ3JvdXAoMikgQGJpbmRpbmcoMCkgdmFyPHVuaWZvcm0+IGxvY2FsVW5pZm9ybXMgOiBMb2NhbFVuaWZvcm1zO1xuICAgICAgICBgXG4gICAgKSxcbiAgICBtYWluOiAoXG4gICAgICAvKiB3Z3NsICovXG4gICAgICBgXG4gICAgICAgICAgICB2Q29sb3IgKj0gbG9jYWxVbmlmb3Jtcy51Q29sb3I7XG4gICAgICAgICAgICBtb2RlbE1hdHJpeCAqPSBsb2NhbFVuaWZvcm1zLnVUcmFuc2Zvcm1NYXRyaXg7XG4gICAgICAgIGBcbiAgICApLFxuICAgIGVuZDogKFxuICAgICAgLyogd2dzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgaWYobG9jYWxVbmlmb3Jtcy51Um91bmQgPT0gMSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2UG9zaXRpb24gPSB2ZWM0KHJvdW5kUGl4ZWxzKHZQb3NpdGlvbi54eSwgZ2xvYmFsVW5pZm9ybXMudVJlc29sdXRpb24pLCB2UG9zaXRpb24uencpO1xuICAgICAgICAgICAgfVxuICAgICAgICBgXG4gICAgKVxuICB9LFxuICBmcmFnbWVudDoge1xuICAgIGhlYWRlcjogKFxuICAgICAgLyogd2dzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgc3RydWN0IExvY2FsVW5pZm9ybXMge1xuICAgICAgICAgICAgICAgIHVDb2xvcjp2ZWM0PGYzMj4sXG4gICAgICAgICAgICAgICAgdVRyYW5zZm9ybU1hdHJpeDptYXQzeDM8ZjMyPixcbiAgICAgICAgICAgICAgICB1RGlzdGFuY2U6IGYzMlxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBAZ3JvdXAoMikgQGJpbmRpbmcoMCkgdmFyPHVuaWZvcm0+IGxvY2FsVW5pZm9ybXMgOiBMb2NhbFVuaWZvcm1zO1xuICAgICAgICAgYFxuICAgICksXG4gICAgbWFpbjogKFxuICAgICAgLyogd2dzbCAqL1xuICAgICAgYCBcbiAgICAgICAgICAgIG91dENvbG9yID0gdmVjNDxmMzI+KGNhbGN1bGF0ZU1TREZBbHBoYShvdXRDb2xvciwgbG9jYWxVbmlmb3Jtcy51Q29sb3IsIGxvY2FsVW5pZm9ybXMudURpc3RhbmNlKSk7XG4gICAgICAgIGBcbiAgICApXG4gIH1cbn07XG5jb25zdCBsb2NhbFVuaWZvcm1NU0RGQml0R2wgPSB7XG4gIG5hbWU6IFwibG9jYWwtdW5pZm9ybS1tc2RmLWJpdFwiLFxuICB2ZXJ0ZXg6IHtcbiAgICBoZWFkZXI6IChcbiAgICAgIC8qIGdsc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIHVuaWZvcm0gbWF0MyB1VHJhbnNmb3JtTWF0cml4O1xuICAgICAgICAgICAgdW5pZm9ybSB2ZWM0IHVDb2xvcjtcbiAgICAgICAgICAgIHVuaWZvcm0gZmxvYXQgdVJvdW5kO1xuICAgICAgICBgXG4gICAgKSxcbiAgICBtYWluOiAoXG4gICAgICAvKiBnbHNsICovXG4gICAgICBgXG4gICAgICAgICAgICB2Q29sb3IgKj0gdUNvbG9yO1xuICAgICAgICAgICAgbW9kZWxNYXRyaXggKj0gdVRyYW5zZm9ybU1hdHJpeDtcbiAgICAgICAgYFxuICAgICksXG4gICAgZW5kOiAoXG4gICAgICAvKiBnbHNsICovXG4gICAgICBgXG4gICAgICAgICAgICBpZih1Um91bmQgPT0gMS4pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZ2xfUG9zaXRpb24ueHkgPSByb3VuZFBpeGVscyhnbF9Qb3NpdGlvbi54eSwgdVJlc29sdXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICBgXG4gICAgKVxuICB9LFxuICBmcmFnbWVudDoge1xuICAgIGhlYWRlcjogKFxuICAgICAgLyogZ2xzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgdW5pZm9ybSBmbG9hdCB1RGlzdGFuY2U7XG4gICAgICAgICBgXG4gICAgKSxcbiAgICBtYWluOiAoXG4gICAgICAvKiBnbHNsICovXG4gICAgICBgIFxuICAgICAgICAgICAgb3V0Q29sb3IgPSB2ZWM0KGNhbGN1bGF0ZU1TREZBbHBoYShvdXRDb2xvciwgdkNvbG9yLCB1RGlzdGFuY2UpKTtcbiAgICAgICAgYFxuICAgIClcbiAgfVxufTtcblxuZXhwb3J0IHsgbG9jYWxVbmlmb3JtTVNERkJpdCwgbG9jYWxVbmlmb3JtTVNERkJpdEdsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2NhbFVuaWZvcm1NU0RGQml0Lm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuY29uc3QgbVNERkJpdCA9IHtcbiAgbmFtZTogXCJtc2RmLWJpdFwiLFxuICBmcmFnbWVudDoge1xuICAgIGhlYWRlcjogKFxuICAgICAgLyogd2dzbCAqL1xuICAgICAgYFxuICAgICAgICAgICAgZm4gY2FsY3VsYXRlTVNERkFscGhhKG1zZGZDb2xvcjp2ZWM0PGYzMj4sIHNoYXBlQ29sb3I6dmVjNDxmMzI+LCBkaXN0YW5jZTpmMzIpIC0+IGYzMiB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gTVNERlxuICAgICAgICAgICAgICAgIHZhciBtZWRpYW4gPSBtc2RmQ29sb3IuciArIG1zZGZDb2xvci5nICsgbXNkZkNvbG9yLmIgLVxuICAgICAgICAgICAgICAgICAgICBtaW4obXNkZkNvbG9yLnIsIG1pbihtc2RmQ29sb3IuZywgbXNkZkNvbG9yLmIpKSAtXG4gICAgICAgICAgICAgICAgICAgIG1heChtc2RmQ29sb3IuciwgbWF4KG1zZGZDb2xvci5nLCBtc2RmQ29sb3IuYikpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gU0RGXG4gICAgICAgICAgICAgICAgbWVkaWFuID0gbWluKG1lZGlhbiwgbXNkZkNvbG9yLmEpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHNjcmVlblB4RGlzdGFuY2UgPSBkaXN0YW5jZSAqIChtZWRpYW4gLSAwLjUpO1xuICAgICAgICAgICAgICAgIHZhciBhbHBoYSA9IGNsYW1wKHNjcmVlblB4RGlzdGFuY2UgKyAwLjUsIDAuMCwgMS4wKTtcbiAgICAgICAgICAgICAgICBpZiAobWVkaWFuIDwgMC4wMSkge1xuICAgICAgICAgICAgICAgICAgICBhbHBoYSA9IDAuMDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1lZGlhbiA+IDAuOTkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxwaGEgPSAxLjA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gR2FtbWEgY29ycmVjdGlvbiBmb3IgY292ZXJhZ2UtbGlrZSBhbHBoYVxuICAgICAgICAgICAgICAgIHZhciBsdW1hOiBmMzIgPSBkb3Qoc2hhcGVDb2xvci5yZ2IsIHZlYzM8ZjMyPigwLjI5OSwgMC41ODcsIDAuMTE0KSk7XG4gICAgICAgICAgICAgICAgdmFyIGdhbW1hOiBmMzIgPSBtaXgoMS4wLCAxLjAgLyAyLjIsIGx1bWEpO1xuICAgICAgICAgICAgICAgIHZhciBjb3ZlcmFnZTogZjMyID0gcG93KHNoYXBlQ29sb3IuYSAqIGFscGhhLCBnYW1tYSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gY292ZXJhZ2U7XG4gICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIGBcbiAgICApXG4gIH1cbn07XG5jb25zdCBtU0RGQml0R2wgPSB7XG4gIG5hbWU6IFwibXNkZi1iaXRcIixcbiAgZnJhZ21lbnQ6IHtcbiAgICBoZWFkZXI6IChcbiAgICAgIC8qIGdsc2wgKi9cbiAgICAgIGBcbiAgICAgICAgICAgIGZsb2F0IGNhbGN1bGF0ZU1TREZBbHBoYSh2ZWM0IG1zZGZDb2xvciwgdmVjNCBzaGFwZUNvbG9yLCBmbG9hdCBkaXN0YW5jZSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIE1TREZcbiAgICAgICAgICAgICAgICBmbG9hdCBtZWRpYW4gPSBtc2RmQ29sb3IuciArIG1zZGZDb2xvci5nICsgbXNkZkNvbG9yLmIgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW4obXNkZkNvbG9yLnIsIG1pbihtc2RmQ29sb3IuZywgbXNkZkNvbG9yLmIpKSAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heChtc2RmQ29sb3IuciwgbWF4KG1zZGZDb2xvci5nLCBtc2RmQ29sb3IuYikpO1xuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gU0RGXG4gICAgICAgICAgICAgICAgbWVkaWFuID0gbWluKG1lZGlhbiwgbXNkZkNvbG9yLmEpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZmxvYXQgc2NyZWVuUHhEaXN0YW5jZSA9IGRpc3RhbmNlICogKG1lZGlhbiAtIDAuNSk7XG4gICAgICAgICAgICAgICAgZmxvYXQgYWxwaGEgPSBjbGFtcChzY3JlZW5QeERpc3RhbmNlICsgMC41LCAwLjAsIDEuMCk7XG4gICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChtZWRpYW4gPCAwLjAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGFscGhhID0gMC4wO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWVkaWFuID4gMC45OSkge1xuICAgICAgICAgICAgICAgICAgICBhbHBoYSA9IDEuMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBHYW1tYSBjb3JyZWN0aW9uIGZvciBjb3ZlcmFnZS1saWtlIGFscGhhXG4gICAgICAgICAgICAgICAgZmxvYXQgbHVtYSA9IGRvdChzaGFwZUNvbG9yLnJnYiwgdmVjMygwLjI5OSwgMC41ODcsIDAuMTE0KSk7XG4gICAgICAgICAgICAgICAgZmxvYXQgZ2FtbWEgPSBtaXgoMS4wLCAxLjAgLyAyLjIsIGx1bWEpO1xuICAgICAgICAgICAgICAgIGZsb2F0IGNvdmVyYWdlID0gcG93KHNoYXBlQ29sb3IuYSAqIGFscGhhLCBnYW1tYSk7ICBcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvdmVyYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICBgXG4gICAgKVxuICB9XG59O1xuXG5leHBvcnQgeyBtU0RGQml0LCBtU0RGQml0R2wgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1TREZCaXQubWpzLm1hcFxuIiwiaW1wb3J0IHsgTWF0cml4IH0gZnJvbSAnLi4vLi4vLi4vbWF0aHMvbWF0cml4L01hdHJpeC5tanMnO1xuaW1wb3J0IHsgZ2V0TWF4VGV4dHVyZXNQZXJCYXRjaCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9iYXRjaGVyL2dsL3V0aWxzL21heFJlY29tbWVuZGVkVGV4dHVyZXMubWpzJztcbmltcG9ydCB7IGNvbXBpbGVIaWdoU2hhZGVyR3B1UHJvZ3JhbSwgY29tcGlsZUhpZ2hTaGFkZXJHbFByb2dyYW0gfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvY29tcGlsZUhpZ2hTaGFkZXJUb1Byb2dyYW0ubWpzJztcbmltcG9ydCB7IGNvbG9yQml0LCBjb2xvckJpdEdsIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL2hpZ2gtc2hhZGVyL3NoYWRlci1iaXRzL2NvbG9yQml0Lm1qcyc7XG5pbXBvcnQgeyBnZW5lcmF0ZVRleHR1cmVCYXRjaEJpdCwgZ2VuZXJhdGVUZXh0dXJlQmF0Y2hCaXRHbCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9oaWdoLXNoYWRlci9zaGFkZXItYml0cy9nZW5lcmF0ZVRleHR1cmVCYXRjaEJpdC5tanMnO1xuaW1wb3J0IHsgcm91bmRQaXhlbHNCaXQsIHJvdW5kUGl4ZWxzQml0R2wgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvaGlnaC1zaGFkZXIvc2hhZGVyLWJpdHMvcm91bmRQaXhlbHNCaXQubWpzJztcbmltcG9ydCB7IGdldEJhdGNoU2FtcGxlcnNVbmlmb3JtR3JvdXAgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL2dsL3NoYWRlci9nZXRCYXRjaFNhbXBsZXJzVW5pZm9ybUdyb3VwLm1qcyc7XG5pbXBvcnQgeyBTaGFkZXIgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9zaGFkZXIvU2hhZGVyLm1qcyc7XG5pbXBvcnQgeyBVbmlmb3JtR3JvdXAgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC9zaGFkZXIvVW5pZm9ybUdyb3VwLm1qcyc7XG5pbXBvcnQgeyBsb2NhbFVuaWZvcm1NU0RGQml0LCBsb2NhbFVuaWZvcm1NU0RGQml0R2wgfSBmcm9tICcuL3NoYWRlci1iaXRzL2xvY2FsVW5pZm9ybU1TREZCaXQubWpzJztcbmltcG9ydCB7IG1TREZCaXQsIG1TREZCaXRHbCB9IGZyb20gJy4vc2hhZGVyLWJpdHMvbVNERkJpdC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmxldCBncHVQcm9ncmFtO1xubGV0IGdsUHJvZ3JhbTtcbmNsYXNzIFNkZlNoYWRlciBleHRlbmRzIFNoYWRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IHVuaWZvcm1zID0gbmV3IFVuaWZvcm1Hcm91cCh7XG4gICAgICB1Q29sb3I6IHsgdmFsdWU6IG5ldyBGbG9hdDMyQXJyYXkoWzEsIDEsIDEsIDFdKSwgdHlwZTogXCJ2ZWM0PGYzMj5cIiB9LFxuICAgICAgdVRyYW5zZm9ybU1hdHJpeDogeyB2YWx1ZTogbmV3IE1hdHJpeCgpLCB0eXBlOiBcIm1hdDN4MzxmMzI+XCIgfSxcbiAgICAgIHVEaXN0YW5jZTogeyB2YWx1ZTogNCwgdHlwZTogXCJmMzJcIiB9LFxuICAgICAgdVJvdW5kOiB7IHZhbHVlOiAwLCB0eXBlOiBcImYzMlwiIH1cbiAgICB9KTtcbiAgICBjb25zdCBtYXhUZXh0dXJlcyA9IGdldE1heFRleHR1cmVzUGVyQmF0Y2goKTtcbiAgICBncHVQcm9ncmFtID8/IChncHVQcm9ncmFtID0gY29tcGlsZUhpZ2hTaGFkZXJHcHVQcm9ncmFtKHtcbiAgICAgIG5hbWU6IFwic2RmLXNoYWRlclwiLFxuICAgICAgYml0czogW1xuICAgICAgICBjb2xvckJpdCxcbiAgICAgICAgZ2VuZXJhdGVUZXh0dXJlQmF0Y2hCaXQobWF4VGV4dHVyZXMpLFxuICAgICAgICBsb2NhbFVuaWZvcm1NU0RGQml0LFxuICAgICAgICBtU0RGQml0LFxuICAgICAgICByb3VuZFBpeGVsc0JpdFxuICAgICAgXVxuICAgIH0pKTtcbiAgICBnbFByb2dyYW0gPz8gKGdsUHJvZ3JhbSA9IGNvbXBpbGVIaWdoU2hhZGVyR2xQcm9ncmFtKHtcbiAgICAgIG5hbWU6IFwic2RmLXNoYWRlclwiLFxuICAgICAgYml0czogW1xuICAgICAgICBjb2xvckJpdEdsLFxuICAgICAgICBnZW5lcmF0ZVRleHR1cmVCYXRjaEJpdEdsKG1heFRleHR1cmVzKSxcbiAgICAgICAgbG9jYWxVbmlmb3JtTVNERkJpdEdsLFxuICAgICAgICBtU0RGQml0R2wsXG4gICAgICAgIHJvdW5kUGl4ZWxzQml0R2xcbiAgICAgIF1cbiAgICB9KSk7XG4gICAgc3VwZXIoe1xuICAgICAgZ2xQcm9ncmFtLFxuICAgICAgZ3B1UHJvZ3JhbSxcbiAgICAgIHJlc291cmNlczoge1xuICAgICAgICBsb2NhbFVuaWZvcm1zOiB1bmlmb3JtcyxcbiAgICAgICAgYmF0Y2hTYW1wbGVyczogZ2V0QmF0Y2hTYW1wbGVyc1VuaWZvcm1Hcm91cChtYXhUZXh0dXJlcylcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgeyBTZGZTaGFkZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNkZlNoYWRlci5tanMubWFwXG4iLCJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50ZW1pdHRlcjMnO1xuaW1wb3J0IHsgZGVwcmVjYXRpb24sIHY4XzBfMCB9IGZyb20gJy4uLy4uL3V0aWxzL2xvZ2dpbmcvZGVwcmVjYXRpb24ubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBBYnN0cmFjdEJpdG1hcEZvbnQgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIC8qKiBUaGUgbWFwIG9mIGNoYXJhY3RlcnMgYnkgY2hhcmFjdGVyIGNvZGUuICovXG4gICAgdGhpcy5jaGFycyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIC8qKlxuICAgICAqIFRoZSBsaW5lLWhlaWdodCBvZiB0aGUgZm9udCBmYWNlIGluIHBpeGVscy5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMubGluZUhlaWdodCA9IDA7XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGZvbnQgZmFjZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5mb250RmFtaWx5ID0gXCJcIjtcbiAgICAvKiogVGhlIG1ldHJpY3Mgb2YgdGhlIGZvbnQgZmFjZS4gKi9cbiAgICB0aGlzLmZvbnRNZXRyaWNzID0geyBmb250U2l6ZTogMCwgYXNjZW50OiAwLCBkZXNjZW50OiAwIH07XG4gICAgLyoqXG4gICAgICogVGhlIG9mZnNldCBvZiB0aGUgZm9udCBmYWNlIGZyb20gdGhlIGJhc2VsaW5lLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5iYXNlTGluZU9mZnNldCA9IDA7XG4gICAgLyoqIFRoZSByYW5nZSBhbmQgdHlwZSBvZiB0aGUgZGlzdGFuY2UgZmllbGQgZm9yIHRoaXMgZm9udC4gKi9cbiAgICB0aGlzLmRpc3RhbmNlRmllbGQgPSB7IHR5cGU6IFwibm9uZVwiLCByYW5nZTogMCB9O1xuICAgIC8qKiBUaGUgbWFwIG9mIGJhc2UgcGFnZSB0ZXh0dXJlcyAoaS5lLiwgc2hlZXRzIG9mIGdseXBocykuICovXG4gICAgdGhpcy5wYWdlcyA9IFtdO1xuICAgIC8qKiBzaG91bGQgdGhlIGZpbGwgZm9yIHRoaXMgZm9udCBiZSBhcHBsaWVkIGFzIGEgdGludCB0byB0aGUgdGV4dC4gKi9cbiAgICB0aGlzLmFwcGx5RmlsbEFzVGludCA9IHRydWU7XG4gICAgLyoqIFRoZSBzaXplIG9mIHRoZSBmb250IGZhY2UgaW4gcGl4ZWxzLiAqL1xuICAgIHRoaXMuYmFzZU1lYXN1cmVtZW50Rm9udFNpemUgPSAxMDA7XG4gICAgdGhpcy5iYXNlUmVuZGVyZWRGb250U2l6ZSA9IDEwMDtcbiAgfVxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGZvbnQgZmFjZS5cbiAgICogQGRlcHJlY2F0ZWQgc2luY2UgOC4wLjAgVXNlIGBmb250RmFtaWx5YCBpbnN0ZWFkLlxuICAgKi9cbiAgZ2V0IGZvbnQoKSB7XG4gICAgZGVwcmVjYXRpb24odjhfMF8wLCBcIkJpdG1hcEZvbnQuZm9udCBpcyBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIEJpdG1hcEZvbnQuZm9udEZhbWlseSBpbnN0ZWFkLlwiKTtcbiAgICByZXR1cm4gdGhpcy5mb250RmFtaWx5O1xuICB9XG4gIC8qKlxuICAgKiBUaGUgbWFwIG9mIGJhc2UgcGFnZSB0ZXh0dXJlcyAoaS5lLiwgc2hlZXRzIG9mIGdseXBocykuXG4gICAqIEBkZXByZWNhdGVkIHNpbmNlIDguMC4wIFVzZSBgcGFnZXNgIGluc3RlYWQuXG4gICAqL1xuICBnZXQgcGFnZVRleHR1cmVzKCkge1xuICAgIGRlcHJlY2F0aW9uKHY4XzBfMCwgXCJCaXRtYXBGb250LnBhZ2VUZXh0dXJlcyBpcyBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIEJpdG1hcEZvbnQucGFnZXMgaW5zdGVhZC5cIik7XG4gICAgcmV0dXJuIHRoaXMucGFnZXM7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBmb250IGZhY2UgaW4gcGl4ZWxzLlxuICAgKiBAZGVwcmVjYXRlZCBzaW5jZSA4LjAuMCBVc2UgYGZvbnRNZXRyaWNzLmZvbnRTaXplYCBpbnN0ZWFkLlxuICAgKi9cbiAgZ2V0IHNpemUoKSB7XG4gICAgZGVwcmVjYXRpb24odjhfMF8wLCBcIkJpdG1hcEZvbnQuc2l6ZSBpcyBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIEJpdG1hcEZvbnQuZm9udE1ldHJpY3MuZm9udFNpemUgaW5zdGVhZC5cIik7XG4gICAgcmV0dXJuIHRoaXMuZm9udE1ldHJpY3MuZm9udFNpemU7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBraW5kIG9mIGRpc3RhbmNlIGZpZWxkIGZvciB0aGlzIGZvbnQgb3IgXCJub25lXCIuXG4gICAqIEBkZXByZWNhdGVkIHNpbmNlIDguMC4wIFVzZSBgZGlzdGFuY2VGaWVsZC50eXBlYCBpbnN0ZWFkLlxuICAgKi9cbiAgZ2V0IGRpc3RhbmNlRmllbGRSYW5nZSgpIHtcbiAgICBkZXByZWNhdGlvbih2OF8wXzAsIFwiQml0bWFwRm9udC5kaXN0YW5jZUZpZWxkUmFuZ2UgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBCaXRtYXBGb250LmRpc3RhbmNlRmllbGQucmFuZ2UgaW5zdGVhZC5cIik7XG4gICAgcmV0dXJuIHRoaXMuZGlzdGFuY2VGaWVsZC5yYW5nZTtcbiAgfVxuICAvKipcbiAgICogVGhlIHJhbmdlIG9mIHRoZSBkaXN0YW5jZSBmaWVsZCBpbiBwaXhlbHMuXG4gICAqIEBkZXByZWNhdGVkIHNpbmNlIDguMC4wIFVzZSBgZGlzdGFuY2VGaWVsZC5yYW5nZWAgaW5zdGVhZC5cbiAgICovXG4gIGdldCBkaXN0YW5jZUZpZWxkVHlwZSgpIHtcbiAgICBkZXByZWNhdGlvbih2OF8wXzAsIFwiQml0bWFwRm9udC5kaXN0YW5jZUZpZWxkVHlwZSBpcyBkZXByZWNhdGVkLCBwbGVhc2UgdXNlIEJpdG1hcEZvbnQuZGlzdGFuY2VGaWVsZC50eXBlIGluc3RlYWQuXCIpO1xuICAgIHJldHVybiB0aGlzLmRpc3RhbmNlRmllbGQudHlwZTtcbiAgfVxuICBkZXN0cm95KGRlc3Ryb3lUZXh0dXJlcyA9IGZhbHNlKSB7XG4gICAgdGhpcy5lbWl0KFwiZGVzdHJveVwiLCB0aGlzKTtcbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgIGZvciAoY29uc3QgaSBpbiB0aGlzLmNoYXJzKSB7XG4gICAgICB0aGlzLmNoYXJzW2ldLnRleHR1cmU/LmRlc3Ryb3koKTtcbiAgICB9XG4gICAgdGhpcy5jaGFycyA9IG51bGw7XG4gICAgaWYgKGRlc3Ryb3lUZXh0dXJlcykge1xuICAgICAgdGhpcy5wYWdlcy5mb3JFYWNoKChwYWdlKSA9PiBwYWdlLnRleHR1cmUuZGVzdHJveSh0cnVlKSk7XG4gICAgICB0aGlzLnBhZ2VzID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsgQWJzdHJhY3RCaXRtYXBGb250IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BYnN0cmFjdEJpdG1hcEZvbnQubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiByZXNvbHZlQ2hhcmFjdGVycyhjaGFycykge1xuICBpZiAoY2hhcnMgPT09IFwiXCIpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgaWYgKHR5cGVvZiBjaGFycyA9PT0gXCJzdHJpbmdcIikge1xuICAgIGNoYXJzID0gW2NoYXJzXTtcbiAgfVxuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDAsIGogPSBjaGFycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICBjb25zdCBpdGVtID0gY2hhcnNbaV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpIHtcbiAgICAgIGlmIChpdGVtLmxlbmd0aCAhPT0gMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFtCaXRtYXBGb250XTogSW52YWxpZCBjaGFyYWN0ZXIgcmFuZ2UgbGVuZ3RoLCBleHBlY3RpbmcgMiBnb3QgJHtpdGVtLmxlbmd0aH0uYCk7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVswXS5sZW5ndGggPT09IDAgfHwgaXRlbVsxXS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiW0JpdG1hcEZvbnRdOiBJbnZhbGlkIGNoYXJhY3RlciBkZWxpbWl0ZXIuXCIpO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3RhcnRDb2RlID0gaXRlbVswXS5jaGFyQ29kZUF0KDApO1xuICAgICAgY29uc3QgZW5kQ29kZSA9IGl0ZW1bMV0uY2hhckNvZGVBdCgwKTtcbiAgICAgIGlmIChlbmRDb2RlIDwgc3RhcnRDb2RlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIltCaXRtYXBGb250XTogSW52YWxpZCBjaGFyYWN0ZXIgcmFuZ2UuXCIpO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaTIgPSBzdGFydENvZGUsIGoyID0gZW5kQ29kZTsgaTIgPD0gajI7IGkyKyspIHtcbiAgICAgICAgcmVzdWx0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShpMikpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucHVzaCguLi5BcnJheS5mcm9tKGl0ZW0pKTtcbiAgICB9XG4gIH1cbiAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJbQml0bWFwRm9udF06IEVtcHR5IHNldCB3aGVuIHJlc29sdmluZyBjaGFyYWN0ZXJzLlwiKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgeyByZXNvbHZlQ2hhcmFjdGVycyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzb2x2ZUNoYXJhY3RlcnMubWpzLm1hcFxuIiwiaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi9jb2xvci9Db2xvci5tanMnO1xuaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vLi4vbWF0aHMvc2hhcGVzL1JlY3RhbmdsZS5tanMnO1xuaW1wb3J0IHsgQ2FudmFzUG9vbCB9IGZyb20gJy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3RleHR1cmUvQ2FudmFzUG9vbC5tanMnO1xuaW1wb3J0IHsgSW1hZ2VTb3VyY2UgfSBmcm9tICcuLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC90ZXh0dXJlL3NvdXJjZXMvSW1hZ2VTb3VyY2UubWpzJztcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC90ZXh0dXJlL1RleHR1cmUubWpzJztcbmltcG9ydCB7IGRlcHJlY2F0aW9uLCB2OF8wXzAgfSBmcm9tICcuLi8uLi91dGlscy9sb2dnaW5nL2RlcHJlY2F0aW9uLm1qcyc7XG5pbXBvcnQgeyBDYW52YXNUZXh0TWV0cmljcyB9IGZyb20gJy4uL3RleHQvY2FudmFzL0NhbnZhc1RleHRNZXRyaWNzLm1qcyc7XG5pbXBvcnQgeyBmb250U3RyaW5nRnJvbVRleHRTdHlsZSB9IGZyb20gJy4uL3RleHQvY2FudmFzL3V0aWxzL2ZvbnRTdHJpbmdGcm9tVGV4dFN0eWxlLm1qcyc7XG5pbXBvcnQgeyBnZXRDYW52YXNGaWxsU3R5bGUgfSBmcm9tICcuLi90ZXh0L2NhbnZhcy91dGlscy9nZXRDYW52YXNGaWxsU3R5bGUubWpzJztcbmltcG9ydCB7IFRleHRTdHlsZSB9IGZyb20gJy4uL3RleHQvVGV4dFN0eWxlLm1qcyc7XG5pbXBvcnQgeyBBYnN0cmFjdEJpdG1hcEZvbnQgfSBmcm9tICcuL0Fic3RyYWN0Qml0bWFwRm9udC5tanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUNoYXJhY3RlcnMgfSBmcm9tICcuL3V0aWxzL3Jlc29sdmVDaGFyYWN0ZXJzLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY29uc3QgX0R5bmFtaWNCaXRtYXBGb250ID0gY2xhc3MgX0R5bmFtaWNCaXRtYXBGb250IGV4dGVuZHMgQWJzdHJhY3RCaXRtYXBGb250IHtcbiAgLyoqXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSBkeW5hbWljIGJpdG1hcCBmb250LlxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgLyoqXG4gICAgICogdGhpcyBpcyBhIHJlc29sdXRpb24gbW9kaWZpZXIgZm9yIHRoZSBmb250IHNpemUuLlxuICAgICAqIHRleHR1cmUgcmVzb2x1dGlvbiB3aWxsIGFsc28gYmUgdXNlZCB0byBzY2FsZSB0ZXh0dXJlIGFjY29yZGluZyB0byBpdHMgZm9udCBzaXplIGFsc29cbiAgICAgKi9cbiAgICB0aGlzLnJlc29sdXRpb24gPSAxO1xuICAgIC8qKiBUaGUgcGFnZXMgb2YgdGhlIGZvbnQuICovXG4gICAgdGhpcy5wYWdlcyA9IFtdO1xuICAgIHRoaXMuX3BhZGRpbmcgPSAwO1xuICAgIHRoaXMuX21lYXN1cmVDYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2N1cnJlbnRDaGFycyA9IFtdO1xuICAgIHRoaXMuX2N1cnJlbnRYID0gMDtcbiAgICB0aGlzLl9jdXJyZW50WSA9IDA7XG4gICAgdGhpcy5fY3VycmVudFBhZ2VJbmRleCA9IC0xO1xuICAgIHRoaXMuX3NraXBLZXJuaW5nID0gZmFsc2U7XG4gICAgY29uc3QgZHluYW1pY09wdGlvbnMgPSB7IC4uLl9EeW5hbWljQml0bWFwRm9udC5kZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9ucyB9O1xuICAgIHRoaXMuX3RleHR1cmVTaXplID0gZHluYW1pY09wdGlvbnMudGV4dHVyZVNpemU7XG4gICAgdGhpcy5fbWlwbWFwID0gZHluYW1pY09wdGlvbnMubWlwbWFwO1xuICAgIGNvbnN0IHN0eWxlID0gZHluYW1pY09wdGlvbnMuc3R5bGUuY2xvbmUoKTtcbiAgICBpZiAoZHluYW1pY09wdGlvbnMub3ZlcnJpZGVGaWxsKSB7XG4gICAgICBzdHlsZS5fZmlsbC5jb2xvciA9IDE2Nzc3MjE1O1xuICAgICAgc3R5bGUuX2ZpbGwuYWxwaGEgPSAxO1xuICAgICAgc3R5bGUuX2ZpbGwudGV4dHVyZSA9IFRleHR1cmUuV0hJVEU7XG4gICAgICBzdHlsZS5fZmlsbC5maWxsID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5hcHBseUZpbGxBc1RpbnQgPSBkeW5hbWljT3B0aW9ucy5vdmVycmlkZUZpbGw7XG4gICAgY29uc3QgcmVxdWVzdGVkRm9udFNpemUgPSBzdHlsZS5mb250U2l6ZTtcbiAgICBzdHlsZS5mb250U2l6ZSA9IHRoaXMuYmFzZU1lYXN1cmVtZW50Rm9udFNpemU7XG4gICAgY29uc3QgZm9udCA9IGZvbnRTdHJpbmdGcm9tVGV4dFN0eWxlKHN0eWxlKTtcbiAgICBpZiAoZHluYW1pY09wdGlvbnMub3ZlcnJpZGVTaXplKSB7XG4gICAgICBpZiAoc3R5bGUuX3N0cm9rZSkge1xuICAgICAgICBzdHlsZS5fc3Ryb2tlLndpZHRoICo9IHRoaXMuYmFzZVJlbmRlcmVkRm9udFNpemUgLyByZXF1ZXN0ZWRGb250U2l6ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuZm9udFNpemUgPSB0aGlzLmJhc2VSZW5kZXJlZEZvbnRTaXplID0gcmVxdWVzdGVkRm9udFNpemU7XG4gICAgfVxuICAgIHRoaXMuX3N0eWxlID0gc3R5bGU7XG4gICAgdGhpcy5fc2tpcEtlcm5pbmcgPSBkeW5hbWljT3B0aW9ucy5za2lwS2VybmluZyA/PyBmYWxzZTtcbiAgICB0aGlzLnJlc29sdXRpb24gPSBkeW5hbWljT3B0aW9ucy5yZXNvbHV0aW9uID8/IDE7XG4gICAgdGhpcy5fcGFkZGluZyA9IGR5bmFtaWNPcHRpb25zLnBhZGRpbmcgPz8gNDtcbiAgICB0aGlzLmZvbnRNZXRyaWNzID0gQ2FudmFzVGV4dE1ldHJpY3MubWVhc3VyZUZvbnQoZm9udCk7XG4gICAgdGhpcy5saW5lSGVpZ2h0ID0gc3R5bGUubGluZUhlaWdodCB8fCB0aGlzLmZvbnRNZXRyaWNzLmZvbnRTaXplIHx8IHN0eWxlLmZvbnRTaXplO1xuICB9XG4gIGVuc3VyZUNoYXJhY3RlcnMoY2hhcnMpIHtcbiAgICBjb25zdCBjaGFyTGlzdCA9IHJlc29sdmVDaGFyYWN0ZXJzKGNoYXJzKS5maWx0ZXIoKGNoYXIpID0+ICF0aGlzLl9jdXJyZW50Q2hhcnMuaW5jbHVkZXMoY2hhcikpLmZpbHRlcigoY2hhciwgaW5kZXgsIHNlbGYpID0+IHNlbGYuaW5kZXhPZihjaGFyKSA9PT0gaW5kZXgpO1xuICAgIGlmICghY2hhckxpc3QubGVuZ3RoKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuX2N1cnJlbnRDaGFycyA9IFsuLi50aGlzLl9jdXJyZW50Q2hhcnMsIC4uLmNoYXJMaXN0XTtcbiAgICBsZXQgcGFnZURhdGE7XG4gICAgaWYgKHRoaXMuX2N1cnJlbnRQYWdlSW5kZXggPT09IC0xKSB7XG4gICAgICBwYWdlRGF0YSA9IHRoaXMuX25leHRQYWdlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhZ2VEYXRhID0gdGhpcy5wYWdlc1t0aGlzLl9jdXJyZW50UGFnZUluZGV4XTtcbiAgICB9XG4gICAgbGV0IHsgY2FudmFzLCBjb250ZXh0IH0gPSBwYWdlRGF0YS5jYW52YXNBbmRDb250ZXh0O1xuICAgIGxldCB0ZXh0dXJlU291cmNlID0gcGFnZURhdGEudGV4dHVyZS5zb3VyY2U7XG4gICAgY29uc3Qgc3R5bGUgPSB0aGlzLl9zdHlsZTtcbiAgICBsZXQgY3VycmVudFggPSB0aGlzLl9jdXJyZW50WDtcbiAgICBsZXQgY3VycmVudFkgPSB0aGlzLl9jdXJyZW50WTtcbiAgICBjb25zdCBmb250U2NhbGUgPSB0aGlzLmJhc2VSZW5kZXJlZEZvbnRTaXplIC8gdGhpcy5iYXNlTWVhc3VyZW1lbnRGb250U2l6ZTtcbiAgICBjb25zdCBwYWRkaW5nID0gdGhpcy5fcGFkZGluZyAqIGZvbnRTY2FsZTtcbiAgICBsZXQgbWF4Q2hhckhlaWdodCA9IDA7XG4gICAgbGV0IHNraXBUZXh0dXJlID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFyTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY2hhciA9IGNoYXJMaXN0W2ldO1xuICAgICAgY29uc3QgbWV0cmljcyA9IENhbnZhc1RleHRNZXRyaWNzLm1lYXN1cmVUZXh0KGNoYXIsIHN0eWxlLCBjYW52YXMsIGZhbHNlKTtcbiAgICAgIGNvbnN0IHRleHR1cmVHbHlwaFdpZHRoID0gTWF0aC5jZWlsKChzdHlsZS5mb250U3R5bGUgPT09IFwiaXRhbGljXCIgPyAyIDogMSkgKiBtZXRyaWNzLndpZHRoKTtcbiAgICAgIG1ldHJpY3MubGluZUhlaWdodCA9IG1ldHJpY3MuaGVpZ2h0O1xuICAgICAgY29uc3Qgd2lkdGggPSBtZXRyaWNzLndpZHRoICogZm9udFNjYWxlO1xuICAgICAgY29uc3QgaGVpZ2h0ID0gbWV0cmljcy5oZWlnaHQgKiBmb250U2NhbGU7XG4gICAgICBjb25zdCBwYWRkZWRXaWR0aCA9IHRleHR1cmVHbHlwaFdpZHRoICsgcGFkZGluZyAqIDI7XG4gICAgICBjb25zdCBwYWRkZWRIZWlnaHQgPSBoZWlnaHQgKyBwYWRkaW5nICogMjtcbiAgICAgIHNraXBUZXh0dXJlID0gZmFsc2U7XG4gICAgICBpZiAoY2hhciAhPT0gXCJcXG5cIiAmJiBjaGFyICE9PSBcIlxcclwiICYmIGNoYXIgIT09IFwiXHRcIiAmJiBjaGFyICE9PSBcIiBcIikge1xuICAgICAgICBza2lwVGV4dHVyZSA9IHRydWU7XG4gICAgICAgIG1heENoYXJIZWlnaHQgPSBNYXRoLmNlaWwoTWF0aC5tYXgocGFkZGVkSGVpZ2h0LCBtYXhDaGFySGVpZ2h0KSk7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFggKyBwYWRkZWRXaWR0aCA+IHRoaXMuX3RleHR1cmVTaXplKSB7XG4gICAgICAgIGN1cnJlbnRZICs9IG1heENoYXJIZWlnaHQ7XG4gICAgICAgIG1heENoYXJIZWlnaHQgPSBwYWRkZWRIZWlnaHQ7XG4gICAgICAgIGN1cnJlbnRYID0gMDtcbiAgICAgICAgaWYgKGN1cnJlbnRZICsgbWF4Q2hhckhlaWdodCA+IHRoaXMuX3RleHR1cmVTaXplKSB7XG4gICAgICAgICAgdGV4dHVyZVNvdXJjZS51cGRhdGUoKTtcbiAgICAgICAgICBjb25zdCBwYWdlRGF0YTIgPSB0aGlzLl9uZXh0UGFnZSgpO1xuICAgICAgICAgIGNhbnZhcyA9IHBhZ2VEYXRhMi5jYW52YXNBbmRDb250ZXh0LmNhbnZhcztcbiAgICAgICAgICBjb250ZXh0ID0gcGFnZURhdGEyLmNhbnZhc0FuZENvbnRleHQuY29udGV4dDtcbiAgICAgICAgICB0ZXh0dXJlU291cmNlID0gcGFnZURhdGEyLnRleHR1cmUuc291cmNlO1xuICAgICAgICAgIGN1cnJlbnRZID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgeEFkdmFuY2UgPSB3aWR0aCAvIGZvbnRTY2FsZSAtIChzdHlsZS5kcm9wU2hhZG93Py5kaXN0YW5jZSA/PyAwKSAtIChzdHlsZS5fc3Ryb2tlPy53aWR0aCA/PyAwKTtcbiAgICAgIHRoaXMuY2hhcnNbY2hhcl0gPSB7XG4gICAgICAgIGlkOiBjaGFyLmNvZGVQb2ludEF0KDApLFxuICAgICAgICB4T2Zmc2V0OiAtdGhpcy5fcGFkZGluZyxcbiAgICAgICAgeU9mZnNldDogLXRoaXMuX3BhZGRpbmcsXG4gICAgICAgIHhBZHZhbmNlLFxuICAgICAgICBrZXJuaW5nOiB7fVxuICAgICAgfTtcbiAgICAgIGlmIChza2lwVGV4dHVyZSkge1xuICAgICAgICB0aGlzLl9kcmF3R2x5cGgoXG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICBtZXRyaWNzLFxuICAgICAgICAgIGN1cnJlbnRYICsgcGFkZGluZyxcbiAgICAgICAgICBjdXJyZW50WSArIHBhZGRpbmcsXG4gICAgICAgICAgZm9udFNjYWxlLFxuICAgICAgICAgIHN0eWxlXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHB4ID0gdGV4dHVyZVNvdXJjZS53aWR0aCAqIGZvbnRTY2FsZTtcbiAgICAgICAgY29uc3QgcHkgPSB0ZXh0dXJlU291cmNlLmhlaWdodCAqIGZvbnRTY2FsZTtcbiAgICAgICAgY29uc3QgZnJhbWUgPSBuZXcgUmVjdGFuZ2xlKFxuICAgICAgICAgIGN1cnJlbnRYIC8gcHggKiB0ZXh0dXJlU291cmNlLndpZHRoLFxuICAgICAgICAgIGN1cnJlbnRZIC8gcHkgKiB0ZXh0dXJlU291cmNlLmhlaWdodCxcbiAgICAgICAgICBwYWRkZWRXaWR0aCAvIHB4ICogdGV4dHVyZVNvdXJjZS53aWR0aCxcbiAgICAgICAgICBwYWRkZWRIZWlnaHQgLyBweSAqIHRleHR1cmVTb3VyY2UuaGVpZ2h0XG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuY2hhcnNbY2hhcl0udGV4dHVyZSA9IG5ldyBUZXh0dXJlKHtcbiAgICAgICAgICBzb3VyY2U6IHRleHR1cmVTb3VyY2UsXG4gICAgICAgICAgZnJhbWVcbiAgICAgICAgfSk7XG4gICAgICAgIGN1cnJlbnRYICs9IE1hdGguY2VpbChwYWRkZWRXaWR0aCk7XG4gICAgICB9XG4gICAgfVxuICAgIHRleHR1cmVTb3VyY2UudXBkYXRlKCk7XG4gICAgdGhpcy5fY3VycmVudFggPSBjdXJyZW50WDtcbiAgICB0aGlzLl9jdXJyZW50WSA9IGN1cnJlbnRZO1xuICAgIHRoaXMuX3NraXBLZXJuaW5nICYmIHRoaXMuX2FwcGx5S2VybmluZyhjaGFyTGlzdCwgY29udGV4dCk7XG4gIH1cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHNpbmNlIDguMC4wXG4gICAqIFRoZSBtYXAgb2YgYmFzZSBwYWdlIHRleHR1cmVzIChpLmUuLCBzaGVldHMgb2YgZ2x5cGhzKS5cbiAgICovXG4gIGdldCBwYWdlVGV4dHVyZXMoKSB7XG4gICAgZGVwcmVjYXRpb24odjhfMF8wLCBcIkJpdG1hcEZvbnQucGFnZVRleHR1cmVzIGlzIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgQml0bWFwRm9udC5wYWdlcyBpbnN0ZWFkLlwiKTtcbiAgICByZXR1cm4gdGhpcy5wYWdlcztcbiAgfVxuICBfYXBwbHlLZXJuaW5nKG5ld0NoYXJzLCBjb250ZXh0KSB7XG4gICAgY29uc3QgbWVhc3VyZUNhY2hlID0gdGhpcy5fbWVhc3VyZUNhY2hlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3Q2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGZpcnN0ID0gbmV3Q2hhcnNbaV07XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuX2N1cnJlbnRDaGFycy5sZW5ndGg7IGorKykge1xuICAgICAgICBjb25zdCBzZWNvbmQgPSB0aGlzLl9jdXJyZW50Q2hhcnNbal07XG4gICAgICAgIGxldCBjMSA9IG1lYXN1cmVDYWNoZVtmaXJzdF07XG4gICAgICAgIGlmICghYzEpXG4gICAgICAgICAgYzEgPSBtZWFzdXJlQ2FjaGVbZmlyc3RdID0gY29udGV4dC5tZWFzdXJlVGV4dChmaXJzdCkud2lkdGg7XG4gICAgICAgIGxldCBjMiA9IG1lYXN1cmVDYWNoZVtzZWNvbmRdO1xuICAgICAgICBpZiAoIWMyKVxuICAgICAgICAgIGMyID0gbWVhc3VyZUNhY2hlW3NlY29uZF0gPSBjb250ZXh0Lm1lYXN1cmVUZXh0KHNlY29uZCkud2lkdGg7XG4gICAgICAgIGxldCB0b3RhbCA9IGNvbnRleHQubWVhc3VyZVRleHQoZmlyc3QgKyBzZWNvbmQpLndpZHRoO1xuICAgICAgICBsZXQgYW1vdW50ID0gdG90YWwgLSAoYzEgKyBjMik7XG4gICAgICAgIGlmIChhbW91bnQpIHtcbiAgICAgICAgICB0aGlzLmNoYXJzW2ZpcnN0XS5rZXJuaW5nW3NlY29uZF0gPSBhbW91bnQ7XG4gICAgICAgIH1cbiAgICAgICAgdG90YWwgPSBjb250ZXh0Lm1lYXN1cmVUZXh0KGZpcnN0ICsgc2Vjb25kKS53aWR0aDtcbiAgICAgICAgYW1vdW50ID0gdG90YWwgLSAoYzEgKyBjMik7XG4gICAgICAgIGlmIChhbW91bnQpIHtcbiAgICAgICAgICB0aGlzLmNoYXJzW3NlY29uZF0ua2VybmluZ1tmaXJzdF0gPSBhbW91bnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgX25leHRQYWdlKCkge1xuICAgIHRoaXMuX2N1cnJlbnRQYWdlSW5kZXgrKztcbiAgICBjb25zdCB0ZXh0dXJlUmVzb2x1dGlvbiA9IHRoaXMucmVzb2x1dGlvbjtcbiAgICBjb25zdCBjYW52YXNBbmRDb250ZXh0ID0gQ2FudmFzUG9vbC5nZXRPcHRpbWFsQ2FudmFzQW5kQ29udGV4dChcbiAgICAgIHRoaXMuX3RleHR1cmVTaXplLFxuICAgICAgdGhpcy5fdGV4dHVyZVNpemUsXG4gICAgICB0ZXh0dXJlUmVzb2x1dGlvblxuICAgICk7XG4gICAgdGhpcy5fc2V0dXBDb250ZXh0KGNhbnZhc0FuZENvbnRleHQuY29udGV4dCwgdGhpcy5fc3R5bGUsIHRleHR1cmVSZXNvbHV0aW9uKTtcbiAgICBjb25zdCByZXNvbHV0aW9uID0gdGV4dHVyZVJlc29sdXRpb24gKiAodGhpcy5iYXNlUmVuZGVyZWRGb250U2l6ZSAvIHRoaXMuYmFzZU1lYXN1cmVtZW50Rm9udFNpemUpO1xuICAgIGNvbnN0IHRleHR1cmUgPSBuZXcgVGV4dHVyZSh7XG4gICAgICBzb3VyY2U6IG5ldyBJbWFnZVNvdXJjZSh7XG4gICAgICAgIHJlc291cmNlOiBjYW52YXNBbmRDb250ZXh0LmNhbnZhcyxcbiAgICAgICAgcmVzb2x1dGlvbixcbiAgICAgICAgYWxwaGFNb2RlOiBcInByZW11bHRpcGx5LWFscGhhLW9uLXVwbG9hZFwiLFxuICAgICAgICBhdXRvR2VuZXJhdGVNaXBtYXBzOiB0aGlzLl9taXBtYXBcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgY29uc3QgcGFnZURhdGEgPSB7XG4gICAgICBjYW52YXNBbmRDb250ZXh0LFxuICAgICAgdGV4dHVyZVxuICAgIH07XG4gICAgdGhpcy5wYWdlc1t0aGlzLl9jdXJyZW50UGFnZUluZGV4XSA9IHBhZ2VEYXRhO1xuICAgIHJldHVybiBwYWdlRGF0YTtcbiAgfVxuICAvLyBjYW52YXMgc3R5bGUhXG4gIF9zZXR1cENvbnRleHQoY29udGV4dCwgc3R5bGUsIHJlc29sdXRpb24pIHtcbiAgICBzdHlsZS5mb250U2l6ZSA9IHRoaXMuYmFzZVJlbmRlcmVkRm9udFNpemU7XG4gICAgY29udGV4dC5zY2FsZShyZXNvbHV0aW9uLCByZXNvbHV0aW9uKTtcbiAgICBjb250ZXh0LmZvbnQgPSBmb250U3RyaW5nRnJvbVRleHRTdHlsZShzdHlsZSk7XG4gICAgc3R5bGUuZm9udFNpemUgPSB0aGlzLmJhc2VNZWFzdXJlbWVudEZvbnRTaXplO1xuICAgIGNvbnRleHQudGV4dEJhc2VsaW5lID0gc3R5bGUudGV4dEJhc2VsaW5lO1xuICAgIGNvbnN0IHN0cm9rZSA9IHN0eWxlLl9zdHJva2U7XG4gICAgY29uc3Qgc3Ryb2tlVGhpY2tuZXNzID0gc3Ryb2tlPy53aWR0aCA/PyAwO1xuICAgIGlmIChzdHJva2UpIHtcbiAgICAgIGNvbnRleHQubGluZVdpZHRoID0gc3Ryb2tlVGhpY2tuZXNzO1xuICAgICAgY29udGV4dC5saW5lSm9pbiA9IHN0cm9rZS5qb2luO1xuICAgICAgY29udGV4dC5taXRlckxpbWl0ID0gc3Ryb2tlLm1pdGVyTGltaXQ7XG4gICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gZ2V0Q2FudmFzRmlsbFN0eWxlKHN0cm9rZSwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChzdHlsZS5fZmlsbCkge1xuICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBnZXRDYW52YXNGaWxsU3R5bGUoc3R5bGUuX2ZpbGwsIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAoc3R5bGUuZHJvcFNoYWRvdykge1xuICAgICAgY29uc3Qgc2hhZG93T3B0aW9ucyA9IHN0eWxlLmRyb3BTaGFkb3c7XG4gICAgICBjb25zdCByZ2IgPSBDb2xvci5zaGFyZWQuc2V0VmFsdWUoc2hhZG93T3B0aW9ucy5jb2xvcikudG9BcnJheSgpO1xuICAgICAgY29uc3QgZHJvcFNoYWRvd0JsdXIgPSBzaGFkb3dPcHRpb25zLmJsdXIgKiByZXNvbHV0aW9uO1xuICAgICAgY29uc3QgZHJvcFNoYWRvd0Rpc3RhbmNlID0gc2hhZG93T3B0aW9ucy5kaXN0YW5jZSAqIHJlc29sdXRpb247XG4gICAgICBjb250ZXh0LnNoYWRvd0NvbG9yID0gYHJnYmEoJHtyZ2JbMF0gKiAyNTV9LCR7cmdiWzFdICogMjU1fSwke3JnYlsyXSAqIDI1NX0sJHtzaGFkb3dPcHRpb25zLmFscGhhfSlgO1xuICAgICAgY29udGV4dC5zaGFkb3dCbHVyID0gZHJvcFNoYWRvd0JsdXI7XG4gICAgICBjb250ZXh0LnNoYWRvd09mZnNldFggPSBNYXRoLmNvcyhzaGFkb3dPcHRpb25zLmFuZ2xlKSAqIGRyb3BTaGFkb3dEaXN0YW5jZTtcbiAgICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WSA9IE1hdGguc2luKHNoYWRvd09wdGlvbnMuYW5nbGUpICogZHJvcFNoYWRvd0Rpc3RhbmNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZXh0LnNoYWRvd0NvbG9yID0gXCJibGFja1wiO1xuICAgICAgY29udGV4dC5zaGFkb3dCbHVyID0gMDtcbiAgICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WCA9IDA7XG4gICAgICBjb250ZXh0LnNoYWRvd09mZnNldFkgPSAwO1xuICAgIH1cbiAgfVxuICBfZHJhd0dseXBoKGNvbnRleHQsIG1ldHJpY3MsIHgsIHksIGZvbnRTY2FsZSwgc3R5bGUpIHtcbiAgICBjb25zdCBjaGFyID0gbWV0cmljcy50ZXh0O1xuICAgIGNvbnN0IGZvbnRQcm9wZXJ0aWVzID0gbWV0cmljcy5mb250UHJvcGVydGllcztcbiAgICBjb25zdCBzdHJva2UgPSBzdHlsZS5fc3Ryb2tlO1xuICAgIGNvbnN0IHN0cm9rZVRoaWNrbmVzcyA9IChzdHJva2U/LndpZHRoID8/IDApICogZm9udFNjYWxlO1xuICAgIGNvbnN0IHR4ID0geCArIHN0cm9rZVRoaWNrbmVzcyAvIDI7XG4gICAgY29uc3QgdHkgPSB5IC0gc3Ryb2tlVGhpY2tuZXNzIC8gMjtcbiAgICBjb25zdCBkZXNjZW50ID0gZm9udFByb3BlcnRpZXMuZGVzY2VudCAqIGZvbnRTY2FsZTtcbiAgICBjb25zdCBsaW5lSGVpZ2h0ID0gbWV0cmljcy5saW5lSGVpZ2h0ICogZm9udFNjYWxlO1xuICAgIGlmIChzdHlsZS5zdHJva2UgJiYgc3Ryb2tlVGhpY2tuZXNzKSB7XG4gICAgICBjb250ZXh0LnN0cm9rZVRleHQoY2hhciwgdHgsIHR5ICsgbGluZUhlaWdodCAtIGRlc2NlbnQpO1xuICAgIH1cbiAgICBpZiAoc3R5bGUuX2ZpbGwpIHtcbiAgICAgIGNvbnRleHQuZmlsbFRleHQoY2hhciwgdHgsIHR5ICsgbGluZUhlaWdodCAtIGRlc2NlbnQpO1xuICAgIH1cbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHsgY2FudmFzQW5kQ29udGV4dCwgdGV4dHVyZSB9ID0gdGhpcy5wYWdlc1tpXTtcbiAgICAgIENhbnZhc1Bvb2wucmV0dXJuQ2FudmFzQW5kQ29udGV4dChjYW52YXNBbmRDb250ZXh0KTtcbiAgICAgIHRleHR1cmUuZGVzdHJveSh0cnVlKTtcbiAgICB9XG4gICAgdGhpcy5wYWdlcyA9IG51bGw7XG4gIH1cbn07XG5fRHluYW1pY0JpdG1hcEZvbnQuZGVmYXVsdE9wdGlvbnMgPSB7XG4gIHRleHR1cmVTaXplOiA1MTIsXG4gIHN0eWxlOiBuZXcgVGV4dFN0eWxlKCksXG4gIG1pcG1hcDogdHJ1ZVxufTtcbmxldCBEeW5hbWljQml0bWFwRm9udCA9IF9EeW5hbWljQml0bWFwRm9udDtcblxuZXhwb3J0IHsgRHluYW1pY0JpdG1hcEZvbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUR5bmFtaWNCaXRtYXBGb250Lm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gZ2V0Qml0bWFwVGV4dExheW91dChjaGFycywgc3R5bGUsIGZvbnQsIHRyaW1FbmQpIHtcbiAgY29uc3QgbGF5b3V0RGF0YSA9IHtcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDAsXG4gICAgb2Zmc2V0WTogMCxcbiAgICBzY2FsZTogc3R5bGUuZm9udFNpemUgLyBmb250LmJhc2VNZWFzdXJlbWVudEZvbnRTaXplLFxuICAgIGxpbmVzOiBbe1xuICAgICAgd2lkdGg6IDAsXG4gICAgICBjaGFyUG9zaXRpb25zOiBbXSxcbiAgICAgIHNwYWNlV2lkdGg6IDAsXG4gICAgICBzcGFjZXNJbmRleDogW10sXG4gICAgICBjaGFyczogW11cbiAgICB9XVxuICB9O1xuICBsYXlvdXREYXRhLm9mZnNldFkgPSBmb250LmJhc2VMaW5lT2Zmc2V0O1xuICBsZXQgY3VycmVudExpbmUgPSBsYXlvdXREYXRhLmxpbmVzWzBdO1xuICBsZXQgcHJldmlvdXNDaGFyID0gbnVsbDtcbiAgbGV0IGZpcnN0V29yZCA9IHRydWU7XG4gIGNvbnN0IGN1cnJlbnRXb3JkID0ge1xuICAgIHNwYWNlV29yZDogZmFsc2UsXG4gICAgd2lkdGg6IDAsXG4gICAgc3RhcnQ6IDAsXG4gICAgaW5kZXg6IDAsXG4gICAgLy8gdXNlIGluZGV4IHRvIG5vdCBtb2RpZnkgdGhlIGFycmF5IGFzIHdlIHVzZSBpdCBhIGxvdCFcbiAgICBwb3NpdGlvbnM6IFtdLFxuICAgIGNoYXJzOiBbXVxuICB9O1xuICBjb25zdCBuZXh0V29yZCA9ICh3b3JkKSA9PiB7XG4gICAgY29uc3Qgc3RhcnQgPSBjdXJyZW50TGluZS53aWR0aDtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGN1cnJlbnRXb3JkLmluZGV4OyBqKyspIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gd29yZC5wb3NpdGlvbnNbal07XG4gICAgICBjdXJyZW50TGluZS5jaGFycy5wdXNoKHdvcmQuY2hhcnNbal0pO1xuICAgICAgY3VycmVudExpbmUuY2hhclBvc2l0aW9ucy5wdXNoKHBvc2l0aW9uICsgc3RhcnQpO1xuICAgIH1cbiAgICBjdXJyZW50TGluZS53aWR0aCArPSB3b3JkLndpZHRoO1xuICAgIGZpcnN0V29yZCA9IGZhbHNlO1xuICAgIGN1cnJlbnRXb3JkLndpZHRoID0gMDtcbiAgICBjdXJyZW50V29yZC5pbmRleCA9IDA7XG4gICAgY3VycmVudFdvcmQuY2hhcnMubGVuZ3RoID0gMDtcbiAgfTtcbiAgY29uc3QgbmV4dExpbmUgPSAoKSA9PiB7XG4gICAgbGV0IGluZGV4ID0gY3VycmVudExpbmUuY2hhcnMubGVuZ3RoIC0gMTtcbiAgICBpZiAodHJpbUVuZCkge1xuICAgICAgbGV0IGxhc3RDaGFyID0gY3VycmVudExpbmUuY2hhcnNbaW5kZXhdO1xuICAgICAgd2hpbGUgKGxhc3RDaGFyID09PSBcIiBcIikge1xuICAgICAgICBjdXJyZW50TGluZS53aWR0aCAtPSBmb250LmNoYXJzW2xhc3RDaGFyXS54QWR2YW5jZTtcbiAgICAgICAgbGFzdENoYXIgPSBjdXJyZW50TGluZS5jaGFyc1stLWluZGV4XTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGF5b3V0RGF0YS53aWR0aCA9IE1hdGgubWF4KGxheW91dERhdGEud2lkdGgsIGN1cnJlbnRMaW5lLndpZHRoKTtcbiAgICBjdXJyZW50TGluZSA9IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgY2hhclBvc2l0aW9uczogW10sXG4gICAgICBjaGFyczogW10sXG4gICAgICBzcGFjZVdpZHRoOiAwLFxuICAgICAgc3BhY2VzSW5kZXg6IFtdXG4gICAgfTtcbiAgICBmaXJzdFdvcmQgPSB0cnVlO1xuICAgIGxheW91dERhdGEubGluZXMucHVzaChjdXJyZW50TGluZSk7XG4gICAgbGF5b3V0RGF0YS5oZWlnaHQgKz0gZm9udC5saW5lSGVpZ2h0O1xuICB9O1xuICBjb25zdCBzY2FsZSA9IGZvbnQuYmFzZU1lYXN1cmVtZW50Rm9udFNpemUgLyBzdHlsZS5mb250U2l6ZTtcbiAgY29uc3QgYWRqdXN0ZWRMZXR0ZXJTcGFjaW5nID0gc3R5bGUubGV0dGVyU3BhY2luZyAqIHNjYWxlO1xuICBjb25zdCBhZGp1c3RlZFdvcmRXcmFwV2lkdGggPSBzdHlsZS53b3JkV3JhcFdpZHRoICogc2NhbGU7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoICsgMTsgaSsrKSB7XG4gICAgbGV0IGNoYXI7XG4gICAgY29uc3QgaXNFbmQgPSBpID09PSBjaGFycy5sZW5ndGg7XG4gICAgaWYgKCFpc0VuZCkge1xuICAgICAgY2hhciA9IGNoYXJzW2ldO1xuICAgIH1cbiAgICBjb25zdCBjaGFyRGF0YSA9IGZvbnQuY2hhcnNbY2hhcl0gfHwgZm9udC5jaGFyc1tcIiBcIl07XG4gICAgY29uc3QgaXNTcGFjZSA9IC8oPzpcXHMpLy50ZXN0KGNoYXIpO1xuICAgIGNvbnN0IGlzV29yZEJyZWFrID0gaXNTcGFjZSB8fCBjaGFyID09PSBcIlxcclwiIHx8IGNoYXIgPT09IFwiXFxuXCIgfHwgaXNFbmQ7XG4gICAgaWYgKGlzV29yZEJyZWFrKSB7XG4gICAgICBjb25zdCBhZGRXb3JkVG9OZXh0TGluZSA9ICFmaXJzdFdvcmQgJiYgc3R5bGUud29yZFdyYXAgJiYgY3VycmVudExpbmUud2lkdGggKyBjdXJyZW50V29yZC53aWR0aCAtIGFkanVzdGVkTGV0dGVyU3BhY2luZyA+IGFkanVzdGVkV29yZFdyYXBXaWR0aDtcbiAgICAgIGlmIChhZGRXb3JkVG9OZXh0TGluZSkge1xuICAgICAgICBuZXh0TGluZSgpO1xuICAgICAgICBuZXh0V29yZChjdXJyZW50V29yZCk7XG4gICAgICAgIGlmICghaXNFbmQpIHtcbiAgICAgICAgICBjdXJyZW50TGluZS5jaGFyUG9zaXRpb25zLnB1c2goMCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnRXb3JkLnN0YXJ0ID0gY3VycmVudExpbmUud2lkdGg7XG4gICAgICAgIG5leHRXb3JkKGN1cnJlbnRXb3JkKTtcbiAgICAgICAgaWYgKCFpc0VuZCkge1xuICAgICAgICAgIGN1cnJlbnRMaW5lLmNoYXJQb3NpdGlvbnMucHVzaCgwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNoYXIgPT09IFwiXFxyXCIgfHwgY2hhciA9PT0gXCJcXG5cIikge1xuICAgICAgICBpZiAoY3VycmVudExpbmUud2lkdGggIT09IDApIHtcbiAgICAgICAgICBuZXh0TGluZSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFpc0VuZCkge1xuICAgICAgICBjb25zdCBzcGFjZVdpZHRoID0gY2hhckRhdGEueEFkdmFuY2UgKyAoY2hhckRhdGEua2VybmluZ1twcmV2aW91c0NoYXJdIHx8IDApICsgYWRqdXN0ZWRMZXR0ZXJTcGFjaW5nO1xuICAgICAgICBjdXJyZW50TGluZS53aWR0aCArPSBzcGFjZVdpZHRoO1xuICAgICAgICBjdXJyZW50TGluZS5zcGFjZVdpZHRoID0gc3BhY2VXaWR0aDtcbiAgICAgICAgY3VycmVudExpbmUuc3BhY2VzSW5kZXgucHVzaChjdXJyZW50TGluZS5jaGFyUG9zaXRpb25zLmxlbmd0aCk7XG4gICAgICAgIGN1cnJlbnRMaW5lLmNoYXJzLnB1c2goY2hhcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGtlcm5pbmcgPSBjaGFyRGF0YS5rZXJuaW5nW3ByZXZpb3VzQ2hhcl0gfHwgMDtcbiAgICAgIGNvbnN0IG5leHRDaGFyV2lkdGggPSBjaGFyRGF0YS54QWR2YW5jZSArIGtlcm5pbmcgKyBhZGp1c3RlZExldHRlclNwYWNpbmc7XG4gICAgICBjdXJyZW50V29yZC5wb3NpdGlvbnNbY3VycmVudFdvcmQuaW5kZXgrK10gPSBjdXJyZW50V29yZC53aWR0aCArIGtlcm5pbmc7XG4gICAgICBjdXJyZW50V29yZC5jaGFycy5wdXNoKGNoYXIpO1xuICAgICAgY3VycmVudFdvcmQud2lkdGggKz0gbmV4dENoYXJXaWR0aDtcbiAgICB9XG4gICAgcHJldmlvdXNDaGFyID0gY2hhcjtcbiAgfVxuICBuZXh0TGluZSgpO1xuICBpZiAoc3R5bGUuYWxpZ24gPT09IFwiY2VudGVyXCIpIHtcbiAgICBhbGlnbkNlbnRlcihsYXlvdXREYXRhKTtcbiAgfSBlbHNlIGlmIChzdHlsZS5hbGlnbiA9PT0gXCJyaWdodFwiKSB7XG4gICAgYWxpZ25SaWdodChsYXlvdXREYXRhKTtcbiAgfSBlbHNlIGlmIChzdHlsZS5hbGlnbiA9PT0gXCJqdXN0aWZ5XCIpIHtcbiAgICBhbGlnbkp1c3RpZnkobGF5b3V0RGF0YSk7XG4gIH1cbiAgcmV0dXJuIGxheW91dERhdGE7XG59XG5mdW5jdGlvbiBhbGlnbkNlbnRlcihtZWFzdXJlbWVudERhdGEpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZWFzdXJlbWVudERhdGEubGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBsaW5lID0gbWVhc3VyZW1lbnREYXRhLmxpbmVzW2ldO1xuICAgIGNvbnN0IG9mZnNldCA9IG1lYXN1cmVtZW50RGF0YS53aWR0aCAvIDIgLSBsaW5lLndpZHRoIC8gMjtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxpbmUuY2hhclBvc2l0aW9ucy5sZW5ndGg7IGorKykge1xuICAgICAgbGluZS5jaGFyUG9zaXRpb25zW2pdICs9IG9mZnNldDtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGFsaWduUmlnaHQobWVhc3VyZW1lbnREYXRhKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWVhc3VyZW1lbnREYXRhLmxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgbGluZSA9IG1lYXN1cmVtZW50RGF0YS5saW5lc1tpXTtcbiAgICBjb25zdCBvZmZzZXQgPSBtZWFzdXJlbWVudERhdGEud2lkdGggLSBsaW5lLndpZHRoO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGluZS5jaGFyUG9zaXRpb25zLmxlbmd0aDsgaisrKSB7XG4gICAgICBsaW5lLmNoYXJQb3NpdGlvbnNbal0gKz0gb2Zmc2V0O1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gYWxpZ25KdXN0aWZ5KG1lYXN1cmVtZW50RGF0YSkge1xuICBjb25zdCB3aWR0aCA9IG1lYXN1cmVtZW50RGF0YS53aWR0aDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZWFzdXJlbWVudERhdGEubGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBsaW5lID0gbWVhc3VyZW1lbnREYXRhLmxpbmVzW2ldO1xuICAgIGxldCBpbmR5ID0gMDtcbiAgICBsZXQgc3BhY2VJbmRleCA9IGxpbmUuc3BhY2VzSW5kZXhbaW5keSsrXTtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBjb25zdCB0b3RhbFNwYWNlcyA9IGxpbmUuc3BhY2VzSW5kZXgubGVuZ3RoO1xuICAgIGNvbnN0IG5ld1NwYWNlV2lkdGggPSAod2lkdGggLSBsaW5lLndpZHRoKSAvIHRvdGFsU3BhY2VzO1xuICAgIGNvbnN0IHNwYWNlV2lkdGggPSBuZXdTcGFjZVdpZHRoO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGluZS5jaGFyUG9zaXRpb25zLmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAoaiA9PT0gc3BhY2VJbmRleCkge1xuICAgICAgICBzcGFjZUluZGV4ID0gbGluZS5zcGFjZXNJbmRleFtpbmR5KytdO1xuICAgICAgICBvZmZzZXQgKz0gc3BhY2VXaWR0aDtcbiAgICAgIH1cbiAgICAgIGxpbmUuY2hhclBvc2l0aW9uc1tqXSArPSBvZmZzZXQ7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IGdldEJpdG1hcFRleHRMYXlvdXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldEJpdG1hcFRleHRMYXlvdXQubWpzLm1hcFxuIiwiaW1wb3J0IHsgQ2FjaGUgfSBmcm9tICcuLi8uLi9hc3NldHMvY2FjaGUvQ2FjaGUubWpzJztcbmltcG9ydCB7IGRlcHJlY2F0aW9uLCB2OF8wXzAgfSBmcm9tICcuLi8uLi91dGlscy9sb2dnaW5nL2RlcHJlY2F0aW9uLm1qcyc7XG5pbXBvcnQgeyB3YXJuIH0gZnJvbSAnLi4vLi4vdXRpbHMvbG9nZ2luZy93YXJuLm1qcyc7XG5pbXBvcnQgeyBUZXh0U3R5bGUgfSBmcm9tICcuLi90ZXh0L1RleHRTdHlsZS5tanMnO1xuaW1wb3J0IHsgRHluYW1pY0JpdG1hcEZvbnQgfSBmcm9tICcuL0R5bmFtaWNCaXRtYXBGb250Lm1qcyc7XG5pbXBvcnQgeyBnZXRCaXRtYXBUZXh0TGF5b3V0IH0gZnJvbSAnLi91dGlscy9nZXRCaXRtYXBUZXh0TGF5b3V0Lm1qcyc7XG5pbXBvcnQgeyByZXNvbHZlQ2hhcmFjdGVycyB9IGZyb20gJy4vdXRpbHMvcmVzb2x2ZUNoYXJhY3RlcnMubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5sZXQgZm9udENvdW50ID0gMDtcbmNsYXNzIEJpdG1hcEZvbnRNYW5hZ2VyQ2xhc3Mge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGNoYXJhY3RlciBzZXQgaW5jbHVkZXMgYWxsIHRoZSBsZXR0ZXJzIGluIHRoZSBhbHBoYWJldCAoYm90aCBsb3dlci0gYW5kIHVwcGVyLSBjYXNlKS5cbiAgICAgKiBAdHlwZSB7c3RyaW5nW11bXX1cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIEJpdG1hcEZvbnQuZnJvbSgnRXhhbXBsZUZvbnQnLCBzdHlsZSwgeyBjaGFyczogQml0bWFwRm9udC5BTFBIQSB9KVxuICAgICAqL1xuICAgIHRoaXMuQUxQSEEgPSBbW1wiYVwiLCBcInpcIl0sIFtcIkFcIiwgXCJaXCJdLCBcIiBcIl07XG4gICAgLyoqXG4gICAgICogVGhpcyBjaGFyYWN0ZXIgc2V0IGluY2x1ZGVzIGFsbCBkZWNpbWFsIGRpZ2l0cyAoZnJvbSAwIHRvIDkpLlxuICAgICAqIEB0eXBlIHtzdHJpbmdbXVtdfVxuICAgICAqIEBleGFtcGxlXG4gICAgICogQml0bWFwRm9udC5mcm9tKCdFeGFtcGxlRm9udCcsIHN0eWxlLCB7IGNoYXJzOiBCaXRtYXBGb250Lk5VTUVSSUMgfSlcbiAgICAgKi9cbiAgICB0aGlzLk5VTUVSSUMgPSBbW1wiMFwiLCBcIjlcIl1dO1xuICAgIC8qKlxuICAgICAqIFRoaXMgY2hhcmFjdGVyIHNldCBpcyB0aGUgdW5pb24gb2YgYEJpdG1hcEZvbnQuQUxQSEFgIGFuZCBgQml0bWFwRm9udC5OVU1FUklDYC5cbiAgICAgKiBAdHlwZSB7c3RyaW5nW11bXX1cbiAgICAgKi9cbiAgICB0aGlzLkFMUEhBTlVNRVJJQyA9IFtbXCJhXCIsIFwielwiXSwgW1wiQVwiLCBcIlpcIl0sIFtcIjBcIiwgXCI5XCJdLCBcIiBcIl07XG4gICAgLyoqXG4gICAgICogVGhpcyBjaGFyYWN0ZXIgc2V0IGNvbnNpc3RzIG9mIGFsbCB0aGUgQVNDSUkgdGFibGUuXG4gICAgICogQG1lbWJlciB7c3RyaW5nW11bXX1cbiAgICAgKiBAc2VlIGh0dHA6Ly93d3cuYXNjaWl0YWJsZS5jb20vXG4gICAgICovXG4gICAgdGhpcy5BU0NJSSA9IFtbXCIgXCIsIFwiflwiXV07XG4gICAgLyoqIERlZmF1bHQgb3B0aW9ucyBmb3IgaW5zdGFsbGluZyBhIG5ldyBCaXRtYXBGb250LiAqL1xuICAgIHRoaXMuZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICBjaGFyczogdGhpcy5BTFBIQU5VTUVSSUMsXG4gICAgICByZXNvbHV0aW9uOiAxLFxuICAgICAgcGFkZGluZzogNCxcbiAgICAgIHNraXBLZXJuaW5nOiBmYWxzZVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIGZvbnQgZm9yIHRoZSBzcGVjaWZpZWQgdGV4dCBhbmQgc3R5bGUuXG4gICAqIEBwYXJhbSB0ZXh0IC0gVGhlIHRleHQgdG8gZ2V0IHRoZSBmb250IGZvclxuICAgKiBAcGFyYW0gc3R5bGUgLSBUaGUgc3R5bGUgdG8gdXNlXG4gICAqL1xuICBnZXRGb250KHRleHQsIHN0eWxlKSB7XG4gICAgbGV0IGZvbnRGYW1pbHlLZXkgPSBgJHtzdHlsZS5mb250RmFtaWx5fS1iaXRtYXBgO1xuICAgIGxldCBvdmVycmlkZUZpbGwgPSB0cnVlO1xuICAgIGlmIChzdHlsZS5fZmlsbC5maWxsICYmICFzdHlsZS5fc3Ryb2tlKSB7XG4gICAgICBmb250RmFtaWx5S2V5ICs9IHN0eWxlLl9maWxsLmZpbGwuc3R5bGVLZXk7XG4gICAgICBvdmVycmlkZUZpbGwgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHN0eWxlLl9zdHJva2UgfHwgc3R5bGUuZHJvcFNoYWRvdykge1xuICAgICAgbGV0IGtleSA9IHN0eWxlLnN0eWxlS2V5O1xuICAgICAga2V5ID0ga2V5LnN1YnN0cmluZygwLCBrZXkubGFzdEluZGV4T2YoXCItXCIpKTtcbiAgICAgIGZvbnRGYW1pbHlLZXkgPSBgJHtrZXl9LWJpdG1hcGA7XG4gICAgICBvdmVycmlkZUZpbGwgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFDYWNoZS5oYXMoZm9udEZhbWlseUtleSkpIHtcbiAgICAgIGNvbnN0IGZudCA9IG5ldyBEeW5hbWljQml0bWFwRm9udCh7XG4gICAgICAgIHN0eWxlLFxuICAgICAgICBvdmVycmlkZUZpbGwsXG4gICAgICAgIG92ZXJyaWRlU2l6ZTogdHJ1ZSxcbiAgICAgICAgLi4udGhpcy5kZWZhdWx0T3B0aW9uc1xuICAgICAgfSk7XG4gICAgICBmb250Q291bnQrKztcbiAgICAgIGlmIChmb250Q291bnQgPiA1MCkge1xuICAgICAgICB3YXJuKFwiQml0bWFwVGV4dFwiLCBgWW91IGhhdmUgZHluYW1pY2FsbHkgY3JlYXRlZCAke2ZvbnRDb3VudH0gYml0bWFwIGZvbnRzLCB0aGlzIGNhbiBiZSBpbmVmZmljaWVudC4gVHJ5IHByZSBpbnN0YWxsaW5nIHlvdXIgZm9udCBzdHlsZXMgdXNpbmcgXFxgQml0bWFwRm9udC5pbnN0YWxsKHtuYW1lOlwic3R5bGUxXCIsIHN0eWxlfSlcXGBgKTtcbiAgICAgIH1cbiAgICAgIGZudC5vbmNlKFwiZGVzdHJveVwiLCAoKSA9PiB7XG4gICAgICAgIGZvbnRDb3VudC0tO1xuICAgICAgICBDYWNoZS5yZW1vdmUoZm9udEZhbWlseUtleSk7XG4gICAgICB9KTtcbiAgICAgIENhY2hlLnNldChcbiAgICAgICAgZm9udEZhbWlseUtleSxcbiAgICAgICAgZm50XG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBkeW5hbWljRm9udCA9IENhY2hlLmdldChmb250RmFtaWx5S2V5KTtcbiAgICBkeW5hbWljRm9udC5lbnN1cmVDaGFyYWN0ZXJzPy4odGV4dCk7XG4gICAgcmV0dXJuIGR5bmFtaWNGb250O1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGxheW91dCBvZiBhIHRleHQgZm9yIHRoZSBzcGVjaWZpZWQgc3R5bGUuXG4gICAqIEBwYXJhbSB0ZXh0IC0gVGhlIHRleHQgdG8gZ2V0IHRoZSBsYXlvdXQgZm9yXG4gICAqIEBwYXJhbSBzdHlsZSAtIFRoZSBzdHlsZSB0byB1c2VcbiAgICogQHBhcmFtIHRyaW1FbmQgLSBXaGV0aGVyIHRvIGlnbm9yZSB3aGl0ZXNwYWNlcyBhdCB0aGUgZW5kIG9mIGVhY2ggbGluZVxuICAgKi9cbiAgZ2V0TGF5b3V0KHRleHQsIHN0eWxlLCB0cmltRW5kID0gdHJ1ZSkge1xuICAgIGNvbnN0IGJpdG1hcEZvbnQgPSB0aGlzLmdldEZvbnQodGV4dCwgc3R5bGUpO1xuICAgIHJldHVybiBnZXRCaXRtYXBUZXh0TGF5b3V0KFsuLi50ZXh0XSwgc3R5bGUsIGJpdG1hcEZvbnQsIHRyaW1FbmQpO1xuICB9XG4gIC8qKlxuICAgKiBNZWFzdXJlIHRoZSB0ZXh0IHVzaW5nIHRoZSBzcGVjaWZpZWQgc3R5bGUuXG4gICAqIEBwYXJhbSB0ZXh0IC0gVGhlIHRleHQgdG8gbWVhc3VyZVxuICAgKiBAcGFyYW0gc3R5bGUgLSBUaGUgc3R5bGUgdG8gdXNlXG4gICAqIEBwYXJhbSB0cmltRW5kIC0gV2hldGhlciB0byBpZ25vcmUgd2hpdGVzcGFjZXMgYXQgdGhlIGVuZCBvZiBlYWNoIGxpbmVcbiAgICovXG4gIG1lYXN1cmVUZXh0KHRleHQsIHN0eWxlLCB0cmltRW5kID0gdHJ1ZSkge1xuICAgIHJldHVybiB0aGlzLmdldExheW91dCh0ZXh0LCBzdHlsZSwgdHJpbUVuZCk7XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbiAgaW5zdGFsbCguLi5hcmdzKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmdzWzBdO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgbmFtZTogb3B0aW9ucyxcbiAgICAgICAgc3R5bGU6IGFyZ3NbMV0sXG4gICAgICAgIGNoYXJzOiBhcmdzWzJdPy5jaGFycyxcbiAgICAgICAgcmVzb2x1dGlvbjogYXJnc1syXT8ucmVzb2x1dGlvbixcbiAgICAgICAgcGFkZGluZzogYXJnc1syXT8ucGFkZGluZyxcbiAgICAgICAgc2tpcEtlcm5pbmc6IGFyZ3NbMl0/LnNraXBLZXJuaW5nXG4gICAgICB9O1xuICAgICAgZGVwcmVjYXRpb24odjhfMF8wLCBcIkJpdG1hcEZvbnRNYW5hZ2VyLmluc3RhbGwobmFtZSwgc3R5bGUsIG9wdGlvbnMpIGlzIGRlcHJlY2F0ZWQsIHVzZSBCaXRtYXBGb250TWFuYWdlci5pbnN0YWxsKHtuYW1lLCBzdHlsZSwgLi4ub3B0aW9uc30pXCIpO1xuICAgIH1cbiAgICBjb25zdCBuYW1lID0gb3B0aW9ucz8ubmFtZTtcbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIltCaXRtYXBGb250TWFuYWdlcl0gUHJvcGVydHkgYG5hbWVgIGlzIHJlcXVpcmVkLlwiKTtcbiAgICB9XG4gICAgb3B0aW9ucyA9IHsgLi4udGhpcy5kZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9ucyB9O1xuICAgIGNvbnN0IHRleHRTdHlsZSA9IG9wdGlvbnMuc3R5bGU7XG4gICAgY29uc3Qgc3R5bGUgPSB0ZXh0U3R5bGUgaW5zdGFuY2VvZiBUZXh0U3R5bGUgPyB0ZXh0U3R5bGUgOiBuZXcgVGV4dFN0eWxlKHRleHRTdHlsZSk7XG4gICAgY29uc3Qgb3ZlcnJpZGVGaWxsID0gc3R5bGUuX2ZpbGwuZmlsbCAhPT0gbnVsbCAmJiBzdHlsZS5fZmlsbC5maWxsICE9PSB2b2lkIDA7XG4gICAgY29uc3QgZm9udCA9IG5ldyBEeW5hbWljQml0bWFwRm9udCh7XG4gICAgICBzdHlsZSxcbiAgICAgIG92ZXJyaWRlRmlsbCxcbiAgICAgIHNraXBLZXJuaW5nOiBvcHRpb25zLnNraXBLZXJuaW5nLFxuICAgICAgcGFkZGluZzogb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgcmVzb2x1dGlvbjogb3B0aW9ucy5yZXNvbHV0aW9uLFxuICAgICAgb3ZlcnJpZGVTaXplOiBmYWxzZVxuICAgIH0pO1xuICAgIGNvbnN0IGZsYXRDaGFycyA9IHJlc29sdmVDaGFyYWN0ZXJzKG9wdGlvbnMuY2hhcnMpO1xuICAgIGZvbnQuZW5zdXJlQ2hhcmFjdGVycyhmbGF0Q2hhcnMuam9pbihcIlwiKSk7XG4gICAgQ2FjaGUuc2V0KGAke25hbWV9LWJpdG1hcGAsIGZvbnQpO1xuICAgIGZvbnQub25jZShcImRlc3Ryb3lcIiwgKCkgPT4gQ2FjaGUucmVtb3ZlKGAke25hbWV9LWJpdG1hcGApKTtcbiAgICByZXR1cm4gZm9udDtcbiAgfVxuICAvKipcbiAgICogVW5pbnN0YWxscyBhIGJpdG1hcCBmb250IGZyb20gdGhlIGNhY2hlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBiaXRtYXAgZm9udCB0byB1bmluc3RhbGwuXG4gICAqL1xuICB1bmluc3RhbGwobmFtZSkge1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gYCR7bmFtZX0tYml0bWFwYDtcbiAgICBjb25zdCBmb250ID0gQ2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgICBpZiAoZm9udCkge1xuICAgICAgZm9udC5kZXN0cm95KCk7XG4gICAgfVxuICB9XG59XG5jb25zdCBCaXRtYXBGb250TWFuYWdlciA9IG5ldyBCaXRtYXBGb250TWFuYWdlckNsYXNzKCk7XG5cbmV4cG9ydCB7IEJpdG1hcEZvbnRNYW5hZ2VyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CaXRtYXBGb250TWFuYWdlci5tanMubWFwXG4iLCJpbXBvcnQgeyBDYWNoZSB9IGZyb20gJy4uLy4uL2Fzc2V0cy9jYWNoZS9DYWNoZS5tanMnO1xuaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgQmlnUG9vbCB9IGZyb20gJy4uLy4uL3V0aWxzL3Bvb2wvUG9vbEdyb3VwLm1qcyc7XG5pbXBvcnQgeyBHcmFwaGljcyB9IGZyb20gJy4uL2dyYXBoaWNzL3NoYXJlZC9HcmFwaGljcy5tanMnO1xuaW1wb3J0IHsgU2RmU2hhZGVyIH0gZnJvbSAnLi4vdGV4dC9zZGZTaGFkZXIvU2RmU2hhZGVyLm1qcyc7XG5pbXBvcnQgeyBCaXRtYXBGb250TWFuYWdlciB9IGZyb20gJy4vQml0bWFwRm9udE1hbmFnZXIubWpzJztcbmltcG9ydCB7IGdldEJpdG1hcFRleHRMYXlvdXQgfSBmcm9tICcuL3V0aWxzL2dldEJpdG1hcFRleHRMYXlvdXQubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBCaXRtYXBUZXh0UGlwZSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fZ3B1Qml0bWFwVGV4dCA9IHt9O1xuICAgIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQm91bmQgPSB0aGlzLmRlc3Ryb3lSZW5kZXJhYmxlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLl9yZW5kZXJlci5yZW5kZXJhYmxlR0MuYWRkTWFuYWdlZEhhc2godGhpcywgXCJfZ3B1Qml0bWFwVGV4dFwiKTtcbiAgfVxuICB2YWxpZGF0ZVJlbmRlcmFibGUoYml0bWFwVGV4dCkge1xuICAgIGNvbnN0IGdyYXBoaWNzUmVuZGVyYWJsZSA9IHRoaXMuX2dldEdwdUJpdG1hcFRleHQoYml0bWFwVGV4dCk7XG4gICAgaWYgKGJpdG1hcFRleHQuX2RpZFRleHRVcGRhdGUpIHtcbiAgICAgIGJpdG1hcFRleHQuX2RpZFRleHRVcGRhdGUgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3VwZGF0ZUNvbnRleHQoYml0bWFwVGV4dCwgZ3JhcGhpY3NSZW5kZXJhYmxlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlbmRlcmVyLnJlbmRlclBpcGVzLmdyYXBoaWNzLnZhbGlkYXRlUmVuZGVyYWJsZShncmFwaGljc1JlbmRlcmFibGUpO1xuICB9XG4gIGFkZFJlbmRlcmFibGUoYml0bWFwVGV4dCwgaW5zdHJ1Y3Rpb25TZXQpIHtcbiAgICBjb25zdCBncmFwaGljc1JlbmRlcmFibGUgPSB0aGlzLl9nZXRHcHVCaXRtYXBUZXh0KGJpdG1hcFRleHQpO1xuICAgIHN5bmNXaXRoUHJveHkoYml0bWFwVGV4dCwgZ3JhcGhpY3NSZW5kZXJhYmxlKTtcbiAgICBpZiAoYml0bWFwVGV4dC5fZGlkVGV4dFVwZGF0ZSkge1xuICAgICAgYml0bWFwVGV4dC5fZGlkVGV4dFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5fdXBkYXRlQ29udGV4dChiaXRtYXBUZXh0LCBncmFwaGljc1JlbmRlcmFibGUpO1xuICAgIH1cbiAgICB0aGlzLl9yZW5kZXJlci5yZW5kZXJQaXBlcy5ncmFwaGljcy5hZGRSZW5kZXJhYmxlKGdyYXBoaWNzUmVuZGVyYWJsZSwgaW5zdHJ1Y3Rpb25TZXQpO1xuICAgIGlmIChncmFwaGljc1JlbmRlcmFibGUuY29udGV4dC5jdXN0b21TaGFkZXIpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZURpc3RhbmNlRmllbGQoYml0bWFwVGV4dCk7XG4gICAgfVxuICB9XG4gIGRlc3Ryb3lSZW5kZXJhYmxlKGJpdG1hcFRleHQpIHtcbiAgICBiaXRtYXBUZXh0Lm9mZihcImRlc3Ryb3llZFwiLCB0aGlzLl9kZXN0cm95UmVuZGVyYWJsZUJvdW5kKTtcbiAgICB0aGlzLl9kZXN0cm95UmVuZGVyYWJsZUJ5VWlkKGJpdG1hcFRleHQudWlkKTtcbiAgfVxuICBfZGVzdHJveVJlbmRlcmFibGVCeVVpZChyZW5kZXJhYmxlVWlkKSB7XG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuX2dwdUJpdG1hcFRleHRbcmVuZGVyYWJsZVVpZF0uY29udGV4dDtcbiAgICBpZiAoY29udGV4dC5jdXN0b21TaGFkZXIpIHtcbiAgICAgIEJpZ1Bvb2wucmV0dXJuKGNvbnRleHQuY3VzdG9tU2hhZGVyKTtcbiAgICAgIGNvbnRleHQuY3VzdG9tU2hhZGVyID0gbnVsbDtcbiAgICB9XG4gICAgQmlnUG9vbC5yZXR1cm4odGhpcy5fZ3B1Qml0bWFwVGV4dFtyZW5kZXJhYmxlVWlkXSk7XG4gICAgdGhpcy5fZ3B1Qml0bWFwVGV4dFtyZW5kZXJhYmxlVWlkXSA9IG51bGw7XG4gIH1cbiAgdXBkYXRlUmVuZGVyYWJsZShiaXRtYXBUZXh0KSB7XG4gICAgY29uc3QgZ3JhcGhpY3NSZW5kZXJhYmxlID0gdGhpcy5fZ2V0R3B1Qml0bWFwVGV4dChiaXRtYXBUZXh0KTtcbiAgICBzeW5jV2l0aFByb3h5KGJpdG1hcFRleHQsIGdyYXBoaWNzUmVuZGVyYWJsZSk7XG4gICAgdGhpcy5fcmVuZGVyZXIucmVuZGVyUGlwZXMuZ3JhcGhpY3MudXBkYXRlUmVuZGVyYWJsZShncmFwaGljc1JlbmRlcmFibGUpO1xuICAgIGlmIChncmFwaGljc1JlbmRlcmFibGUuY29udGV4dC5jdXN0b21TaGFkZXIpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZURpc3RhbmNlRmllbGQoYml0bWFwVGV4dCk7XG4gICAgfVxuICB9XG4gIF91cGRhdGVDb250ZXh0KGJpdG1hcFRleHQsIHByb3h5R3JhcGhpY3MpIHtcbiAgICBjb25zdCB7IGNvbnRleHQgfSA9IHByb3h5R3JhcGhpY3M7XG4gICAgY29uc3QgYml0bWFwRm9udCA9IEJpdG1hcEZvbnRNYW5hZ2VyLmdldEZvbnQoYml0bWFwVGV4dC50ZXh0LCBiaXRtYXBUZXh0Ll9zdHlsZSk7XG4gICAgY29udGV4dC5jbGVhcigpO1xuICAgIGlmIChiaXRtYXBGb250LmRpc3RhbmNlRmllbGQudHlwZSAhPT0gXCJub25lXCIpIHtcbiAgICAgIGlmICghY29udGV4dC5jdXN0b21TaGFkZXIpIHtcbiAgICAgICAgY29udGV4dC5jdXN0b21TaGFkZXIgPSBCaWdQb29sLmdldChTZGZTaGFkZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjaGFycyA9IEFycmF5LmZyb20oYml0bWFwVGV4dC50ZXh0KTtcbiAgICBjb25zdCBzdHlsZSA9IGJpdG1hcFRleHQuX3N0eWxlO1xuICAgIGxldCBjdXJyZW50WSA9IGJpdG1hcEZvbnQuYmFzZUxpbmVPZmZzZXQ7XG4gICAgY29uc3QgYml0bWFwVGV4dExheW91dCA9IGdldEJpdG1hcFRleHRMYXlvdXQoY2hhcnMsIHN0eWxlLCBiaXRtYXBGb250LCB0cnVlKTtcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGNvbnN0IHBhZGRpbmcgPSBzdHlsZS5wYWRkaW5nO1xuICAgIGNvbnN0IHNjYWxlID0gYml0bWFwVGV4dExheW91dC5zY2FsZTtcbiAgICBsZXQgdHggPSBiaXRtYXBUZXh0TGF5b3V0LndpZHRoO1xuICAgIGxldCB0eSA9IGJpdG1hcFRleHRMYXlvdXQuaGVpZ2h0ICsgYml0bWFwVGV4dExheW91dC5vZmZzZXRZO1xuICAgIGlmIChzdHlsZS5fc3Ryb2tlKSB7XG4gICAgICB0eCArPSBzdHlsZS5fc3Ryb2tlLndpZHRoIC8gc2NhbGU7XG4gICAgICB0eSArPSBzdHlsZS5fc3Ryb2tlLndpZHRoIC8gc2NhbGU7XG4gICAgfVxuICAgIGNvbnRleHQudHJhbnNsYXRlKC1iaXRtYXBUZXh0Ll9hbmNob3IuX3ggKiB0eCAtIHBhZGRpbmcsIC1iaXRtYXBUZXh0Ll9hbmNob3IuX3kgKiB0eSAtIHBhZGRpbmcpLnNjYWxlKHNjYWxlLCBzY2FsZSk7XG4gICAgY29uc3QgdGludCA9IGJpdG1hcEZvbnQuYXBwbHlGaWxsQXNUaW50ID8gc3R5bGUuX2ZpbGwuY29sb3IgOiAxNjc3NzIxNTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpdG1hcFRleHRMYXlvdXQubGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGxpbmUgPSBiaXRtYXBUZXh0TGF5b3V0LmxpbmVzW2ldO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBsaW5lLmNoYXJQb3NpdGlvbnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgY29uc3QgY2hhciA9IGNoYXJzW2luZGV4KytdO1xuICAgICAgICBjb25zdCBjaGFyRGF0YSA9IGJpdG1hcEZvbnQuY2hhcnNbY2hhcl07XG4gICAgICAgIGlmIChjaGFyRGF0YT8udGV4dHVyZSkge1xuICAgICAgICAgIGNvbnRleHQudGV4dHVyZShcbiAgICAgICAgICAgIGNoYXJEYXRhLnRleHR1cmUsXG4gICAgICAgICAgICB0aW50ID8gdGludCA6IFwiYmxhY2tcIixcbiAgICAgICAgICAgIE1hdGgucm91bmQobGluZS5jaGFyUG9zaXRpb25zW2pdICsgY2hhckRhdGEueE9mZnNldCksXG4gICAgICAgICAgICBNYXRoLnJvdW5kKGN1cnJlbnRZICsgY2hhckRhdGEueU9mZnNldClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjdXJyZW50WSArPSBiaXRtYXBGb250LmxpbmVIZWlnaHQ7XG4gICAgfVxuICB9XG4gIF9nZXRHcHVCaXRtYXBUZXh0KGJpdG1hcFRleHQpIHtcbiAgICByZXR1cm4gdGhpcy5fZ3B1Qml0bWFwVGV4dFtiaXRtYXBUZXh0LnVpZF0gfHwgdGhpcy5pbml0R3B1VGV4dChiaXRtYXBUZXh0KTtcbiAgfVxuICBpbml0R3B1VGV4dChiaXRtYXBUZXh0KSB7XG4gICAgY29uc3QgcHJveHlSZW5kZXJhYmxlID0gQmlnUG9vbC5nZXQoR3JhcGhpY3MpO1xuICAgIHRoaXMuX2dwdUJpdG1hcFRleHRbYml0bWFwVGV4dC51aWRdID0gcHJveHlSZW5kZXJhYmxlO1xuICAgIHRoaXMuX3VwZGF0ZUNvbnRleHQoYml0bWFwVGV4dCwgcHJveHlSZW5kZXJhYmxlKTtcbiAgICBiaXRtYXBUZXh0Lm9uKFwiZGVzdHJveWVkXCIsIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQm91bmQpO1xuICAgIHJldHVybiB0aGlzLl9ncHVCaXRtYXBUZXh0W2JpdG1hcFRleHQudWlkXTtcbiAgfVxuICBfdXBkYXRlRGlzdGFuY2VGaWVsZChiaXRtYXBUZXh0KSB7XG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuX2dldEdwdUJpdG1hcFRleHQoYml0bWFwVGV4dCkuY29udGV4dDtcbiAgICBjb25zdCBmb250RmFtaWx5ID0gYml0bWFwVGV4dC5fc3R5bGUuZm9udEZhbWlseTtcbiAgICBjb25zdCBkeW5hbWljRm9udCA9IENhY2hlLmdldChgJHtmb250RmFtaWx5fS1iaXRtYXBgKTtcbiAgICBjb25zdCB7IGEsIGIsIGMsIGQgfSA9IGJpdG1hcFRleHQuZ3JvdXBUcmFuc2Zvcm07XG4gICAgY29uc3QgZHggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG4gICAgY29uc3QgZHkgPSBNYXRoLnNxcnQoYyAqIGMgKyBkICogZCk7XG4gICAgY29uc3Qgd29ybGRTY2FsZSA9IChNYXRoLmFicyhkeCkgKyBNYXRoLmFicyhkeSkpIC8gMjtcbiAgICBjb25zdCBmb250U2NhbGUgPSBkeW5hbWljRm9udC5iYXNlUmVuZGVyZWRGb250U2l6ZSAvIGJpdG1hcFRleHQuX3N0eWxlLmZvbnRTaXplO1xuICAgIGNvbnN0IGRpc3RhbmNlID0gd29ybGRTY2FsZSAqIGR5bmFtaWNGb250LmRpc3RhbmNlRmllbGQucmFuZ2UgKiAoMSAvIGZvbnRTY2FsZSk7XG4gICAgY29udGV4dC5jdXN0b21TaGFkZXIucmVzb3VyY2VzLmxvY2FsVW5pZm9ybXMudW5pZm9ybXMudURpc3RhbmNlID0gZGlzdGFuY2U7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICBmb3IgKGNvbnN0IHVpZCBpbiB0aGlzLl9ncHVCaXRtYXBUZXh0KSB7XG4gICAgICB0aGlzLl9kZXN0cm95UmVuZGVyYWJsZUJ5VWlkKHVpZCk7XG4gICAgfVxuICAgIHRoaXMuX2dwdUJpdG1hcFRleHQgPSBudWxsO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gbnVsbDtcbiAgfVxufVxuLyoqIEBpZ25vcmUgKi9cbkJpdG1hcFRleHRQaXBlLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xQaXBlcyxcbiAgICBFeHRlbnNpb25UeXBlLldlYkdQVVBpcGVzLFxuICAgIEV4dGVuc2lvblR5cGUuQ2FudmFzUGlwZXNcbiAgXSxcbiAgbmFtZTogXCJiaXRtYXBUZXh0XCJcbn07XG5mdW5jdGlvbiBzeW5jV2l0aFByb3h5KGNvbnRhaW5lciwgcHJveHkpIHtcbiAgcHJveHkuZ3JvdXBUcmFuc2Zvcm0gPSBjb250YWluZXIuZ3JvdXBUcmFuc2Zvcm07XG4gIHByb3h5Lmdyb3VwQ29sb3JBbHBoYSA9IGNvbnRhaW5lci5ncm91cENvbG9yQWxwaGE7XG4gIHByb3h5Lmdyb3VwQ29sb3IgPSBjb250YWluZXIuZ3JvdXBDb2xvcjtcbiAgcHJveHkuZ3JvdXBCbGVuZE1vZGUgPSBjb250YWluZXIuZ3JvdXBCbGVuZE1vZGU7XG4gIHByb3h5Lmdsb2JhbERpc3BsYXlTdGF0dXMgPSBjb250YWluZXIuZ2xvYmFsRGlzcGxheVN0YXR1cztcbiAgcHJveHkuZ3JvdXBUcmFuc2Zvcm0gPSBjb250YWluZXIuZ3JvdXBUcmFuc2Zvcm07XG4gIHByb3h5LmxvY2FsRGlzcGxheVN0YXR1cyA9IGNvbnRhaW5lci5sb2NhbERpc3BsYXlTdGF0dXM7XG4gIHByb3h5Lmdyb3VwQWxwaGEgPSBjb250YWluZXIuZ3JvdXBBbHBoYTtcbiAgcHJveHkuX3JvdW5kUGl4ZWxzID0gY29udGFpbmVyLl9yb3VuZFBpeGVscztcbn1cblxuZXhwb3J0IHsgQml0bWFwVGV4dFBpcGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJpdG1hcFRleHRQaXBlLm1qcy5tYXBcbiIsImltcG9ydCB7IGV4dGVuc2lvbnMgfSBmcm9tICcuLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IEJpdG1hcFRleHRQaXBlIH0gZnJvbSAnLi9CaXRtYXBUZXh0UGlwZS5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmV4dGVuc2lvbnMuYWRkKEJpdG1hcFRleHRQaXBlKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaXQubWpzLm1hcFxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uVHlwZSB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3RleHR1cmUvVGV4dHVyZS5tanMnO1xuaW1wb3J0IHsgdXBkYXRlUXVhZEJvdW5kcyB9IGZyb20gJy4uLy4uL3V0aWxzL2RhdGEvdXBkYXRlUXVhZEJvdW5kcy5tanMnO1xuaW1wb3J0IHsgQmlnUG9vbCB9IGZyb20gJy4uLy4uL3V0aWxzL3Bvb2wvUG9vbEdyb3VwLm1qcyc7XG5pbXBvcnQgeyBCYXRjaGFibGVTcHJpdGUgfSBmcm9tICcuLi9zcHJpdGUvQmF0Y2hhYmxlU3ByaXRlLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgSFRNTFRleHRQaXBlIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICB0aGlzLl9ncHVUZXh0ID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZGVzdHJveVJlbmRlcmFibGVCb3VuZCA9IHRoaXMuZGVzdHJveVJlbmRlcmFibGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuX3JlbmRlcmVyLnJ1bm5lcnMucmVzb2x1dGlvbkNoYW5nZS5hZGQodGhpcyk7XG4gICAgdGhpcy5fcmVuZGVyZXIucmVuZGVyYWJsZUdDLmFkZE1hbmFnZWRIYXNoKHRoaXMsIFwiX2dwdVRleHRcIik7XG4gIH1cbiAgcmVzb2x1dGlvbkNoYW5nZSgpIHtcbiAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5fZ3B1VGV4dCkge1xuICAgICAgY29uc3QgZ3B1VGV4dCA9IHRoaXMuX2dwdVRleHRbaV07XG4gICAgICBpZiAoIWdwdVRleHQpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgY29uc3QgdGV4dCA9IGdwdVRleHQuYmF0Y2hhYmxlU3ByaXRlLnJlbmRlcmFibGU7XG4gICAgICBpZiAodGV4dC5fYXV0b1Jlc29sdXRpb24pIHtcbiAgICAgICAgdGV4dC5fcmVzb2x1dGlvbiA9IHRoaXMuX3JlbmRlcmVyLnJlc29sdXRpb247XG4gICAgICAgIHRleHQub25WaWV3VXBkYXRlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHZhbGlkYXRlUmVuZGVyYWJsZShodG1sVGV4dCkge1xuICAgIGNvbnN0IGdwdVRleHQgPSB0aGlzLl9nZXRHcHVUZXh0KGh0bWxUZXh0KTtcbiAgICBjb25zdCBuZXdLZXkgPSBodG1sVGV4dC5fZ2V0S2V5KCk7XG4gICAgaWYgKGdwdVRleHQudGV4dHVyZU5lZWRzVXBsb2FkaW5nKSB7XG4gICAgICBncHVUZXh0LnRleHR1cmVOZWVkc1VwbG9hZGluZyA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChncHVUZXh0LmN1cnJlbnRLZXkgIT09IG5ld0tleSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBhZGRSZW5kZXJhYmxlKGh0bWxUZXh0LCBpbnN0cnVjdGlvblNldCkge1xuICAgIGNvbnN0IGdwdVRleHQgPSB0aGlzLl9nZXRHcHVUZXh0KGh0bWxUZXh0KTtcbiAgICBjb25zdCBiYXRjaGFibGVTcHJpdGUgPSBncHVUZXh0LmJhdGNoYWJsZVNwcml0ZTtcbiAgICBpZiAoaHRtbFRleHQuX2RpZFRleHRVcGRhdGUpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZVRleHQoaHRtbFRleHQpO1xuICAgIH1cbiAgICB0aGlzLl9yZW5kZXJlci5yZW5kZXJQaXBlcy5iYXRjaC5hZGRUb0JhdGNoKGJhdGNoYWJsZVNwcml0ZSwgaW5zdHJ1Y3Rpb25TZXQpO1xuICB9XG4gIHVwZGF0ZVJlbmRlcmFibGUoaHRtbFRleHQpIHtcbiAgICBjb25zdCBncHVUZXh0ID0gdGhpcy5fZ2V0R3B1VGV4dChodG1sVGV4dCk7XG4gICAgY29uc3QgYmF0Y2hhYmxlU3ByaXRlID0gZ3B1VGV4dC5iYXRjaGFibGVTcHJpdGU7XG4gICAgaWYgKGh0bWxUZXh0Ll9kaWRUZXh0VXBkYXRlKSB7XG4gICAgICB0aGlzLl91cGRhdGVUZXh0KGh0bWxUZXh0KTtcbiAgICB9XG4gICAgYmF0Y2hhYmxlU3ByaXRlLl9iYXRjaGVyLnVwZGF0ZUVsZW1lbnQoYmF0Y2hhYmxlU3ByaXRlKTtcbiAgfVxuICBkZXN0cm95UmVuZGVyYWJsZShodG1sVGV4dCkge1xuICAgIGh0bWxUZXh0Lm9mZihcImRlc3Ryb3llZFwiLCB0aGlzLl9kZXN0cm95UmVuZGVyYWJsZUJvdW5kKTtcbiAgICB0aGlzLl9kZXN0cm95UmVuZGVyYWJsZUJ5SWQoaHRtbFRleHQudWlkKTtcbiAgfVxuICBfZGVzdHJveVJlbmRlcmFibGVCeUlkKGh0bWxUZXh0VWlkKSB7XG4gICAgY29uc3QgZ3B1VGV4dCA9IHRoaXMuX2dwdVRleHRbaHRtbFRleHRVaWRdO1xuICAgIHRoaXMuX3JlbmRlcmVyLmh0bWxUZXh0LmRlY3JlYXNlUmVmZXJlbmNlQ291bnQoZ3B1VGV4dC5jdXJyZW50S2V5KTtcbiAgICBCaWdQb29sLnJldHVybihncHVUZXh0LmJhdGNoYWJsZVNwcml0ZSk7XG4gICAgdGhpcy5fZ3B1VGV4dFtodG1sVGV4dFVpZF0gPSBudWxsO1xuICB9XG4gIF91cGRhdGVUZXh0KGh0bWxUZXh0KSB7XG4gICAgY29uc3QgbmV3S2V5ID0gaHRtbFRleHQuX2dldEtleSgpO1xuICAgIGNvbnN0IGdwdVRleHQgPSB0aGlzLl9nZXRHcHVUZXh0KGh0bWxUZXh0KTtcbiAgICBjb25zdCBiYXRjaGFibGVTcHJpdGUgPSBncHVUZXh0LmJhdGNoYWJsZVNwcml0ZTtcbiAgICBpZiAoZ3B1VGV4dC5jdXJyZW50S2V5ICE9PSBuZXdLZXkpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZUdwdVRleHQoaHRtbFRleHQpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaHRtbFRleHQuX2RpZFRleHRVcGRhdGUgPSBmYWxzZTtcbiAgICBjb25zdCBwYWRkaW5nID0gaHRtbFRleHQuX3N0eWxlLnBhZGRpbmc7XG4gICAgdXBkYXRlUXVhZEJvdW5kcyhiYXRjaGFibGVTcHJpdGUuYm91bmRzLCBodG1sVGV4dC5fYW5jaG9yLCBiYXRjaGFibGVTcHJpdGUudGV4dHVyZSwgcGFkZGluZyk7XG4gIH1cbiAgYXN5bmMgX3VwZGF0ZUdwdVRleHQoaHRtbFRleHQpIHtcbiAgICBodG1sVGV4dC5fZGlkVGV4dFVwZGF0ZSA9IGZhbHNlO1xuICAgIGNvbnN0IGdwdVRleHQgPSB0aGlzLl9nZXRHcHVUZXh0KGh0bWxUZXh0KTtcbiAgICBpZiAoZ3B1VGV4dC5nZW5lcmF0aW5nVGV4dHVyZSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBuZXdLZXkgPSBodG1sVGV4dC5fZ2V0S2V5KCk7XG4gICAgdGhpcy5fcmVuZGVyZXIuaHRtbFRleHQuZGVjcmVhc2VSZWZlcmVuY2VDb3VudChncHVUZXh0LmN1cnJlbnRLZXkpO1xuICAgIGdwdVRleHQuZ2VuZXJhdGluZ1RleHR1cmUgPSB0cnVlO1xuICAgIGdwdVRleHQuY3VycmVudEtleSA9IG5ld0tleTtcbiAgICBjb25zdCByZXNvbHV0aW9uID0gaHRtbFRleHQucmVzb2x1dGlvbiA/PyB0aGlzLl9yZW5kZXJlci5yZXNvbHV0aW9uO1xuICAgIGNvbnN0IHRleHR1cmUgPSBhd2FpdCB0aGlzLl9yZW5kZXJlci5odG1sVGV4dC5nZXRNYW5hZ2VkVGV4dHVyZShcbiAgICAgIGh0bWxUZXh0LnRleHQsXG4gICAgICByZXNvbHV0aW9uLFxuICAgICAgaHRtbFRleHQuX3N0eWxlLFxuICAgICAgaHRtbFRleHQuX2dldEtleSgpXG4gICAgKTtcbiAgICBjb25zdCBiYXRjaGFibGVTcHJpdGUgPSBncHVUZXh0LmJhdGNoYWJsZVNwcml0ZTtcbiAgICBiYXRjaGFibGVTcHJpdGUudGV4dHVyZSA9IGdwdVRleHQudGV4dHVyZSA9IHRleHR1cmU7XG4gICAgZ3B1VGV4dC5nZW5lcmF0aW5nVGV4dHVyZSA9IGZhbHNlO1xuICAgIGdwdVRleHQudGV4dHVyZU5lZWRzVXBsb2FkaW5nID0gdHJ1ZTtcbiAgICBodG1sVGV4dC5vblZpZXdVcGRhdGUoKTtcbiAgICBjb25zdCBwYWRkaW5nID0gaHRtbFRleHQuX3N0eWxlLnBhZGRpbmc7XG4gICAgdXBkYXRlUXVhZEJvdW5kcyhiYXRjaGFibGVTcHJpdGUuYm91bmRzLCBodG1sVGV4dC5fYW5jaG9yLCBiYXRjaGFibGVTcHJpdGUudGV4dHVyZSwgcGFkZGluZyk7XG4gIH1cbiAgX2dldEdwdVRleHQoaHRtbFRleHQpIHtcbiAgICByZXR1cm4gdGhpcy5fZ3B1VGV4dFtodG1sVGV4dC51aWRdIHx8IHRoaXMuaW5pdEdwdVRleHQoaHRtbFRleHQpO1xuICB9XG4gIGluaXRHcHVUZXh0KGh0bWxUZXh0KSB7XG4gICAgY29uc3QgZ3B1VGV4dERhdGEgPSB7XG4gICAgICB0ZXh0dXJlOiBUZXh0dXJlLkVNUFRZLFxuICAgICAgY3VycmVudEtleTogXCItLVwiLFxuICAgICAgYmF0Y2hhYmxlU3ByaXRlOiBCaWdQb29sLmdldChCYXRjaGFibGVTcHJpdGUpLFxuICAgICAgdGV4dHVyZU5lZWRzVXBsb2FkaW5nOiBmYWxzZSxcbiAgICAgIGdlbmVyYXRpbmdUZXh0dXJlOiBmYWxzZVxuICAgIH07XG4gICAgY29uc3QgYmF0Y2hhYmxlU3ByaXRlID0gZ3B1VGV4dERhdGEuYmF0Y2hhYmxlU3ByaXRlO1xuICAgIGJhdGNoYWJsZVNwcml0ZS5yZW5kZXJhYmxlID0gaHRtbFRleHQ7XG4gICAgYmF0Y2hhYmxlU3ByaXRlLnRyYW5zZm9ybSA9IGh0bWxUZXh0Lmdyb3VwVHJhbnNmb3JtO1xuICAgIGJhdGNoYWJsZVNwcml0ZS50ZXh0dXJlID0gVGV4dHVyZS5FTVBUWTtcbiAgICBiYXRjaGFibGVTcHJpdGUuYm91bmRzID0geyBtaW5YOiAwLCBtYXhYOiAxLCBtaW5ZOiAwLCBtYXhZOiAwIH07XG4gICAgYmF0Y2hhYmxlU3ByaXRlLnJvdW5kUGl4ZWxzID0gdGhpcy5fcmVuZGVyZXIuX3JvdW5kUGl4ZWxzIHwgaHRtbFRleHQuX3JvdW5kUGl4ZWxzO1xuICAgIGh0bWxUZXh0Ll9yZXNvbHV0aW9uID0gaHRtbFRleHQuX2F1dG9SZXNvbHV0aW9uID8gdGhpcy5fcmVuZGVyZXIucmVzb2x1dGlvbiA6IGh0bWxUZXh0LnJlc29sdXRpb247XG4gICAgdGhpcy5fZ3B1VGV4dFtodG1sVGV4dC51aWRdID0gZ3B1VGV4dERhdGE7XG4gICAgaHRtbFRleHQub24oXCJkZXN0cm95ZWRcIiwgdGhpcy5fZGVzdHJveVJlbmRlcmFibGVCb3VuZCk7XG4gICAgcmV0dXJuIGdwdVRleHREYXRhO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgZm9yIChjb25zdCBpIGluIHRoaXMuX2dwdVRleHQpIHtcbiAgICAgIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQnlJZChpKTtcbiAgICB9XG4gICAgdGhpcy5fZ3B1VGV4dCA9IG51bGw7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuSFRNTFRleHRQaXBlLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xQaXBlcyxcbiAgICBFeHRlbnNpb25UeXBlLldlYkdQVVBpcGVzLFxuICAgIEV4dGVuc2lvblR5cGUuQ2FudmFzUGlwZXNcbiAgXSxcbiAgbmFtZTogXCJodG1sVGV4dFwiXG59O1xuXG5leHBvcnQgeyBIVE1MVGV4dFBpcGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUhUTUxUZXh0UGlwZS5tanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IG5zc3ZnID0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO1xuY29uc3QgbnN4aHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuY2xhc3MgSFRNTFRleHRSZW5kZXJEYXRhIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zdmdSb290ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5zc3ZnLCBcInN2Z1wiKTtcbiAgICB0aGlzLmZvcmVpZ25PYmplY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobnNzdmcsIFwiZm9yZWlnbk9iamVjdFwiKTtcbiAgICB0aGlzLmRvbUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobnN4aHRtbCwgXCJkaXZcIik7XG4gICAgdGhpcy5zdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobnN4aHRtbCwgXCJzdHlsZVwiKTtcbiAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgY29uc3QgeyBmb3JlaWduT2JqZWN0LCBzdmdSb290LCBzdHlsZUVsZW1lbnQsIGRvbUVsZW1lbnQgfSA9IHRoaXM7XG4gICAgZm9yZWlnbk9iamVjdC5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBcIjEwMDAwXCIpO1xuICAgIGZvcmVpZ25PYmplY3Quc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIFwiMTAwMDBcIik7XG4gICAgZm9yZWlnbk9iamVjdC5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG4gICAgc3ZnUm9vdC5hcHBlbmRDaGlsZChmb3JlaWduT2JqZWN0KTtcbiAgICBmb3JlaWduT2JqZWN0LmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudCk7XG4gICAgZm9yZWlnbk9iamVjdC5hcHBlbmRDaGlsZChkb21FbGVtZW50KTtcbiAgfVxufVxuXG5leHBvcnQgeyBIVE1MVGV4dFJlbmRlckRhdGEsIG5zc3ZnLCBuc3hodG1sIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1IVE1MVGV4dFJlbmRlckRhdGEubWpzLm1hcFxuIiwiaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi8uLi9jb2xvci9Db2xvci5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIHRleHRTdHlsZVRvQ1NTKHN0eWxlKSB7XG4gIGNvbnN0IHN0cm9rZSA9IHN0eWxlLl9zdHJva2U7XG4gIGNvbnN0IGZpbGwgPSBzdHlsZS5fZmlsbDtcbiAgY29uc3QgY3NzU3R5bGVTdHJpbmcgPSBbXG4gICAgYGNvbG9yOiAke0NvbG9yLnNoYXJlZC5zZXRWYWx1ZShmaWxsLmNvbG9yKS50b0hleCgpfWAsXG4gICAgYGZvbnQtc2l6ZTogJHtzdHlsZS5mb250U2l6ZX1weGAsXG4gICAgYGZvbnQtZmFtaWx5OiAke3N0eWxlLmZvbnRGYW1pbHl9YCxcbiAgICBgZm9udC13ZWlnaHQ6ICR7c3R5bGUuZm9udFdlaWdodH1gLFxuICAgIGBmb250LXN0eWxlOiAke3N0eWxlLmZvbnRTdHlsZX1gLFxuICAgIGBmb250LXZhcmlhbnQ6ICR7c3R5bGUuZm9udFZhcmlhbnR9YCxcbiAgICBgbGV0dGVyLXNwYWNpbmc6ICR7c3R5bGUubGV0dGVyU3BhY2luZ31weGAsXG4gICAgYHRleHQtYWxpZ246ICR7c3R5bGUuYWxpZ259YCxcbiAgICBgcGFkZGluZzogJHtzdHlsZS5wYWRkaW5nfXB4YCxcbiAgICBgd2hpdGUtc3BhY2U6ICR7c3R5bGUud2hpdGVTcGFjZSA9PT0gXCJwcmVcIiAmJiBzdHlsZS53b3JkV3JhcCA/IFwicHJlLXdyYXBcIiA6IHN0eWxlLndoaXRlU3BhY2V9YCxcbiAgICAuLi5zdHlsZS5saW5lSGVpZ2h0ID8gW2BsaW5lLWhlaWdodDogJHtzdHlsZS5saW5lSGVpZ2h0fXB4YF0gOiBbXSxcbiAgICAuLi5zdHlsZS53b3JkV3JhcCA/IFtcbiAgICAgIGB3b3JkLXdyYXA6ICR7c3R5bGUuYnJlYWtXb3JkcyA/IFwiYnJlYWstYWxsXCIgOiBcImJyZWFrLXdvcmRcIn1gLFxuICAgICAgYG1heC13aWR0aDogJHtzdHlsZS53b3JkV3JhcFdpZHRofXB4YFxuICAgIF0gOiBbXSxcbiAgICAuLi5zdHJva2UgPyBbc3Ryb2tlVG9DU1Moc3Ryb2tlKV0gOiBbXSxcbiAgICAuLi5zdHlsZS5kcm9wU2hhZG93ID8gW2Ryb3BTaGFkb3dUb0NTUyhzdHlsZS5kcm9wU2hhZG93KV0gOiBbXSxcbiAgICAuLi5zdHlsZS5jc3NPdmVycmlkZXNcbiAgXS5qb2luKFwiO1wiKTtcbiAgY29uc3QgY3NzU3R5bGVzID0gW2BkaXYgeyAke2Nzc1N0eWxlU3RyaW5nfSB9YF07XG4gIHRhZ1N0eWxlVG9DU1Moc3R5bGUudGFnU3R5bGVzLCBjc3NTdHlsZXMpO1xuICByZXR1cm4gY3NzU3R5bGVzLmpvaW4oXCIgXCIpO1xufVxuZnVuY3Rpb24gZHJvcFNoYWRvd1RvQ1NTKGRyb3BTaGFkb3dTdHlsZSkge1xuICBjb25zdCBjb2xvciA9IENvbG9yLnNoYXJlZC5zZXRWYWx1ZShkcm9wU2hhZG93U3R5bGUuY29sb3IpLnNldEFscGhhKGRyb3BTaGFkb3dTdHlsZS5hbHBoYSkudG9IZXhhKCk7XG4gIGNvbnN0IHggPSBNYXRoLnJvdW5kKE1hdGguY29zKGRyb3BTaGFkb3dTdHlsZS5hbmdsZSkgKiBkcm9wU2hhZG93U3R5bGUuZGlzdGFuY2UpO1xuICBjb25zdCB5ID0gTWF0aC5yb3VuZChNYXRoLnNpbihkcm9wU2hhZG93U3R5bGUuYW5nbGUpICogZHJvcFNoYWRvd1N0eWxlLmRpc3RhbmNlKTtcbiAgY29uc3QgcG9zaXRpb24gPSBgJHt4fXB4ICR7eX1weGA7XG4gIGlmIChkcm9wU2hhZG93U3R5bGUuYmx1ciA+IDApIHtcbiAgICByZXR1cm4gYHRleHQtc2hhZG93OiAke3Bvc2l0aW9ufSAke2Ryb3BTaGFkb3dTdHlsZS5ibHVyfXB4ICR7Y29sb3J9YDtcbiAgfVxuICByZXR1cm4gYHRleHQtc2hhZG93OiAke3Bvc2l0aW9ufSAke2NvbG9yfWA7XG59XG5mdW5jdGlvbiBzdHJva2VUb0NTUyhzdHJva2UpIHtcbiAgcmV0dXJuIFtcbiAgICBgLXdlYmtpdC10ZXh0LXN0cm9rZS13aWR0aDogJHtzdHJva2Uud2lkdGh9cHhgLFxuICAgIGAtd2Via2l0LXRleHQtc3Ryb2tlLWNvbG9yOiAke0NvbG9yLnNoYXJlZC5zZXRWYWx1ZShzdHJva2UuY29sb3IpLnRvSGV4KCl9YCxcbiAgICBgdGV4dC1zdHJva2Utd2lkdGg6ICR7c3Ryb2tlLndpZHRofXB4YCxcbiAgICBgdGV4dC1zdHJva2UtY29sb3I6ICR7Q29sb3Iuc2hhcmVkLnNldFZhbHVlKHN0cm9rZS5jb2xvcikudG9IZXgoKX1gLFxuICAgIFwicGFpbnQtb3JkZXI6IHN0cm9rZVwiXG4gIF0uam9pbihcIjtcIik7XG59XG5jb25zdCB0ZW1wbGF0ZXMgPSB7XG4gIGZvbnRTaXplOiBgZm9udC1zaXplOiB7e1ZBTFVFfX1weGAsXG4gIGZvbnRGYW1pbHk6IGBmb250LWZhbWlseToge3tWQUxVRX19YCxcbiAgZm9udFdlaWdodDogYGZvbnQtd2VpZ2h0OiB7e1ZBTFVFfX1gLFxuICBmb250U3R5bGU6IGBmb250LXN0eWxlOiB7e1ZBTFVFfX1gLFxuICBmb250VmFyaWFudDogYGZvbnQtdmFyaWFudDoge3tWQUxVRX19YCxcbiAgbGV0dGVyU3BhY2luZzogYGxldHRlci1zcGFjaW5nOiB7e1ZBTFVFfX1weGAsXG4gIGFsaWduOiBgdGV4dC1hbGlnbjoge3tWQUxVRX19YCxcbiAgcGFkZGluZzogYHBhZGRpbmc6IHt7VkFMVUV9fXB4YCxcbiAgd2hpdGVTcGFjZTogYHdoaXRlLXNwYWNlOiB7e1ZBTFVFfX1gLFxuICBsaW5lSGVpZ2h0OiBgbGluZS1oZWlnaHQ6IHt7VkFMVUV9fXB4YCxcbiAgd29yZFdyYXBXaWR0aDogYG1heC13aWR0aDoge3tWQUxVRX19cHhgXG59O1xuY29uc3QgdHJhbnNmb3JtID0ge1xuICBmaWxsOiAodmFsdWUpID0+IGBjb2xvcjogJHtDb2xvci5zaGFyZWQuc2V0VmFsdWUodmFsdWUpLnRvSGV4KCl9YCxcbiAgYnJlYWtXb3JkczogKHZhbHVlKSA9PiBgd29yZC13cmFwOiAke3ZhbHVlID8gXCJicmVhay1hbGxcIiA6IFwiYnJlYWstd29yZFwifWAsXG4gIHN0cm9rZTogc3Ryb2tlVG9DU1MsXG4gIGRyb3BTaGFkb3c6IGRyb3BTaGFkb3dUb0NTU1xufTtcbmZ1bmN0aW9uIHRhZ1N0eWxlVG9DU1ModGFnU3R5bGVzLCBvdXQpIHtcbiAgZm9yIChjb25zdCBpIGluIHRhZ1N0eWxlcykge1xuICAgIGNvbnN0IHRhZ1N0eWxlID0gdGFnU3R5bGVzW2ldO1xuICAgIGNvbnN0IGNzc1RhZ1N0eWxlID0gW107XG4gICAgZm9yIChjb25zdCBqIGluIHRhZ1N0eWxlKSB7XG4gICAgICBpZiAodHJhbnNmb3JtW2pdKSB7XG4gICAgICAgIGNzc1RhZ1N0eWxlLnB1c2godHJhbnNmb3JtW2pdKHRhZ1N0eWxlW2pdKSk7XG4gICAgICB9IGVsc2UgaWYgKHRlbXBsYXRlc1tqXSkge1xuICAgICAgICBjc3NUYWdTdHlsZS5wdXNoKHRlbXBsYXRlc1tqXS5yZXBsYWNlKFwie3tWQUxVRX19XCIsIHRhZ1N0eWxlW2pdKSk7XG4gICAgICB9XG4gICAgfVxuICAgIG91dC5wdXNoKGAke2l9IHsgJHtjc3NUYWdTdHlsZS5qb2luKFwiO1wiKX0gfWApO1xuICB9XG59XG5cbmV4cG9ydCB7IHRleHRTdHlsZVRvQ1NTIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZXh0U3R5bGVUb0NTUy5tanMubWFwXG4iLCJpbXBvcnQgeyB3YXJuIH0gZnJvbSAnLi4vLi4vdXRpbHMvbG9nZ2luZy93YXJuLm1qcyc7XG5pbXBvcnQgeyBUZXh0U3R5bGUgfSBmcm9tICcuLi90ZXh0L1RleHRTdHlsZS5tanMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVUZXh0U3R5bGVLZXkgfSBmcm9tICcuLi90ZXh0L3V0aWxzL2dlbmVyYXRlVGV4dFN0eWxlS2V5Lm1qcyc7XG5pbXBvcnQgeyB0ZXh0U3R5bGVUb0NTUyB9IGZyb20gJy4vdXRpbHMvdGV4dFN0eWxlVG9DU1MubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBIVE1MVGV4dFN0eWxlIGV4dGVuZHMgVGV4dFN0eWxlIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gICAgdGhpcy5fY3NzT3ZlcnJpZGVzID0gW107XG4gICAgdGhpcy5jc3NPdmVycmlkZXMgPz8gKHRoaXMuY3NzT3ZlcnJpZGVzID0gb3B0aW9ucy5jc3NPdmVycmlkZXMpO1xuICAgIHRoaXMudGFnU3R5bGVzID0gb3B0aW9ucy50YWdTdHlsZXMgPz8ge307XG4gIH1cbiAgLyoqIExpc3Qgb2Ygc3R5bGUgb3ZlcnJpZGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBIVE1MIHRleHQuICovXG4gIHNldCBjc3NPdmVycmlkZXModmFsdWUpIHtcbiAgICB0aGlzLl9jc3NPdmVycmlkZXMgPSB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5ID8gdmFsdWUgOiBbdmFsdWVdO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cbiAgZ2V0IGNzc092ZXJyaWRlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fY3NzT3ZlcnJpZGVzO1xuICB9XG4gIF9nZW5lcmF0ZUtleSgpIHtcbiAgICB0aGlzLl9zdHlsZUtleSA9IGdlbmVyYXRlVGV4dFN0eWxlS2V5KHRoaXMpICsgdGhpcy5fY3NzT3ZlcnJpZGVzLmpvaW4oXCItXCIpO1xuICAgIHJldHVybiB0aGlzLl9zdHlsZUtleTtcbiAgfVxuICB1cGRhdGUoKSB7XG4gICAgdGhpcy5fY3NzU3R5bGUgPSBudWxsO1xuICAgIHN1cGVyLnVwZGF0ZSgpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IEhUTUxUZXh0U3R5bGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgdmFsdWVzIGFzIHRoaXMgb25lLlxuICAgKiBAcmV0dXJucyBOZXcgY2xvbmVkIEhUTUxUZXh0U3R5bGUgb2JqZWN0XG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IEhUTUxUZXh0U3R5bGUoe1xuICAgICAgYWxpZ246IHRoaXMuYWxpZ24sXG4gICAgICBicmVha1dvcmRzOiB0aGlzLmJyZWFrV29yZHMsXG4gICAgICBkcm9wU2hhZG93OiB0aGlzLmRyb3BTaGFkb3cgPyB7IC4uLnRoaXMuZHJvcFNoYWRvdyB9IDogbnVsbCxcbiAgICAgIGZpbGw6IHRoaXMuX2ZpbGwsXG4gICAgICBmb250RmFtaWx5OiB0aGlzLmZvbnRGYW1pbHksXG4gICAgICBmb250U2l6ZTogdGhpcy5mb250U2l6ZSxcbiAgICAgIGZvbnRTdHlsZTogdGhpcy5mb250U3R5bGUsXG4gICAgICBmb250VmFyaWFudDogdGhpcy5mb250VmFyaWFudCxcbiAgICAgIGZvbnRXZWlnaHQ6IHRoaXMuZm9udFdlaWdodCxcbiAgICAgIGxldHRlclNwYWNpbmc6IHRoaXMubGV0dGVyU3BhY2luZyxcbiAgICAgIGxpbmVIZWlnaHQ6IHRoaXMubGluZUhlaWdodCxcbiAgICAgIHBhZGRpbmc6IHRoaXMucGFkZGluZyxcbiAgICAgIHN0cm9rZTogdGhpcy5fc3Ryb2tlLFxuICAgICAgd2hpdGVTcGFjZTogdGhpcy53aGl0ZVNwYWNlLFxuICAgICAgd29yZFdyYXA6IHRoaXMud29yZFdyYXAsXG4gICAgICB3b3JkV3JhcFdpZHRoOiB0aGlzLndvcmRXcmFwV2lkdGgsXG4gICAgICBjc3NPdmVycmlkZXM6IHRoaXMuY3NzT3ZlcnJpZGVzXG4gICAgfSk7XG4gIH1cbiAgZ2V0IGNzc1N0eWxlKCkge1xuICAgIGlmICghdGhpcy5fY3NzU3R5bGUpIHtcbiAgICAgIHRoaXMuX2Nzc1N0eWxlID0gdGV4dFN0eWxlVG9DU1ModGhpcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jc3NTdHlsZTtcbiAgfVxuICAvKipcbiAgICogQWRkIGEgc3R5bGUgb3ZlcnJpZGUsIHRoaXMgY2FuIGJlIGFueSBDU1MgcHJvcGVydHlcbiAgICogaXQgd2lsbCBvdmVycmlkZSBhbnkgYnVpbHQtaW4gc3R5bGUuIFRoaXMgaXMgdGhlXG4gICAqIHByb3BlcnR5IGFuZCB0aGUgdmFsdWUgYXMgYSBzdHJpbmcgKGUuZy4sIGBjb2xvcjogcmVkYCkuXG4gICAqIFRoaXMgd2lsbCBvdmVycmlkZSBhbnkgb3RoZXIgaW50ZXJuYWwgc3R5bGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIENTUyBzdHlsZShzKSB0byBhZGQuXG4gICAqIEBleGFtcGxlXG4gICAqIHN0eWxlLmFkZE92ZXJyaWRlKCdiYWNrZ3JvdW5kLWNvbG9yOiByZWQnKTtcbiAgICovXG4gIGFkZE92ZXJyaWRlKC4uLnZhbHVlKSB7XG4gICAgY29uc3QgdG9BZGQgPSB2YWx1ZS5maWx0ZXIoKHYpID0+ICF0aGlzLmNzc092ZXJyaWRlcy5pbmNsdWRlcyh2KSk7XG4gICAgaWYgKHRvQWRkLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuY3NzT3ZlcnJpZGVzLnB1c2goLi4udG9BZGQpO1xuICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhbnkgb3ZlcnJpZGVzIHRoYXQgbWF0Y2ggdGhlIHZhbHVlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBDU1Mgc3R5bGUgdG8gcmVtb3ZlLlxuICAgKiBAZXhhbXBsZVxuICAgKiBzdHlsZS5yZW1vdmVPdmVycmlkZSgnYmFja2dyb3VuZC1jb2xvcjogcmVkJyk7XG4gICAqL1xuICByZW1vdmVPdmVycmlkZSguLi52YWx1ZSkge1xuICAgIGNvbnN0IHRvUmVtb3ZlID0gdmFsdWUuZmlsdGVyKCh2KSA9PiB0aGlzLmNzc092ZXJyaWRlcy5pbmNsdWRlcyh2KSk7XG4gICAgaWYgKHRvUmVtb3ZlLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuY3NzT3ZlcnJpZGVzID0gdGhpcy5jc3NPdmVycmlkZXMuZmlsdGVyKCh2KSA9PiAhdG9SZW1vdmUuaW5jbHVkZXModikpO1xuICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9XG4gIH1cbiAgc2V0IGZpbGwodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgd2FybihcIltIVE1MVGV4dFN0eWxlXSBvbmx5IGNvbG9yIGZpbGwgaXMgbm90IHN1cHBvcnRlZCBieSBIVE1MVGV4dFwiKTtcbiAgICB9XG4gICAgc3VwZXIuZmlsbCA9IHZhbHVlO1xuICB9XG4gIHNldCBzdHJva2UodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgd2FybihcIltIVE1MVGV4dFN0eWxlXSBvbmx5IGNvbG9yIHN0cm9rZSBpcyBub3Qgc3VwcG9ydGVkIGJ5IEhUTUxUZXh0XCIpO1xuICAgIH1cbiAgICBzdXBlci5zdHJva2UgPSB2YWx1ZTtcbiAgfVxufVxuXG5leHBvcnQgeyBIVE1MVGV4dFN0eWxlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1IdG1sVGV4dFN0eWxlLm1qcy5tYXBcbiIsImltcG9ydCB7IGxvYWRGb250QXNCYXNlNjQgfSBmcm9tICcuL2xvYWRGb250QXNCYXNlNjQubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5hc3luYyBmdW5jdGlvbiBsb2FkRm9udENTUyhzdHlsZSwgdXJsKSB7XG4gIGNvbnN0IGRhdGFTcmMgPSBhd2FpdCBsb2FkRm9udEFzQmFzZTY0KHVybCk7XG4gIHJldHVybiBgQGZvbnQtZmFjZSB7XG4gICAgICAgIGZvbnQtZmFtaWx5OiBcIiR7c3R5bGUuZm9udEZhbWlseX1cIjtcbiAgICAgICAgc3JjOiB1cmwoJyR7ZGF0YVNyY30nKTtcbiAgICAgICAgZm9udC13ZWlnaHQ6ICR7c3R5bGUuZm9udFdlaWdodH07XG4gICAgICAgIGZvbnQtc3R5bGU6ICR7c3R5bGUuZm9udFN0eWxlfTtcbiAgICB9YDtcbn1cblxuZXhwb3J0IHsgbG9hZEZvbnRDU1MgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvYWRGb250Q1NTLm1qcy5tYXBcbiIsImltcG9ydCB7IERPTUFkYXB0ZXIgfSBmcm9tICcuLi8uLi8uLi9lbnZpcm9ubWVudC9hZGFwdGVyLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuYXN5bmMgZnVuY3Rpb24gbG9hZEZvbnRBc0Jhc2U2NCh1cmwpIHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBET01BZGFwdGVyLmdldCgpLmZldGNoKHVybCk7XG4gIGNvbnN0IGJsb2IgPSBhd2FpdCByZXNwb25zZS5ibG9iKCk7XG4gIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gIGNvbnN0IGRhdGFTcmMgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgcmVhZGVyLm9ubG9hZGVuZCA9ICgpID0+IHJlc29sdmUocmVhZGVyLnJlc3VsdCk7XG4gICAgcmVhZGVyLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoYmxvYik7XG4gIH0pO1xuICByZXR1cm4gZGF0YVNyYztcbn1cblxuZXhwb3J0IHsgbG9hZEZvbnRBc0Jhc2U2NCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9hZEZvbnRBc0Jhc2U2NC5tanMubWFwXG4iLCJpbXBvcnQgeyBDYWNoZSB9IGZyb20gJy4uLy4uLy4uL2Fzc2V0cy9jYWNoZS9DYWNoZS5tanMnO1xuaW1wb3J0IHsgbG9hZEZvbnRDU1MgfSBmcm9tICcuL2xvYWRGb250Q1NTLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY29uc3QgRm9udFN0eWxlUHJvbWlzZUNhY2hlID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbmFzeW5jIGZ1bmN0aW9uIGdldEZvbnRDc3MoZm9udEZhbWlsaWVzLCBzdHlsZSwgZGVmYXVsdE9wdGlvbnMpIHtcbiAgY29uc3QgZm9udFByb21pc2VzID0gZm9udEZhbWlsaWVzLmZpbHRlcigoZm9udEZhbWlseSkgPT4gQ2FjaGUuaGFzKGAke2ZvbnRGYW1pbHl9LWFuZC11cmxgKSkubWFwKChmb250RmFtaWx5LCBpKSA9PiB7XG4gICAgaWYgKCFGb250U3R5bGVQcm9taXNlQ2FjaGUuaGFzKGZvbnRGYW1pbHkpKSB7XG4gICAgICBjb25zdCB7IHVybCB9ID0gQ2FjaGUuZ2V0KGAke2ZvbnRGYW1pbHl9LWFuZC11cmxgKTtcbiAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgIEZvbnRTdHlsZVByb21pc2VDYWNoZS5zZXQoZm9udEZhbWlseSwgbG9hZEZvbnRDU1Moe1xuICAgICAgICAgIGZvbnRXZWlnaHQ6IHN0eWxlLmZvbnRXZWlnaHQsXG4gICAgICAgICAgZm9udFN0eWxlOiBzdHlsZS5mb250U3R5bGUsXG4gICAgICAgICAgZm9udEZhbWlseVxuICAgICAgICB9LCB1cmwpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEZvbnRTdHlsZVByb21pc2VDYWNoZS5zZXQoZm9udEZhbWlseSwgbG9hZEZvbnRDU1Moe1xuICAgICAgICAgIGZvbnRXZWlnaHQ6IGRlZmF1bHRPcHRpb25zLmZvbnRXZWlnaHQsXG4gICAgICAgICAgZm9udFN0eWxlOiBkZWZhdWx0T3B0aW9ucy5mb250U3R5bGUsXG4gICAgICAgICAgZm9udEZhbWlseVxuICAgICAgICB9LCB1cmwpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIEZvbnRTdHlsZVByb21pc2VDYWNoZS5nZXQoZm9udEZhbWlseSk7XG4gIH0pO1xuICByZXR1cm4gKGF3YWl0IFByb21pc2UuYWxsKGZvbnRQcm9taXNlcykpLmpvaW4oXCJcXG5cIik7XG59XG5cbmV4cG9ydCB7IEZvbnRTdHlsZVByb21pc2VDYWNoZSwgZ2V0Rm9udENzcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0Rm9udENzcy5tanMubWFwXG4iLCJpbXBvcnQgeyBIVE1MVGV4dFJlbmRlckRhdGEgfSBmcm9tICcuLi9IVE1MVGV4dFJlbmRlckRhdGEubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5sZXQgdGVtcEhUTUxUZXh0UmVuZGVyRGF0YTtcbmZ1bmN0aW9uIG1lYXN1cmVIdG1sVGV4dCh0ZXh0LCBzdHlsZSwgZm9udFN0eWxlQ1NTLCBodG1sVGV4dFJlbmRlckRhdGEpIHtcbiAgaHRtbFRleHRSZW5kZXJEYXRhID0gaHRtbFRleHRSZW5kZXJEYXRhIHx8IHRlbXBIVE1MVGV4dFJlbmRlckRhdGEgfHwgKHRlbXBIVE1MVGV4dFJlbmRlckRhdGEgPSBuZXcgSFRNTFRleHRSZW5kZXJEYXRhKCkpO1xuICBjb25zdCB7IGRvbUVsZW1lbnQsIHN0eWxlRWxlbWVudCwgc3ZnUm9vdCB9ID0gaHRtbFRleHRSZW5kZXJEYXRhO1xuICBkb21FbGVtZW50LmlubmVySFRNTCA9IGA8c3R5bGU+JHtzdHlsZS5jc3NTdHlsZX07PC9zdHlsZT48ZGl2IHN0eWxlPSdwYWRkaW5nOjAnPiR7dGV4dH08L2Rpdj5gO1xuICBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwidHJhbnNmb3JtLW9yaWdpbjogdG9wIGxlZnQ7IGRpc3BsYXk6IGlubGluZS1ibG9ja1wiKTtcbiAgaWYgKGZvbnRTdHlsZUNTUykge1xuICAgIHN0eWxlRWxlbWVudC50ZXh0Q29udGVudCA9IGZvbnRTdHlsZUNTUztcbiAgfVxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHN2Z1Jvb3QpO1xuICBjb25zdCBjb250ZW50Qm91bmRzID0gZG9tRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgc3ZnUm9vdC5yZW1vdmUoKTtcbiAgY29uc3QgZG91YmxlUGFkZGluZyA9IHN0eWxlLnBhZGRpbmcgKiAyO1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiBjb250ZW50Qm91bmRzLndpZHRoIC0gZG91YmxlUGFkZGluZyxcbiAgICBoZWlnaHQ6IGNvbnRlbnRCb3VuZHMuaGVpZ2h0IC0gZG91YmxlUGFkZGluZ1xuICB9O1xufVxuXG5leHBvcnQgeyBtZWFzdXJlSHRtbFRleHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lYXN1cmVIdG1sVGV4dC5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBDYW52YXNQb29sIH0gZnJvbSAnLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvdGV4dHVyZS9DYW52YXNQb29sLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlUG9vbCB9IGZyb20gJy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3RleHR1cmUvVGV4dHVyZVBvb2wubWpzJztcbmltcG9ydCB7IFJlbmRlcmVyVHlwZSB9IGZyb20gJy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvdHlwZXMubWpzJztcbmltcG9ydCB7IGlzU2FmYXJpIH0gZnJvbSAnLi4vLi4vdXRpbHMvYnJvd3Nlci9pc1NhZmFyaS5tanMnO1xuaW1wb3J0IHsgd2FybiB9IGZyb20gJy4uLy4uL3V0aWxzL2xvZ2dpbmcvd2Fybi5tanMnO1xuaW1wb3J0IHsgQmlnUG9vbCB9IGZyb20gJy4uLy4uL3V0aWxzL3Bvb2wvUG9vbEdyb3VwLm1qcyc7XG5pbXBvcnQgeyBnZXRQbzJUZXh0dXJlRnJvbVNvdXJjZSB9IGZyb20gJy4uL3RleHQvdXRpbHMvZ2V0UG8yVGV4dHVyZUZyb21Tb3VyY2UubWpzJztcbmltcG9ydCB7IEhUTUxUZXh0UmVuZGVyRGF0YSB9IGZyb20gJy4vSFRNTFRleHRSZW5kZXJEYXRhLm1qcyc7XG5pbXBvcnQgeyBIVE1MVGV4dFN0eWxlIH0gZnJvbSAnLi9IdG1sVGV4dFN0eWxlLm1qcyc7XG5pbXBvcnQgeyBleHRyYWN0Rm9udEZhbWlsaWVzIH0gZnJvbSAnLi91dGlscy9leHRyYWN0Rm9udEZhbWlsaWVzLm1qcyc7XG5pbXBvcnQgeyBnZXRGb250Q3NzIH0gZnJvbSAnLi91dGlscy9nZXRGb250Q3NzLm1qcyc7XG5pbXBvcnQgeyBnZXRTVkdVcmwgfSBmcm9tICcuL3V0aWxzL2dldFNWR1VybC5tanMnO1xuaW1wb3J0IHsgZ2V0VGVtcG9yYXJ5Q2FudmFzRnJvbUltYWdlIH0gZnJvbSAnLi91dGlscy9nZXRUZW1wb3JhcnlDYW52YXNGcm9tSW1hZ2UubWpzJztcbmltcG9ydCB7IGxvYWRTVkdJbWFnZSB9IGZyb20gJy4vdXRpbHMvbG9hZFNWR0ltYWdlLm1qcyc7XG5pbXBvcnQgeyBtZWFzdXJlSHRtbFRleHQgfSBmcm9tICcuL3V0aWxzL21lYXN1cmVIdG1sVGV4dC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNsYXNzIEhUTUxUZXh0U3lzdGVtIHtcbiAgY29uc3RydWN0b3IocmVuZGVyZXIpIHtcbiAgICB0aGlzLl9hY3RpdmVUZXh0dXJlcyA9IHt9O1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5fY3JlYXRlQ2FudmFzID0gcmVuZGVyZXIudHlwZSA9PT0gUmVuZGVyZXJUeXBlLldFQkdQVTtcbiAgfVxuICBnZXRUZXh0dXJlKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fYnVpbGRUZXh0dXJlUHJvbWlzZShcbiAgICAgIG9wdGlvbnMudGV4dCxcbiAgICAgIG9wdGlvbnMucmVzb2x1dGlvbixcbiAgICAgIG9wdGlvbnMuc3R5bGVcbiAgICApO1xuICB9XG4gIGdldE1hbmFnZWRUZXh0dXJlKHRleHQsIHJlc29sdXRpb24sIHN0eWxlLCB0ZXh0S2V5KSB7XG4gICAgaWYgKHRoaXMuX2FjdGl2ZVRleHR1cmVzW3RleHRLZXldKSB7XG4gICAgICB0aGlzLl9pbmNyZWFzZVJlZmVyZW5jZUNvdW50KHRleHRLZXkpO1xuICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVRleHR1cmVzW3RleHRLZXldLnByb21pc2U7XG4gICAgfVxuICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLl9idWlsZFRleHR1cmVQcm9taXNlKHRleHQsIHJlc29sdXRpb24sIHN0eWxlKS50aGVuKCh0ZXh0dXJlKSA9PiB7XG4gICAgICB0aGlzLl9hY3RpdmVUZXh0dXJlc1t0ZXh0S2V5XS50ZXh0dXJlID0gdGV4dHVyZTtcbiAgICAgIHJldHVybiB0ZXh0dXJlO1xuICAgIH0pO1xuICAgIHRoaXMuX2FjdGl2ZVRleHR1cmVzW3RleHRLZXldID0ge1xuICAgICAgdGV4dHVyZTogbnVsbCxcbiAgICAgIHByb21pc2UsXG4gICAgICB1c2FnZUNvdW50OiAxXG4gICAgfTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuICBhc3luYyBfYnVpbGRUZXh0dXJlUHJvbWlzZSh0ZXh0LCByZXNvbHV0aW9uLCBzdHlsZSkge1xuICAgIGNvbnN0IGh0bWxUZXh0RGF0YSA9IEJpZ1Bvb2wuZ2V0KEhUTUxUZXh0UmVuZGVyRGF0YSk7XG4gICAgY29uc3QgZm9udEZhbWlsaWVzID0gZXh0cmFjdEZvbnRGYW1pbGllcyh0ZXh0LCBzdHlsZSk7XG4gICAgY29uc3QgZm9udENTUyA9IGF3YWl0IGdldEZvbnRDc3MoXG4gICAgICBmb250RmFtaWxpZXMsXG4gICAgICBzdHlsZSxcbiAgICAgIEhUTUxUZXh0U3R5bGUuZGVmYXVsdFRleHRTdHlsZVxuICAgICk7XG4gICAgY29uc3QgbWVhc3VyZWQgPSBtZWFzdXJlSHRtbFRleHQodGV4dCwgc3R5bGUsIGZvbnRDU1MsIGh0bWxUZXh0RGF0YSk7XG4gICAgY29uc3Qgd2lkdGggPSBNYXRoLmNlaWwoTWF0aC5jZWlsKE1hdGgubWF4KDEsIG1lYXN1cmVkLndpZHRoKSArIHN0eWxlLnBhZGRpbmcgKiAyKSAqIHJlc29sdXRpb24pO1xuICAgIGNvbnN0IGhlaWdodCA9IE1hdGguY2VpbChNYXRoLmNlaWwoTWF0aC5tYXgoMSwgbWVhc3VyZWQuaGVpZ2h0KSArIHN0eWxlLnBhZGRpbmcgKiAyKSAqIHJlc29sdXRpb24pO1xuICAgIGNvbnN0IGltYWdlID0gaHRtbFRleHREYXRhLmltYWdlO1xuICAgIGNvbnN0IHV2U2FmZU9mZnNldCA9IDI7XG4gICAgaW1hZ2Uud2lkdGggPSAod2lkdGggfCAwKSArIHV2U2FmZU9mZnNldDtcbiAgICBpbWFnZS5oZWlnaHQgPSAoaGVpZ2h0IHwgMCkgKyB1dlNhZmVPZmZzZXQ7XG4gICAgY29uc3Qgc3ZnVVJMID0gZ2V0U1ZHVXJsKHRleHQsIHN0eWxlLCByZXNvbHV0aW9uLCBmb250Q1NTLCBodG1sVGV4dERhdGEpO1xuICAgIGF3YWl0IGxvYWRTVkdJbWFnZShpbWFnZSwgc3ZnVVJMLCBpc1NhZmFyaSgpICYmIGZvbnRGYW1pbGllcy5sZW5ndGggPiAwKTtcbiAgICBjb25zdCByZXNvdXJjZSA9IGltYWdlO1xuICAgIGxldCBjYW52YXNBbmRDb250ZXh0O1xuICAgIGlmICh0aGlzLl9jcmVhdGVDYW52YXMpIHtcbiAgICAgIGNhbnZhc0FuZENvbnRleHQgPSBnZXRUZW1wb3JhcnlDYW52YXNGcm9tSW1hZ2UoaW1hZ2UsIHJlc29sdXRpb24pO1xuICAgIH1cbiAgICBjb25zdCB0ZXh0dXJlID0gZ2V0UG8yVGV4dHVyZUZyb21Tb3VyY2UoXG4gICAgICBjYW52YXNBbmRDb250ZXh0ID8gY2FudmFzQW5kQ29udGV4dC5jYW52YXMgOiByZXNvdXJjZSxcbiAgICAgIGltYWdlLndpZHRoIC0gdXZTYWZlT2Zmc2V0LFxuICAgICAgaW1hZ2UuaGVpZ2h0IC0gdXZTYWZlT2Zmc2V0LFxuICAgICAgcmVzb2x1dGlvblxuICAgICk7XG4gICAgaWYgKHRoaXMuX2NyZWF0ZUNhbnZhcykge1xuICAgICAgdGhpcy5fcmVuZGVyZXIudGV4dHVyZS5pbml0U291cmNlKHRleHR1cmUuc291cmNlKTtcbiAgICAgIENhbnZhc1Bvb2wucmV0dXJuQ2FudmFzQW5kQ29udGV4dChjYW52YXNBbmRDb250ZXh0KTtcbiAgICB9XG4gICAgQmlnUG9vbC5yZXR1cm4oaHRtbFRleHREYXRhKTtcbiAgICByZXR1cm4gdGV4dHVyZTtcbiAgfVxuICBfaW5jcmVhc2VSZWZlcmVuY2VDb3VudCh0ZXh0S2V5KSB7XG4gICAgdGhpcy5fYWN0aXZlVGV4dHVyZXNbdGV4dEtleV0udXNhZ2VDb3VudCsrO1xuICB9XG4gIGRlY3JlYXNlUmVmZXJlbmNlQ291bnQodGV4dEtleSkge1xuICAgIGNvbnN0IGFjdGl2ZVRleHR1cmUgPSB0aGlzLl9hY3RpdmVUZXh0dXJlc1t0ZXh0S2V5XTtcbiAgICBpZiAoIWFjdGl2ZVRleHR1cmUpXG4gICAgICByZXR1cm47XG4gICAgYWN0aXZlVGV4dHVyZS51c2FnZUNvdW50LS07XG4gICAgaWYgKGFjdGl2ZVRleHR1cmUudXNhZ2VDb3VudCA9PT0gMCkge1xuICAgICAgaWYgKGFjdGl2ZVRleHR1cmUudGV4dHVyZSkge1xuICAgICAgICB0aGlzLl9jbGVhblVwKGFjdGl2ZVRleHR1cmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZlVGV4dHVyZS5wcm9taXNlLnRoZW4oKHRleHR1cmUpID0+IHtcbiAgICAgICAgICBhY3RpdmVUZXh0dXJlLnRleHR1cmUgPSB0ZXh0dXJlO1xuICAgICAgICAgIHRoaXMuX2NsZWFuVXAoYWN0aXZlVGV4dHVyZSk7XG4gICAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICB3YXJuKFwiSFRNTFRleHRTeXN0ZW06IEZhaWxlZCB0byBjbGVhbiB0ZXh0dXJlXCIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2FjdGl2ZVRleHR1cmVzW3RleHRLZXldID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgX2NsZWFuVXAoYWN0aXZlVGV4dHVyZSkge1xuICAgIFRleHR1cmVQb29sLnJldHVyblRleHR1cmUoYWN0aXZlVGV4dHVyZS50ZXh0dXJlKTtcbiAgICBhY3RpdmVUZXh0dXJlLnRleHR1cmUuc291cmNlLnJlc291cmNlID0gbnVsbDtcbiAgICBhY3RpdmVUZXh0dXJlLnRleHR1cmUuc291cmNlLnVwbG9hZE1ldGhvZElkID0gXCJ1bmtub3duXCI7XG4gIH1cbiAgZ2V0UmVmZXJlbmNlQ291bnQodGV4dEtleSkge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmVUZXh0dXJlc1t0ZXh0S2V5XS51c2FnZUNvdW50O1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fYWN0aXZlVGV4dHVyZXMgPSBudWxsO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuSFRNTFRleHRTeXN0ZW0uZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFN5c3RlbSxcbiAgICBFeHRlbnNpb25UeXBlLldlYkdQVVN5c3RlbSxcbiAgICBFeHRlbnNpb25UeXBlLkNhbnZhc1N5c3RlbVxuICBdLFxuICBuYW1lOiBcImh0bWxUZXh0XCJcbn07XG5IVE1MVGV4dFN5c3RlbS5kZWZhdWx0Rm9udE9wdGlvbnMgPSB7XG4gIGZvbnRGYW1pbHk6IFwiQXJpYWxcIixcbiAgZm9udFN0eWxlOiBcIm5vcm1hbFwiLFxuICBmb250V2VpZ2h0OiBcIm5vcm1hbFwiXG59O1xuXG5leHBvcnQgeyBIVE1MVGV4dFN5c3RlbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SFRNTFRleHRTeXN0ZW0ubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBleHRyYWN0Rm9udEZhbWlsaWVzKHRleHQsIHN0eWxlKSB7XG4gIGNvbnN0IGZvbnRGYW1pbHkgPSBzdHlsZS5mb250RmFtaWx5O1xuICBjb25zdCBmb250RmFtaWxpZXMgPSBbXTtcbiAgY29uc3QgZGVkdXBlID0ge307XG4gIGNvbnN0IHJlZ2V4ID0gL2ZvbnQtZmFtaWx5OihbXjtcIlxcc10rKS9nO1xuICBjb25zdCBtYXRjaGVzID0gdGV4dC5tYXRjaChyZWdleCk7XG4gIGZ1bmN0aW9uIGFkZEZvbnRGYW1pbHkoZm9udEZhbWlseTIpIHtcbiAgICBpZiAoIWRlZHVwZVtmb250RmFtaWx5Ml0pIHtcbiAgICAgIGZvbnRGYW1pbGllcy5wdXNoKGZvbnRGYW1pbHkyKTtcbiAgICAgIGRlZHVwZVtmb250RmFtaWx5Ml0gPSB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShmb250RmFtaWx5KSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm9udEZhbWlseS5sZW5ndGg7IGkrKykge1xuICAgICAgYWRkRm9udEZhbWlseShmb250RmFtaWx5W2ldKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYWRkRm9udEZhbWlseShmb250RmFtaWx5KTtcbiAgfVxuICBpZiAobWF0Y2hlcykge1xuICAgIG1hdGNoZXMuZm9yRWFjaCgobWF0Y2gpID0+IHtcbiAgICAgIGNvbnN0IGZvbnRGYW1pbHkyID0gbWF0Y2guc3BsaXQoXCI6XCIpWzFdLnRyaW0oKTtcbiAgICAgIGFkZEZvbnRGYW1pbHkoZm9udEZhbWlseTIpO1xuICAgIH0pO1xuICB9XG4gIGZvciAoY29uc3QgaSBpbiBzdHlsZS50YWdTdHlsZXMpIHtcbiAgICBjb25zdCBmb250RmFtaWx5MiA9IHN0eWxlLnRhZ1N0eWxlc1tpXS5mb250RmFtaWx5O1xuICAgIGFkZEZvbnRGYW1pbHkoZm9udEZhbWlseTIpO1xuICB9XG4gIHJldHVybiBmb250RmFtaWxpZXM7XG59XG5cbmV4cG9ydCB7IGV4dHJhY3RGb250RmFtaWxpZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4dHJhY3RGb250RmFtaWxpZXMubWpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBnZXRTVkdVcmwodGV4dCwgc3R5bGUsIHJlc29sdXRpb24sIGZvbnRDU1MsIGh0bWxUZXh0RGF0YSkge1xuICBjb25zdCB7IGRvbUVsZW1lbnQsIHN0eWxlRWxlbWVudCwgc3ZnUm9vdCB9ID0gaHRtbFRleHREYXRhO1xuICBkb21FbGVtZW50LmlubmVySFRNTCA9IGA8c3R5bGU+JHtzdHlsZS5jc3NTdHlsZX08L3N0eWxlPjxkaXYgc3R5bGU9J3BhZGRpbmc6MDsnPiR7dGV4dH08L2Rpdj5gO1xuICBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIGB0cmFuc2Zvcm06IHNjYWxlKCR7cmVzb2x1dGlvbn0pO3RyYW5zZm9ybS1vcmlnaW46IHRvcCBsZWZ0OyBkaXNwbGF5OiBpbmxpbmUtYmxvY2tgKTtcbiAgc3R5bGVFbGVtZW50LnRleHRDb250ZW50ID0gZm9udENTUztcbiAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBodG1sVGV4dERhdGEuaW1hZ2U7XG4gIHN2Z1Jvb3Quc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgd2lkdGgudG9TdHJpbmcoKSk7XG4gIHN2Z1Jvb3Quc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIGhlaWdodC50b1N0cmluZygpKTtcbiAgcmV0dXJuIG5ldyBYTUxTZXJpYWxpemVyKCkuc2VyaWFsaXplVG9TdHJpbmcoc3ZnUm9vdCk7XG59XG5cbmV4cG9ydCB7IGdldFNWR1VybCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0U1ZHVXJsLm1qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gbG9hZFNWR0ltYWdlKGltYWdlLCB1cmwsIGRlbGF5KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSkgPT4ge1xuICAgIGlmIChkZWxheSkge1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUyKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUyLCAxMDApKTtcbiAgICB9XG4gICAgaW1hZ2Uub25sb2FkID0gKCkgPT4ge1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH07XG4gICAgaW1hZ2Uuc3JjID0gYGRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0ZjgsJHtlbmNvZGVVUklDb21wb25lbnQodXJsKX1gO1xuICAgIGltYWdlLmNyb3NzT3JpZ2luID0gXCJhbm9ueW1vdXNcIjtcbiAgfSk7XG59XG5cbmV4cG9ydCB7IGxvYWRTVkdJbWFnZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9hZFNWR0ltYWdlLm1qcy5tYXBcbiIsImltcG9ydCB7IERPTUFkYXB0ZXIgfSBmcm9tICcuLi8uLi9lbnZpcm9ubWVudC9hZGFwdGVyLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gaXNTYWZhcmkoKSB7XG4gIGNvbnN0IHsgdXNlckFnZW50IH0gPSBET01BZGFwdGVyLmdldCgpLmdldE5hdmlnYXRvcigpO1xuICByZXR1cm4gL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdCh1c2VyQWdlbnQpO1xufVxuXG5leHBvcnQgeyBpc1NhZmFyaSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNTYWZhcmkubWpzLm1hcFxuIiwiaW1wb3J0IHsgQ2FudmFzUG9vbCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3RleHR1cmUvQ2FudmFzUG9vbC5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmZ1bmN0aW9uIGdldFRlbXBvcmFyeUNhbnZhc0Zyb21JbWFnZShpbWFnZSwgcmVzb2x1dGlvbikge1xuICBjb25zdCBjYW52YXNBbmRDb250ZXh0ID0gQ2FudmFzUG9vbC5nZXRPcHRpbWFsQ2FudmFzQW5kQ29udGV4dChcbiAgICBpbWFnZS53aWR0aCxcbiAgICBpbWFnZS5oZWlnaHQsXG4gICAgcmVzb2x1dGlvblxuICApO1xuICBjb25zdCB7IGNvbnRleHQgfSA9IGNhbnZhc0FuZENvbnRleHQ7XG4gIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQpO1xuICBjb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgMCwgMCk7XG4gIHJldHVybiBjYW52YXNBbmRDb250ZXh0O1xufVxuXG5leHBvcnQgeyBnZXRUZW1wb3JhcnlDYW52YXNGcm9tSW1hZ2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFRlbXBvcmFyeUNhbnZhc0Zyb21JbWFnZS5tanMubWFwXG4iLCJpbXBvcnQgeyBleHRlbnNpb25zIH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyBIVE1MVGV4dFBpcGUgfSBmcm9tICcuL0hUTUxUZXh0UGlwZS5tanMnO1xuaW1wb3J0IHsgSFRNTFRleHRTeXN0ZW0gfSBmcm9tICcuL0hUTUxUZXh0U3lzdGVtLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZXh0ZW5zaW9ucy5hZGQoSFRNTFRleHRTeXN0ZW0pO1xuZXh0ZW5zaW9ucy5hZGQoSFRNTFRleHRQaXBlKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaXQubWpzLm1hcFxuIiwiaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi8uLi8uLi9jb2xvci9Db2xvci5tanMnO1xuaW1wb3J0IHsgTWF0cml4IH0gZnJvbSAnLi4vLi4vLi4vLi4vbWF0aHMvbWF0cml4L01hdHJpeC5tanMnO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uLy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3RleHR1cmUvVGV4dHVyZS5tanMnO1xuaW1wb3J0IHsgd2FybiB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2xvZ2dpbmcvd2Fybi5tanMnO1xuaW1wb3J0IHsgRmlsbEdyYWRpZW50IH0gZnJvbSAnLi4vLi4vLi4vZ3JhcGhpY3Mvc2hhcmVkL2ZpbGwvRmlsbEdyYWRpZW50Lm1qcyc7XG5pbXBvcnQgeyBGaWxsUGF0dGVybiB9IGZyb20gJy4uLy4uLy4uL2dyYXBoaWNzL3NoYXJlZC9maWxsL0ZpbGxQYXR0ZXJuLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gZ2V0Q2FudmFzRmlsbFN0eWxlKGZpbGxTdHlsZSwgY29udGV4dCkge1xuICBpZiAoZmlsbFN0eWxlLnRleHR1cmUgPT09IFRleHR1cmUuV0hJVEUgJiYgIWZpbGxTdHlsZS5maWxsKSB7XG4gICAgcmV0dXJuIENvbG9yLnNoYXJlZC5zZXRWYWx1ZShmaWxsU3R5bGUuY29sb3IpLnNldEFscGhhKGZpbGxTdHlsZS5hbHBoYSA/PyAxKS50b0hleGEoKTtcbiAgfSBlbHNlIGlmICghZmlsbFN0eWxlLmZpbGwpIHtcbiAgICBjb25zdCBwYXR0ZXJuID0gY29udGV4dC5jcmVhdGVQYXR0ZXJuKGZpbGxTdHlsZS50ZXh0dXJlLnNvdXJjZS5yZXNvdXJjZSwgXCJyZXBlYXRcIik7XG4gICAgY29uc3QgdGVtcE1hdHJpeCA9IGZpbGxTdHlsZS5tYXRyaXguY29weVRvKE1hdHJpeC5zaGFyZWQpO1xuICAgIHRlbXBNYXRyaXguc2NhbGUoZmlsbFN0eWxlLnRleHR1cmUuZnJhbWUud2lkdGgsIGZpbGxTdHlsZS50ZXh0dXJlLmZyYW1lLmhlaWdodCk7XG4gICAgcGF0dGVybi5zZXRUcmFuc2Zvcm0odGVtcE1hdHJpeCk7XG4gICAgcmV0dXJuIHBhdHRlcm47XG4gIH0gZWxzZSBpZiAoZmlsbFN0eWxlLmZpbGwgaW5zdGFuY2VvZiBGaWxsUGF0dGVybikge1xuICAgIGNvbnN0IGZpbGxQYXR0ZXJuID0gZmlsbFN0eWxlLmZpbGw7XG4gICAgY29uc3QgcGF0dGVybiA9IGNvbnRleHQuY3JlYXRlUGF0dGVybihmaWxsUGF0dGVybi50ZXh0dXJlLnNvdXJjZS5yZXNvdXJjZSwgXCJyZXBlYXRcIik7XG4gICAgY29uc3QgdGVtcE1hdHJpeCA9IGZpbGxQYXR0ZXJuLnRyYW5zZm9ybS5jb3B5VG8oTWF0cml4LnNoYXJlZCk7XG4gICAgdGVtcE1hdHJpeC5zY2FsZShcbiAgICAgIGZpbGxQYXR0ZXJuLnRleHR1cmUuZnJhbWUud2lkdGgsXG4gICAgICBmaWxsUGF0dGVybi50ZXh0dXJlLmZyYW1lLmhlaWdodFxuICAgICk7XG4gICAgcGF0dGVybi5zZXRUcmFuc2Zvcm0odGVtcE1hdHJpeCk7XG4gICAgcmV0dXJuIHBhdHRlcm47XG4gIH0gZWxzZSBpZiAoZmlsbFN0eWxlLmZpbGwgaW5zdGFuY2VvZiBGaWxsR3JhZGllbnQpIHtcbiAgICBjb25zdCBmaWxsR3JhZGllbnQgPSBmaWxsU3R5bGUuZmlsbDtcbiAgICBpZiAoZmlsbEdyYWRpZW50LnR5cGUgPT09IFwibGluZWFyXCIpIHtcbiAgICAgIGNvbnN0IGdyYWRpZW50ID0gY29udGV4dC5jcmVhdGVMaW5lYXJHcmFkaWVudChcbiAgICAgICAgZmlsbEdyYWRpZW50LngwLFxuICAgICAgICBmaWxsR3JhZGllbnQueTAsXG4gICAgICAgIGZpbGxHcmFkaWVudC54MSxcbiAgICAgICAgZmlsbEdyYWRpZW50LnkxXG4gICAgICApO1xuICAgICAgZmlsbEdyYWRpZW50LmdyYWRpZW50U3RvcHMuZm9yRWFjaCgoc3RvcCkgPT4ge1xuICAgICAgICBncmFkaWVudC5hZGRDb2xvclN0b3Aoc3RvcC5vZmZzZXQsIENvbG9yLnNoYXJlZC5zZXRWYWx1ZShzdG9wLmNvbG9yKS50b0hleCgpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGdyYWRpZW50O1xuICAgIH1cbiAgfVxuICB3YXJuKFwiRmlsbFN0eWxlIG5vdCByZWNvZ25pc2VkXCIsIGZpbGxTdHlsZSk7XG4gIHJldHVybiBcInJlZFwiO1xufVxuXG5leHBvcnQgeyBnZXRDYW52YXNGaWxsU3R5bGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldENhbnZhc0ZpbGxTdHlsZS5tanMubWFwXG4iLCJpbXBvcnQgeyBFeHRlbnNpb25UeXBlIH0gZnJvbSAnLi4vLi4vLi4vZXh0ZW5zaW9ucy9FeHRlbnNpb25zLm1qcyc7XG5pbXBvcnQgeyB1cGRhdGVRdWFkQm91bmRzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZGF0YS91cGRhdGVRdWFkQm91bmRzLm1qcyc7XG5pbXBvcnQgeyBCaWdQb29sIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvcG9vbC9Qb29sR3JvdXAubWpzJztcbmltcG9ydCB7IEJhdGNoYWJsZVNwcml0ZSB9IGZyb20gJy4uLy4uL3Nwcml0ZS9CYXRjaGFibGVTcHJpdGUubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5jbGFzcyBDYW52YXNUZXh0UGlwZSB7XG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyKSB7XG4gICAgdGhpcy5fZ3B1VGV4dCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQm91bmQgPSB0aGlzLmRlc3Ryb3lSZW5kZXJhYmxlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB0aGlzLl9yZW5kZXJlci5ydW5uZXJzLnJlc29sdXRpb25DaGFuZ2UuYWRkKHRoaXMpO1xuICAgIHRoaXMuX3JlbmRlcmVyLnJlbmRlcmFibGVHQy5hZGRNYW5hZ2VkSGFzaCh0aGlzLCBcIl9ncHVUZXh0XCIpO1xuICB9XG4gIHJlc29sdXRpb25DaGFuZ2UoKSB7XG4gICAgZm9yIChjb25zdCBpIGluIHRoaXMuX2dwdVRleHQpIHtcbiAgICAgIGNvbnN0IGdwdVRleHQgPSB0aGlzLl9ncHVUZXh0W2ldO1xuICAgICAgaWYgKCFncHVUZXh0KVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGNvbnN0IHRleHQgPSBncHVUZXh0LmJhdGNoYWJsZVNwcml0ZS5yZW5kZXJhYmxlO1xuICAgICAgaWYgKHRleHQuX2F1dG9SZXNvbHV0aW9uKSB7XG4gICAgICAgIHRleHQuX3Jlc29sdXRpb24gPSB0aGlzLl9yZW5kZXJlci5yZXNvbHV0aW9uO1xuICAgICAgICB0ZXh0Lm9uVmlld1VwZGF0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB2YWxpZGF0ZVJlbmRlcmFibGUodGV4dCkge1xuICAgIGNvbnN0IGdwdVRleHQgPSB0aGlzLl9nZXRHcHVUZXh0KHRleHQpO1xuICAgIGNvbnN0IG5ld0tleSA9IHRleHQuX2dldEtleSgpO1xuICAgIGlmIChncHVUZXh0LmN1cnJlbnRLZXkgIT09IG5ld0tleSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBhZGRSZW5kZXJhYmxlKHRleHQsIGluc3RydWN0aW9uU2V0KSB7XG4gICAgY29uc3QgZ3B1VGV4dCA9IHRoaXMuX2dldEdwdVRleHQodGV4dCk7XG4gICAgY29uc3QgYmF0Y2hhYmxlU3ByaXRlID0gZ3B1VGV4dC5iYXRjaGFibGVTcHJpdGU7XG4gICAgaWYgKHRleHQuX2RpZFRleHRVcGRhdGUpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZVRleHQodGV4dCk7XG4gICAgfVxuICAgIHRoaXMuX3JlbmRlcmVyLnJlbmRlclBpcGVzLmJhdGNoLmFkZFRvQmF0Y2goYmF0Y2hhYmxlU3ByaXRlLCBpbnN0cnVjdGlvblNldCk7XG4gIH1cbiAgdXBkYXRlUmVuZGVyYWJsZSh0ZXh0KSB7XG4gICAgY29uc3QgZ3B1VGV4dCA9IHRoaXMuX2dldEdwdVRleHQodGV4dCk7XG4gICAgY29uc3QgYmF0Y2hhYmxlU3ByaXRlID0gZ3B1VGV4dC5iYXRjaGFibGVTcHJpdGU7XG4gICAgaWYgKHRleHQuX2RpZFRleHRVcGRhdGUpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZVRleHQodGV4dCk7XG4gICAgfVxuICAgIGJhdGNoYWJsZVNwcml0ZS5fYmF0Y2hlci51cGRhdGVFbGVtZW50KGJhdGNoYWJsZVNwcml0ZSk7XG4gIH1cbiAgZGVzdHJveVJlbmRlcmFibGUodGV4dCkge1xuICAgIHRleHQub2ZmKFwiZGVzdHJveWVkXCIsIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQm91bmQpO1xuICAgIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQnlJZCh0ZXh0LnVpZCk7XG4gIH1cbiAgX2Rlc3Ryb3lSZW5kZXJhYmxlQnlJZCh0ZXh0VWlkKSB7XG4gICAgY29uc3QgZ3B1VGV4dCA9IHRoaXMuX2dwdVRleHRbdGV4dFVpZF07XG4gICAgdGhpcy5fcmVuZGVyZXIuY2FudmFzVGV4dC5kZWNyZWFzZVJlZmVyZW5jZUNvdW50KGdwdVRleHQuY3VycmVudEtleSk7XG4gICAgQmlnUG9vbC5yZXR1cm4oZ3B1VGV4dC5iYXRjaGFibGVTcHJpdGUpO1xuICAgIHRoaXMuX2dwdVRleHRbdGV4dFVpZF0gPSBudWxsO1xuICB9XG4gIF91cGRhdGVUZXh0KHRleHQpIHtcbiAgICBjb25zdCBuZXdLZXkgPSB0ZXh0Ll9nZXRLZXkoKTtcbiAgICBjb25zdCBncHVUZXh0ID0gdGhpcy5fZ2V0R3B1VGV4dCh0ZXh0KTtcbiAgICBjb25zdCBiYXRjaGFibGVTcHJpdGUgPSBncHVUZXh0LmJhdGNoYWJsZVNwcml0ZTtcbiAgICBpZiAoZ3B1VGV4dC5jdXJyZW50S2V5ICE9PSBuZXdLZXkpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZUdwdVRleHQodGV4dCk7XG4gICAgfVxuICAgIHRleHQuX2RpZFRleHRVcGRhdGUgPSBmYWxzZTtcbiAgICBjb25zdCBwYWRkaW5nID0gdGV4dC5fc3R5bGUucGFkZGluZztcbiAgICB1cGRhdGVRdWFkQm91bmRzKGJhdGNoYWJsZVNwcml0ZS5ib3VuZHMsIHRleHQuX2FuY2hvciwgYmF0Y2hhYmxlU3ByaXRlLnRleHR1cmUsIHBhZGRpbmcpO1xuICB9XG4gIF91cGRhdGVHcHVUZXh0KHRleHQpIHtcbiAgICBjb25zdCBncHVUZXh0ID0gdGhpcy5fZ2V0R3B1VGV4dCh0ZXh0KTtcbiAgICBjb25zdCBiYXRjaGFibGVTcHJpdGUgPSBncHVUZXh0LmJhdGNoYWJsZVNwcml0ZTtcbiAgICBpZiAoZ3B1VGV4dC50ZXh0dXJlKSB7XG4gICAgICB0aGlzLl9yZW5kZXJlci5jYW52YXNUZXh0LmRlY3JlYXNlUmVmZXJlbmNlQ291bnQoZ3B1VGV4dC5jdXJyZW50S2V5KTtcbiAgICB9XG4gICAgZ3B1VGV4dC50ZXh0dXJlID0gYmF0Y2hhYmxlU3ByaXRlLnRleHR1cmUgPSB0aGlzLl9yZW5kZXJlci5jYW52YXNUZXh0LmdldE1hbmFnZWRUZXh0dXJlKHRleHQpO1xuICAgIGdwdVRleHQuY3VycmVudEtleSA9IHRleHQuX2dldEtleSgpO1xuICAgIGJhdGNoYWJsZVNwcml0ZS50ZXh0dXJlID0gZ3B1VGV4dC50ZXh0dXJlO1xuICB9XG4gIF9nZXRHcHVUZXh0KHRleHQpIHtcbiAgICByZXR1cm4gdGhpcy5fZ3B1VGV4dFt0ZXh0LnVpZF0gfHwgdGhpcy5pbml0R3B1VGV4dCh0ZXh0KTtcbiAgfVxuICBpbml0R3B1VGV4dCh0ZXh0KSB7XG4gICAgY29uc3QgZ3B1VGV4dERhdGEgPSB7XG4gICAgICB0ZXh0dXJlOiBudWxsLFxuICAgICAgY3VycmVudEtleTogXCItLVwiLFxuICAgICAgYmF0Y2hhYmxlU3ByaXRlOiBCaWdQb29sLmdldChCYXRjaGFibGVTcHJpdGUpXG4gICAgfTtcbiAgICBncHVUZXh0RGF0YS5iYXRjaGFibGVTcHJpdGUucmVuZGVyYWJsZSA9IHRleHQ7XG4gICAgZ3B1VGV4dERhdGEuYmF0Y2hhYmxlU3ByaXRlLnRyYW5zZm9ybSA9IHRleHQuZ3JvdXBUcmFuc2Zvcm07XG4gICAgZ3B1VGV4dERhdGEuYmF0Y2hhYmxlU3ByaXRlLmJvdW5kcyA9IHsgbWluWDogMCwgbWF4WDogMSwgbWluWTogMCwgbWF4WTogMCB9O1xuICAgIGdwdVRleHREYXRhLmJhdGNoYWJsZVNwcml0ZS5yb3VuZFBpeGVscyA9IHRoaXMuX3JlbmRlcmVyLl9yb3VuZFBpeGVscyB8IHRleHQuX3JvdW5kUGl4ZWxzO1xuICAgIHRoaXMuX2dwdVRleHRbdGV4dC51aWRdID0gZ3B1VGV4dERhdGE7XG4gICAgdGV4dC5fcmVzb2x1dGlvbiA9IHRleHQuX2F1dG9SZXNvbHV0aW9uID8gdGhpcy5fcmVuZGVyZXIucmVzb2x1dGlvbiA6IHRleHQucmVzb2x1dGlvbjtcbiAgICB0aGlzLl91cGRhdGVUZXh0KHRleHQpO1xuICAgIHRleHQub24oXCJkZXN0cm95ZWRcIiwgdGhpcy5fZGVzdHJveVJlbmRlcmFibGVCb3VuZCk7XG4gICAgcmV0dXJuIGdwdVRleHREYXRhO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgZm9yIChjb25zdCBpIGluIHRoaXMuX2dwdVRleHQpIHtcbiAgICAgIHRoaXMuX2Rlc3Ryb3lSZW5kZXJhYmxlQnlJZChpKTtcbiAgICB9XG4gICAgdGhpcy5fZ3B1VGV4dCA9IG51bGw7XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xuICB9XG59XG4vKiogQGlnbm9yZSAqL1xuQ2FudmFzVGV4dFBpcGUuZXh0ZW5zaW9uID0ge1xuICB0eXBlOiBbXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHTFBpcGVzLFxuICAgIEV4dGVuc2lvblR5cGUuV2ViR1BVUGlwZXMsXG4gICAgRXh0ZW5zaW9uVHlwZS5DYW52YXNQaXBlc1xuICBdLFxuICBuYW1lOiBcInRleHRcIlxufTtcblxuZXhwb3J0IHsgQ2FudmFzVGV4dFBpcGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNhbnZhc1RleHRQaXBlLm1qcy5tYXBcbiIsImltcG9ydCB7IFJlY3RhbmdsZSB9IGZyb20gJy4uLy4uL21hdGhzL3NoYXBlcy9SZWN0YW5nbGUubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBjaGVja1JvdyhkYXRhLCB3aWR0aCwgeSkge1xuICBmb3IgKGxldCB4ID0gMCwgaW5kZXggPSA0ICogeSAqIHdpZHRoOyB4IDwgd2lkdGg7ICsreCwgaW5kZXggKz0gNCkge1xuICAgIGlmIChkYXRhW2luZGV4ICsgM10gIT09IDApXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBjaGVja0NvbHVtbihkYXRhLCB3aWR0aCwgeCwgdG9wLCBib3R0b20pIHtcbiAgY29uc3Qgc3RyaWRlID0gNCAqIHdpZHRoO1xuICBmb3IgKGxldCB5ID0gdG9wLCBpbmRleCA9IHRvcCAqIHN0cmlkZSArIDQgKiB4OyB5IDw9IGJvdHRvbTsgKyt5LCBpbmRleCArPSBzdHJpZGUpIHtcbiAgICBpZiAoZGF0YVtpbmRleCArIDNdICE9PSAwKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gZ2V0Q2FudmFzQm91bmRpbmdCb3goY2FudmFzLCByZXNvbHV0aW9uID0gMSkge1xuICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IGNhbnZhcztcbiAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIiwge1xuICAgIHdpbGxSZWFkRnJlcXVlbnRseTogdHJ1ZVxuICB9KTtcbiAgaWYgKGNvbnRleHQgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGdldCBjYW52YXMgMkQgY29udGV4dFwiKTtcbiAgfVxuICBjb25zdCBpbWFnZURhdGEgPSBjb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgY29uc3QgZGF0YSA9IGltYWdlRGF0YS5kYXRhO1xuICBsZXQgbGVmdCA9IDA7XG4gIGxldCB0b3AgPSAwO1xuICBsZXQgcmlnaHQgPSB3aWR0aCAtIDE7XG4gIGxldCBib3R0b20gPSBoZWlnaHQgLSAxO1xuICB3aGlsZSAodG9wIDwgaGVpZ2h0ICYmIGNoZWNrUm93KGRhdGEsIHdpZHRoLCB0b3ApKVxuICAgICsrdG9wO1xuICBpZiAodG9wID09PSBoZWlnaHQpXG4gICAgcmV0dXJuIFJlY3RhbmdsZS5FTVBUWTtcbiAgd2hpbGUgKGNoZWNrUm93KGRhdGEsIHdpZHRoLCBib3R0b20pKVxuICAgIC0tYm90dG9tO1xuICB3aGlsZSAoY2hlY2tDb2x1bW4oZGF0YSwgd2lkdGgsIGxlZnQsIHRvcCwgYm90dG9tKSlcbiAgICArK2xlZnQ7XG4gIHdoaWxlIChjaGVja0NvbHVtbihkYXRhLCB3aWR0aCwgcmlnaHQsIHRvcCwgYm90dG9tKSlcbiAgICAtLXJpZ2h0O1xuICArK3JpZ2h0O1xuICArK2JvdHRvbTtcbiAgcmV0dXJuIG5ldyBSZWN0YW5nbGUobGVmdCAvIHJlc29sdXRpb24sIHRvcCAvIHJlc29sdXRpb24sIChyaWdodCAtIGxlZnQpIC8gcmVzb2x1dGlvbiwgKGJvdHRvbSAtIHRvcCkgLyByZXNvbHV0aW9uKTtcbn1cblxuZXhwb3J0IHsgZ2V0Q2FudmFzQm91bmRpbmdCb3ggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldENhbnZhc0JvdW5kaW5nQm94Lm1qcy5tYXBcbiIsImltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vLi4vLi4vY29sb3IvQ29sb3IubWpzJztcbmltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tICcuLi8uLi8uLi9leHRlbnNpb25zL0V4dGVuc2lvbnMubWpzJztcbmltcG9ydCB7IG5leHRQb3cyIH0gZnJvbSAnLi4vLi4vLi4vbWF0aHMvbWlzYy9wb3cyLm1qcyc7XG5pbXBvcnQgeyBDYW52YXNQb29sIH0gZnJvbSAnLi4vLi4vLi4vcmVuZGVyaW5nL3JlbmRlcmVycy9zaGFyZWQvdGV4dHVyZS9DYW52YXNQb29sLm1qcyc7XG5pbXBvcnQgeyBUZXh0dXJlUG9vbCB9IGZyb20gJy4uLy4uLy4uL3JlbmRlcmluZy9yZW5kZXJlcnMvc2hhcmVkL3RleHR1cmUvVGV4dHVyZVBvb2wubWpzJztcbmltcG9ydCB7IGdldENhbnZhc0JvdW5kaW5nQm94IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvY2FudmFzL2dldENhbnZhc0JvdW5kaW5nQm94Lm1qcyc7XG5pbXBvcnQgeyBkZXByZWNhdGlvbiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2xvZ2dpbmcvZGVwcmVjYXRpb24ubWpzJztcbmltcG9ydCB7IFRleHRTdHlsZSB9IGZyb20gJy4uL1RleHRTdHlsZS5tanMnO1xuaW1wb3J0IHsgZ2V0UG8yVGV4dHVyZUZyb21Tb3VyY2UgfSBmcm9tICcuLi91dGlscy9nZXRQbzJUZXh0dXJlRnJvbVNvdXJjZS5tanMnO1xuaW1wb3J0IHsgQ2FudmFzVGV4dE1ldHJpY3MgfSBmcm9tICcuL0NhbnZhc1RleHRNZXRyaWNzLm1qcyc7XG5pbXBvcnQgeyBmb250U3RyaW5nRnJvbVRleHRTdHlsZSB9IGZyb20gJy4vdXRpbHMvZm9udFN0cmluZ0Zyb21UZXh0U3R5bGUubWpzJztcbmltcG9ydCB7IGdldENhbnZhc0ZpbGxTdHlsZSB9IGZyb20gJy4vdXRpbHMvZ2V0Q2FudmFzRmlsbFN0eWxlLm1qcyc7XG5cblwidXNlIHN0cmljdFwiO1xuY2xhc3MgQ2FudmFzVGV4dFN5c3RlbSB7XG4gIGNvbnN0cnVjdG9yKF9yZW5kZXJlcikge1xuICAgIHRoaXMuX2FjdGl2ZVRleHR1cmVzID0ge307XG4gICAgdGhpcy5fcmVuZGVyZXIgPSBfcmVuZGVyZXI7XG4gIH1cbiAgZ2V0VGV4dHVyZVNpemUodGV4dCwgcmVzb2x1dGlvbiwgc3R5bGUpIHtcbiAgICBjb25zdCBtZWFzdXJlZCA9IENhbnZhc1RleHRNZXRyaWNzLm1lYXN1cmVUZXh0KHRleHQgfHwgXCIgXCIsIHN0eWxlKTtcbiAgICBsZXQgd2lkdGggPSBNYXRoLmNlaWwoTWF0aC5jZWlsKE1hdGgubWF4KDEsIG1lYXN1cmVkLndpZHRoKSArIHN0eWxlLnBhZGRpbmcgKiAyKSAqIHJlc29sdXRpb24pO1xuICAgIGxldCBoZWlnaHQgPSBNYXRoLmNlaWwoTWF0aC5jZWlsKE1hdGgubWF4KDEsIG1lYXN1cmVkLmhlaWdodCkgKyBzdHlsZS5wYWRkaW5nICogMikgKiByZXNvbHV0aW9uKTtcbiAgICB3aWR0aCA9IE1hdGguY2VpbCh3aWR0aCAtIDFlLTYpO1xuICAgIGhlaWdodCA9IE1hdGguY2VpbChoZWlnaHQgLSAxZS02KTtcbiAgICB3aWR0aCA9IG5leHRQb3cyKHdpZHRoKTtcbiAgICBoZWlnaHQgPSBuZXh0UG93MihoZWlnaHQpO1xuICAgIHJldHVybiB7IHdpZHRoLCBoZWlnaHQgfTtcbiAgfVxuICBnZXRUZXh0dXJlKG9wdGlvbnMsIHJlc29sdXRpb24sIHN0eWxlLCBfdGV4dEtleSkge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgZGVwcmVjYXRpb24oXCI4LjAuMFwiLCBcIkNhbnZhc1RleHRTeXN0ZW0uZ2V0VGV4dHVyZTogVXNlIG9iamVjdCBUZXh0T3B0aW9ucyBpbnN0ZWFkIG9mIHNlcGFyYXRlIGFyZ3VtZW50c1wiKTtcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIHRleHQ6IG9wdGlvbnMsXG4gICAgICAgIHN0eWxlLFxuICAgICAgICByZXNvbHV0aW9uXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoIShvcHRpb25zLnN0eWxlIGluc3RhbmNlb2YgVGV4dFN0eWxlKSkge1xuICAgICAgb3B0aW9ucy5zdHlsZSA9IG5ldyBUZXh0U3R5bGUob3B0aW9ucy5zdHlsZSk7XG4gICAgfVxuICAgIGNvbnN0IHsgdGV4dHVyZSwgY2FudmFzQW5kQ29udGV4dCB9ID0gdGhpcy5jcmVhdGVUZXh0dXJlQW5kQ2FudmFzKFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gICAgdGhpcy5fcmVuZGVyZXIudGV4dHVyZS5pbml0U291cmNlKHRleHR1cmUuX3NvdXJjZSk7XG4gICAgQ2FudmFzUG9vbC5yZXR1cm5DYW52YXNBbmRDb250ZXh0KGNhbnZhc0FuZENvbnRleHQpO1xuICAgIHJldHVybiB0ZXh0dXJlO1xuICB9XG4gIGNyZWF0ZVRleHR1cmVBbmRDYW52YXMob3B0aW9ucykge1xuICAgIGNvbnN0IHsgdGV4dCwgc3R5bGUgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgcmVzb2x1dGlvbiA9IG9wdGlvbnMucmVzb2x1dGlvbiA/PyB0aGlzLl9yZW5kZXJlci5yZXNvbHV0aW9uO1xuICAgIGNvbnN0IG1lYXN1cmVkID0gQ2FudmFzVGV4dE1ldHJpY3MubWVhc3VyZVRleHQodGV4dCB8fCBcIiBcIiwgc3R5bGUpO1xuICAgIGNvbnN0IHdpZHRoID0gTWF0aC5jZWlsKE1hdGguY2VpbChNYXRoLm1heCgxLCBtZWFzdXJlZC53aWR0aCkgKyBzdHlsZS5wYWRkaW5nICogMikgKiByZXNvbHV0aW9uKTtcbiAgICBjb25zdCBoZWlnaHQgPSBNYXRoLmNlaWwoTWF0aC5jZWlsKE1hdGgubWF4KDEsIG1lYXN1cmVkLmhlaWdodCkgKyBzdHlsZS5wYWRkaW5nICogMikgKiByZXNvbHV0aW9uKTtcbiAgICBjb25zdCBjYW52YXNBbmRDb250ZXh0ID0gQ2FudmFzUG9vbC5nZXRPcHRpbWFsQ2FudmFzQW5kQ29udGV4dCh3aWR0aCwgaGVpZ2h0KTtcbiAgICBjb25zdCB7IGNhbnZhcyB9ID0gY2FudmFzQW5kQ29udGV4dDtcbiAgICB0aGlzLnJlbmRlclRleHRUb0NhbnZhcyh0ZXh0LCBzdHlsZSwgcmVzb2x1dGlvbiwgY2FudmFzQW5kQ29udGV4dCk7XG4gICAgY29uc3QgdGV4dHVyZSA9IGdldFBvMlRleHR1cmVGcm9tU291cmNlKGNhbnZhcywgd2lkdGgsIGhlaWdodCwgcmVzb2x1dGlvbik7XG4gICAgaWYgKHN0eWxlLnRyaW0pIHtcbiAgICAgIGNvbnN0IHRyaW1tZWQgPSBnZXRDYW52YXNCb3VuZGluZ0JveChjYW52YXMsIHJlc29sdXRpb24pO1xuICAgICAgdGV4dHVyZS5mcmFtZS5jb3B5RnJvbSh0cmltbWVkKTtcbiAgICAgIHRleHR1cmUudXBkYXRlVXZzKCk7XG4gICAgfVxuICAgIHJldHVybiB7IHRleHR1cmUsIGNhbnZhc0FuZENvbnRleHQgfTtcbiAgfVxuICBnZXRNYW5hZ2VkVGV4dHVyZSh0ZXh0KSB7XG4gICAgdGV4dC5fcmVzb2x1dGlvbiA9IHRleHQuX2F1dG9SZXNvbHV0aW9uID8gdGhpcy5fcmVuZGVyZXIucmVzb2x1dGlvbiA6IHRleHQucmVzb2x1dGlvbjtcbiAgICBjb25zdCB0ZXh0S2V5ID0gdGV4dC5fZ2V0S2V5KCk7XG4gICAgaWYgKHRoaXMuX2FjdGl2ZVRleHR1cmVzW3RleHRLZXldKSB7XG4gICAgICB0aGlzLl9pbmNyZWFzZVJlZmVyZW5jZUNvdW50KHRleHRLZXkpO1xuICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVRleHR1cmVzW3RleHRLZXldLnRleHR1cmU7XG4gICAgfVxuICAgIGNvbnN0IHsgdGV4dHVyZSwgY2FudmFzQW5kQ29udGV4dCB9ID0gdGhpcy5jcmVhdGVUZXh0dXJlQW5kQ2FudmFzKHRleHQpO1xuICAgIHRoaXMuX2FjdGl2ZVRleHR1cmVzW3RleHRLZXldID0ge1xuICAgICAgY2FudmFzQW5kQ29udGV4dCxcbiAgICAgIHRleHR1cmUsXG4gICAgICB1c2FnZUNvdW50OiAxXG4gICAgfTtcbiAgICByZXR1cm4gdGV4dHVyZTtcbiAgfVxuICBfaW5jcmVhc2VSZWZlcmVuY2VDb3VudCh0ZXh0S2V5KSB7XG4gICAgdGhpcy5fYWN0aXZlVGV4dHVyZXNbdGV4dEtleV0udXNhZ2VDb3VudCsrO1xuICB9XG4gIGRlY3JlYXNlUmVmZXJlbmNlQ291bnQodGV4dEtleSkge1xuICAgIGNvbnN0IGFjdGl2ZVRleHR1cmUgPSB0aGlzLl9hY3RpdmVUZXh0dXJlc1t0ZXh0S2V5XTtcbiAgICBhY3RpdmVUZXh0dXJlLnVzYWdlQ291bnQtLTtcbiAgICBpZiAoYWN0aXZlVGV4dHVyZS51c2FnZUNvdW50ID09PSAwKSB7XG4gICAgICBDYW52YXNQb29sLnJldHVybkNhbnZhc0FuZENvbnRleHQoYWN0aXZlVGV4dHVyZS5jYW52YXNBbmRDb250ZXh0KTtcbiAgICAgIFRleHR1cmVQb29sLnJldHVyblRleHR1cmUoYWN0aXZlVGV4dHVyZS50ZXh0dXJlKTtcbiAgICAgIGNvbnN0IHNvdXJjZSA9IGFjdGl2ZVRleHR1cmUudGV4dHVyZS5zb3VyY2U7XG4gICAgICBzb3VyY2UucmVzb3VyY2UgPSBudWxsO1xuICAgICAgc291cmNlLnVwbG9hZE1ldGhvZElkID0gXCJ1bmtub3duXCI7XG4gICAgICBzb3VyY2UuYWxwaGFNb2RlID0gXCJuby1wcmVtdWx0aXBseS1hbHBoYVwiO1xuICAgICAgdGhpcy5fYWN0aXZlVGV4dHVyZXNbdGV4dEtleV0gPSBudWxsO1xuICAgIH1cbiAgfVxuICBnZXRSZWZlcmVuY2VDb3VudCh0ZXh0S2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZVRleHR1cmVzW3RleHRLZXldLnVzYWdlQ291bnQ7XG4gIH1cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGV4dCB0byBpdHMgY2FudmFzLCBhbmQgdXBkYXRlcyBpdHMgdGV4dHVyZS5cbiAgICpcbiAgICogQnkgZGVmYXVsdCB0aGlzIGlzIHVzZWQgaW50ZXJuYWxseSB0byBlbnN1cmUgdGhlIHRleHR1cmUgaXMgY29ycmVjdCBiZWZvcmUgcmVuZGVyaW5nLFxuICAgKiBidXQgaXQgY2FuIGJlIHVzZWQgY2FsbGVkIGV4dGVybmFsbHksIGZvciBleGFtcGxlIGZyb20gdGhpcyBjbGFzcyB0byAncHJlLWdlbmVyYXRlJyB0aGUgdGV4dHVyZSBmcm9tIGEgcGllY2Ugb2YgdGV4dCxcbiAgICogYW5kIHRoZW4gc2hhcmVkIGFjcm9zcyBtdWx0aXBsZSBTcHJpdGVzLlxuICAgKiBAcGFyYW0gdGV4dFxuICAgKiBAcGFyYW0gc3R5bGVcbiAgICogQHBhcmFtIHJlc29sdXRpb25cbiAgICogQHBhcmFtIGNhbnZhc0FuZENvbnRleHRcbiAgICovXG4gIHJlbmRlclRleHRUb0NhbnZhcyh0ZXh0LCBzdHlsZSwgcmVzb2x1dGlvbiwgY2FudmFzQW5kQ29udGV4dCkge1xuICAgIGNvbnN0IHsgY2FudmFzLCBjb250ZXh0IH0gPSBjYW52YXNBbmRDb250ZXh0O1xuICAgIGNvbnN0IGZvbnQgPSBmb250U3RyaW5nRnJvbVRleHRTdHlsZShzdHlsZSk7XG4gICAgY29uc3QgbWVhc3VyZWQgPSBDYW52YXNUZXh0TWV0cmljcy5tZWFzdXJlVGV4dCh0ZXh0IHx8IFwiIFwiLCBzdHlsZSk7XG4gICAgY29uc3QgbGluZXMgPSBtZWFzdXJlZC5saW5lcztcbiAgICBjb25zdCBsaW5lSGVpZ2h0ID0gbWVhc3VyZWQubGluZUhlaWdodDtcbiAgICBjb25zdCBsaW5lV2lkdGhzID0gbWVhc3VyZWQubGluZVdpZHRocztcbiAgICBjb25zdCBtYXhMaW5lV2lkdGggPSBtZWFzdXJlZC5tYXhMaW5lV2lkdGg7XG4gICAgY29uc3QgZm9udFByb3BlcnRpZXMgPSBtZWFzdXJlZC5mb250UHJvcGVydGllcztcbiAgICBjb25zdCBoZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xuICAgIGNvbnRleHQucmVzZXRUcmFuc2Zvcm0oKTtcbiAgICBjb250ZXh0LnNjYWxlKHJlc29sdXRpb24sIHJlc29sdXRpb24pO1xuICAgIGNvbnRleHQudGV4dEJhc2VsaW5lID0gc3R5bGUudGV4dEJhc2VsaW5lO1xuICAgIGlmIChzdHlsZS5fc3Ryb2tlPy53aWR0aCkge1xuICAgICAgY29uc3Qgc3Ryb2tlU3R5bGUgPSBzdHlsZS5fc3Ryb2tlO1xuICAgICAgY29udGV4dC5saW5lV2lkdGggPSBzdHJva2VTdHlsZS53aWR0aDtcbiAgICAgIGNvbnRleHQubWl0ZXJMaW1pdCA9IHN0cm9rZVN0eWxlLm1pdGVyTGltaXQ7XG4gICAgICBjb250ZXh0LmxpbmVKb2luID0gc3Ryb2tlU3R5bGUuam9pbjtcbiAgICAgIGNvbnRleHQubGluZUNhcCA9IHN0cm9rZVN0eWxlLmNhcDtcbiAgICB9XG4gICAgY29udGV4dC5mb250ID0gZm9udDtcbiAgICBsZXQgbGluZVBvc2l0aW9uWDtcbiAgICBsZXQgbGluZVBvc2l0aW9uWTtcbiAgICBjb25zdCBwYXNzZXNDb3VudCA9IHN0eWxlLmRyb3BTaGFkb3cgPyAyIDogMTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhc3Nlc0NvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IGlzU2hhZG93UGFzcyA9IHN0eWxlLmRyb3BTaGFkb3cgJiYgaSA9PT0gMDtcbiAgICAgIGNvbnN0IGRzT2Zmc2V0VGV4dCA9IGlzU2hhZG93UGFzcyA/IE1hdGguY2VpbChNYXRoLm1heCgxLCBoZWlnaHQpICsgc3R5bGUucGFkZGluZyAqIDIpIDogMDtcbiAgICAgIGNvbnN0IGRzT2Zmc2V0U2hhZG93ID0gZHNPZmZzZXRUZXh0ICogcmVzb2x1dGlvbjtcbiAgICAgIGlmIChpc1NoYWRvd1Bhc3MpIHtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBcImJsYWNrXCI7XG4gICAgICAgIGNvbnN0IHNoYWRvd09wdGlvbnMgPSBzdHlsZS5kcm9wU2hhZG93O1xuICAgICAgICBjb25zdCBkcm9wU2hhZG93Q29sb3IgPSBzaGFkb3dPcHRpb25zLmNvbG9yO1xuICAgICAgICBjb25zdCBkcm9wU2hhZG93QWxwaGEgPSBzaGFkb3dPcHRpb25zLmFscGhhO1xuICAgICAgICBjb250ZXh0LnNoYWRvd0NvbG9yID0gQ29sb3Iuc2hhcmVkLnNldFZhbHVlKGRyb3BTaGFkb3dDb2xvcikuc2V0QWxwaGEoZHJvcFNoYWRvd0FscGhhKS50b1JnYmFTdHJpbmcoKTtcbiAgICAgICAgY29uc3QgZHJvcFNoYWRvd0JsdXIgPSBzaGFkb3dPcHRpb25zLmJsdXIgKiByZXNvbHV0aW9uO1xuICAgICAgICBjb25zdCBkcm9wU2hhZG93RGlzdGFuY2UgPSBzaGFkb3dPcHRpb25zLmRpc3RhbmNlICogcmVzb2x1dGlvbjtcbiAgICAgICAgY29udGV4dC5zaGFkb3dCbHVyID0gZHJvcFNoYWRvd0JsdXI7XG4gICAgICAgIGNvbnRleHQuc2hhZG93T2Zmc2V0WCA9IE1hdGguY29zKHNoYWRvd09wdGlvbnMuYW5nbGUpICogZHJvcFNoYWRvd0Rpc3RhbmNlO1xuICAgICAgICBjb250ZXh0LnNoYWRvd09mZnNldFkgPSBNYXRoLnNpbihzaGFkb3dPcHRpb25zLmFuZ2xlKSAqIGRyb3BTaGFkb3dEaXN0YW5jZSArIGRzT2Zmc2V0U2hhZG93O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBzdHlsZS5fZmlsbCA/IGdldENhbnZhc0ZpbGxTdHlsZShzdHlsZS5fZmlsbCwgY29udGV4dCkgOiBudWxsO1xuICAgICAgICBpZiAoc3R5bGUuX3N0cm9rZT8ud2lkdGgpIHtcbiAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gZ2V0Q2FudmFzRmlsbFN0eWxlKHN0eWxlLl9zdHJva2UsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuc2hhZG93Q29sb3IgPSBcImJsYWNrXCI7XG4gICAgICB9XG4gICAgICBsZXQgbGluZVBvc2l0aW9uWVNoaWZ0ID0gKGxpbmVIZWlnaHQgLSBmb250UHJvcGVydGllcy5mb250U2l6ZSkgLyAyO1xuICAgICAgaWYgKGxpbmVIZWlnaHQgLSBmb250UHJvcGVydGllcy5mb250U2l6ZSA8IDApIHtcbiAgICAgICAgbGluZVBvc2l0aW9uWVNoaWZ0ID0gMDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0cm9rZVdpZHRoID0gc3R5bGUuX3N0cm9rZT8ud2lkdGggPz8gMDtcbiAgICAgIGZvciAobGV0IGkyID0gMDsgaTIgPCBsaW5lcy5sZW5ndGg7IGkyKyspIHtcbiAgICAgICAgbGluZVBvc2l0aW9uWCA9IHN0cm9rZVdpZHRoIC8gMjtcbiAgICAgICAgbGluZVBvc2l0aW9uWSA9IHN0cm9rZVdpZHRoIC8gMiArIGkyICogbGluZUhlaWdodCArIGZvbnRQcm9wZXJ0aWVzLmFzY2VudCArIGxpbmVQb3NpdGlvbllTaGlmdDtcbiAgICAgICAgaWYgKHN0eWxlLmFsaWduID09PSBcInJpZ2h0XCIpIHtcbiAgICAgICAgICBsaW5lUG9zaXRpb25YICs9IG1heExpbmVXaWR0aCAtIGxpbmVXaWR0aHNbaTJdO1xuICAgICAgICB9IGVsc2UgaWYgKHN0eWxlLmFsaWduID09PSBcImNlbnRlclwiKSB7XG4gICAgICAgICAgbGluZVBvc2l0aW9uWCArPSAobWF4TGluZVdpZHRoIC0gbGluZVdpZHRoc1tpMl0pIC8gMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3R5bGUuX3N0cm9rZT8ud2lkdGgpIHtcbiAgICAgICAgICB0aGlzLl9kcmF3TGV0dGVyU3BhY2luZyhcbiAgICAgICAgICAgIGxpbmVzW2kyXSxcbiAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgICAgY2FudmFzQW5kQ29udGV4dCxcbiAgICAgICAgICAgIGxpbmVQb3NpdGlvblggKyBzdHlsZS5wYWRkaW5nLFxuICAgICAgICAgICAgbGluZVBvc2l0aW9uWSArIHN0eWxlLnBhZGRpbmcgLSBkc09mZnNldFRleHQsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3R5bGUuX2ZpbGwgIT09IHZvaWQgMCkge1xuICAgICAgICAgIHRoaXMuX2RyYXdMZXR0ZXJTcGFjaW5nKFxuICAgICAgICAgICAgbGluZXNbaTJdLFxuICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICBjYW52YXNBbmRDb250ZXh0LFxuICAgICAgICAgICAgbGluZVBvc2l0aW9uWCArIHN0eWxlLnBhZGRpbmcsXG4gICAgICAgICAgICBsaW5lUG9zaXRpb25ZICsgc3R5bGUucGFkZGluZyAtIGRzT2Zmc2V0VGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgdGV4dCB3aXRoIGxldHRlci1zcGFjaW5nLlxuICAgKiBAcGFyYW0gdGV4dCAtIFRoZSB0ZXh0IHRvIGRyYXdcbiAgICogQHBhcmFtIHN0eWxlXG4gICAqIEBwYXJhbSBjYW52YXNBbmRDb250ZXh0XG4gICAqIEBwYXJhbSB4IC0gSG9yaXpvbnRhbCBwb3NpdGlvbiB0byBkcmF3IHRoZSB0ZXh0XG4gICAqIEBwYXJhbSB5IC0gVmVydGljYWwgcG9zaXRpb24gdG8gZHJhdyB0aGUgdGV4dFxuICAgKiBAcGFyYW0gaXNTdHJva2UgLSBJcyB0aGlzIGRyYXdpbmcgZm9yIHRoZSBvdXRzaWRlIHN0cm9rZSBvZiB0aGVcbiAgICogIHRleHQ/IElmIG5vdCwgaXQncyBmb3IgdGhlIGluc2lkZSBmaWxsXG4gICAqL1xuICBfZHJhd0xldHRlclNwYWNpbmcodGV4dCwgc3R5bGUsIGNhbnZhc0FuZENvbnRleHQsIHgsIHksIGlzU3Ryb2tlID0gZmFsc2UpIHtcbiAgICBjb25zdCB7IGNvbnRleHQgfSA9IGNhbnZhc0FuZENvbnRleHQ7XG4gICAgY29uc3QgbGV0dGVyU3BhY2luZyA9IHN0eWxlLmxldHRlclNwYWNpbmc7XG4gICAgbGV0IHVzZUV4cGVyaW1lbnRhbExldHRlclNwYWNpbmcgPSBmYWxzZTtcbiAgICBpZiAoQ2FudmFzVGV4dE1ldHJpY3MuZXhwZXJpbWVudGFsTGV0dGVyU3BhY2luZ1N1cHBvcnRlZCkge1xuICAgICAgaWYgKENhbnZhc1RleHRNZXRyaWNzLmV4cGVyaW1lbnRhbExldHRlclNwYWNpbmcpIHtcbiAgICAgICAgY29udGV4dC5sZXR0ZXJTcGFjaW5nID0gYCR7bGV0dGVyU3BhY2luZ31weGA7XG4gICAgICAgIGNvbnRleHQudGV4dExldHRlclNwYWNpbmcgPSBgJHtsZXR0ZXJTcGFjaW5nfXB4YDtcbiAgICAgICAgdXNlRXhwZXJpbWVudGFsTGV0dGVyU3BhY2luZyA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZXh0LmxldHRlclNwYWNpbmcgPSBcIjBweFwiO1xuICAgICAgICBjb250ZXh0LnRleHRMZXR0ZXJTcGFjaW5nID0gXCIwcHhcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGxldHRlclNwYWNpbmcgPT09IDAgfHwgdXNlRXhwZXJpbWVudGFsTGV0dGVyU3BhY2luZykge1xuICAgICAgaWYgKGlzU3Ryb2tlKSB7XG4gICAgICAgIGNvbnRleHQuc3Ryb2tlVGV4dCh0ZXh0LCB4LCB5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRleHQuZmlsbFRleHQodGV4dCwgeCwgeSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBjdXJyZW50UG9zaXRpb24gPSB4O1xuICAgIGNvbnN0IHN0cmluZ0FycmF5ID0gQ2FudmFzVGV4dE1ldHJpY3MuZ3JhcGhlbWVTZWdtZW50ZXIodGV4dCk7XG4gICAgbGV0IHByZXZpb3VzV2lkdGggPSBjb250ZXh0Lm1lYXN1cmVUZXh0KHRleHQpLndpZHRoO1xuICAgIGxldCBjdXJyZW50V2lkdGggPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaW5nQXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRDaGFyID0gc3RyaW5nQXJyYXlbaV07XG4gICAgICBpZiAoaXNTdHJva2UpIHtcbiAgICAgICAgY29udGV4dC5zdHJva2VUZXh0KGN1cnJlbnRDaGFyLCBjdXJyZW50UG9zaXRpb24sIHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGV4dC5maWxsVGV4dChjdXJyZW50Q2hhciwgY3VycmVudFBvc2l0aW9uLCB5KTtcbiAgICAgIH1cbiAgICAgIGxldCB0ZXh0U3RyID0gXCJcIjtcbiAgICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IHN0cmluZ0FycmF5Lmxlbmd0aDsgKytqKSB7XG4gICAgICAgIHRleHRTdHIgKz0gc3RyaW5nQXJyYXlbal07XG4gICAgICB9XG4gICAgICBjdXJyZW50V2lkdGggPSBjb250ZXh0Lm1lYXN1cmVUZXh0KHRleHRTdHIpLndpZHRoO1xuICAgICAgY3VycmVudFBvc2l0aW9uICs9IHByZXZpb3VzV2lkdGggLSBjdXJyZW50V2lkdGggKyBsZXR0ZXJTcGFjaW5nO1xuICAgICAgcHJldmlvdXNXaWR0aCA9IGN1cnJlbnRXaWR0aDtcbiAgICB9XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9hY3RpdmVUZXh0dXJlcyA9IG51bGw7XG4gIH1cbn1cbi8qKiBAaWdub3JlICovXG5DYW52YXNUZXh0U3lzdGVtLmV4dGVuc2lvbiA9IHtcbiAgdHlwZTogW1xuICAgIEV4dGVuc2lvblR5cGUuV2ViR0xTeXN0ZW0sXG4gICAgRXh0ZW5zaW9uVHlwZS5XZWJHUFVTeXN0ZW0sXG4gICAgRXh0ZW5zaW9uVHlwZS5DYW52YXNTeXN0ZW1cbiAgXSxcbiAgbmFtZTogXCJjYW52YXNUZXh0XCJcbn07XG5cbmV4cG9ydCB7IENhbnZhc1RleHRTeXN0ZW0gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNhbnZhc1RleHRTeXN0ZW0ubWpzLm1hcFxuIiwiaW1wb3J0IHsgZXh0ZW5zaW9ucyB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbnMvRXh0ZW5zaW9ucy5tanMnO1xuaW1wb3J0IHsgQ2FudmFzVGV4dFBpcGUgfSBmcm9tICcuL2NhbnZhcy9DYW52YXNUZXh0UGlwZS5tanMnO1xuaW1wb3J0IHsgQ2FudmFzVGV4dFN5c3RlbSB9IGZyb20gJy4vY2FudmFzL0NhbnZhc1RleHRTeXN0ZW0ubWpzJztcblxuXCJ1c2Ugc3RyaWN0XCI7XG5leHRlbnNpb25zLmFkZChDYW52YXNUZXh0U3lzdGVtKTtcbmV4dGVuc2lvbnMuYWRkKENhbnZhc1RleHRQaXBlKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluaXQubWpzLm1hcFxuIiwiaW1wb3J0IHsgVGV4dHVyZVBvb2wgfSBmcm9tICcuLi8uLi8uLi9yZW5kZXJpbmcvcmVuZGVyZXJzL3NoYXJlZC90ZXh0dXJlL1RleHR1cmVQb29sLm1qcyc7XG5pbXBvcnQgeyBCb3VuZHMgfSBmcm9tICcuLi8uLi9jb250YWluZXIvYm91bmRzL0JvdW5kcy5tanMnO1xuXG5cInVzZSBzdHJpY3RcIjtcbmNvbnN0IHRlbXBCb3VuZHMgPSBuZXcgQm91bmRzKCk7XG5mdW5jdGlvbiBnZXRQbzJUZXh0dXJlRnJvbVNvdXJjZShpbWFnZSwgd2lkdGgsIGhlaWdodCwgcmVzb2x1dGlvbikge1xuICBjb25zdCBib3VuZHMgPSB0ZW1wQm91bmRzO1xuICBib3VuZHMubWluWCA9IDA7XG4gIGJvdW5kcy5taW5ZID0gMDtcbiAgYm91bmRzLm1heFggPSBpbWFnZS53aWR0aCAvIHJlc29sdXRpb24gfCAwO1xuICBib3VuZHMubWF4WSA9IGltYWdlLmhlaWdodCAvIHJlc29sdXRpb24gfCAwO1xuICBjb25zdCB0ZXh0dXJlID0gVGV4dHVyZVBvb2wuZ2V0T3B0aW1hbFRleHR1cmUoXG4gICAgYm91bmRzLndpZHRoLFxuICAgIGJvdW5kcy5oZWlnaHQsXG4gICAgcmVzb2x1dGlvbixcbiAgICBmYWxzZVxuICApO1xuICB0ZXh0dXJlLnNvdXJjZS51cGxvYWRNZXRob2RJZCA9IFwiaW1hZ2VcIjtcbiAgdGV4dHVyZS5zb3VyY2UucmVzb3VyY2UgPSBpbWFnZTtcbiAgdGV4dHVyZS5zb3VyY2UuYWxwaGFNb2RlID0gXCJwcmVtdWx0aXBseS1hbHBoYS1vbi11cGxvYWRcIjtcbiAgdGV4dHVyZS5mcmFtZS53aWR0aCA9IHdpZHRoIC8gcmVzb2x1dGlvbjtcbiAgdGV4dHVyZS5mcmFtZS5oZWlnaHQgPSBoZWlnaHQgLyByZXNvbHV0aW9uO1xuICB0ZXh0dXJlLnNvdXJjZS5lbWl0KFwidXBkYXRlXCIsIHRleHR1cmUuc291cmNlKTtcbiAgdGV4dHVyZS51cGRhdGVVdnMoKTtcbiAgcmV0dXJuIHRleHR1cmU7XG59XG5cbmV4cG9ydCB7IGdldFBvMlRleHR1cmVGcm9tU291cmNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRQbzJUZXh0dXJlRnJvbVNvdXJjZS5tanMubWFwXG4iXSwibmFtZXMiOlsiUmVzaXplUGx1Z2luIiwiaW5pdCIsIm9wdGlvbnMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInRoaXMiLCJzZXQiLCJkb20iLCJnbG9iYWxUaGlzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInF1ZXVlUmVzaXplIiwiX3Jlc2l6ZVRvIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlc2l6ZSIsImdldCIsIl9jYW5jZWxSZXNpemUiLCJfcmVzaXplSWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIndpZHRoIiwiaGVpZ2h0Iiwid2luZG93IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJyZW5kZXJlciIsInJlbmRlciIsInJlc2l6ZVRvIiwiZGVzdHJveSIsImV4dGVuc2lvbiIsIkFwcGxpY2F0aW9uIiwiVGlja2VyUGx1Z2luIiwiYXNzaWduIiwiYXV0b1N0YXJ0Iiwic2hhcmVkVGlja2VyIiwidGlja2VyIiwiX3RpY2tlciIsInJlbW92ZSIsImFkZCIsIkxPVyIsInN0b3AiLCJzdGFydCIsIlRpY2tlciIsInNoYXJlZCIsIm9sZFRpY2tlciIsIkZpbHRlclBpcGUiLCJjb25zdHJ1Y3RvciIsIl9yZW5kZXJlciIsInB1c2giLCJmaWx0ZXJFZmZlY3QiLCJjb250YWluZXIiLCJpbnN0cnVjdGlvblNldCIsInJlbmRlclBpcGVzIiwiYmF0Y2giLCJicmVhayIsInJlbmRlclBpcGVJZCIsImNhbkJ1bmRsZSIsImFjdGlvbiIsInBvcCIsIl9maWx0ZXJFZmZlY3QiLCJfY29udGFpbmVyIiwiZXhlY3V0ZSIsImluc3RydWN0aW9uIiwiZmlsdGVyIiwidHlwZSIsIldlYkdMUGlwZXMiLCJXZWJHUFVQaXBlcyIsIkNhbnZhc1BpcGVzIiwibmFtZSIsInRlbXBNYXRyaXgiLCJNYXRyaXgiLCJnZXRGYXN0R2xvYmFsQm91bmRzIiwidGFyZ2V0IiwiYm91bmRzIiwiY2xlYXIiLCJfZ2V0R2xvYmFsQm91bmRzUmVjdXJzaXZlIiwiaXNWYWxpZCIsInJlbmRlckdyb3VwIiwiYXBwbHlNYXRyaXgiLCJsb2NhbFRyYW5zZm9ybSIsInBhcmVudFJlbmRlckdyb3VwIiwid29ybGRUcmFuc2Zvcm0iLCJsb2NhbERpc3BsYXlTdGF0dXMiLCJtZWFzdXJhYmxlIiwibWFuYWdlRWZmZWN0cyIsImVmZmVjdHMiLCJsZW5ndGgiLCJsb2NhbEJvdW5kcyIsImJvdW5kc0FyZWEiLCJhZGRSZWN0Iiwidmlld0JvdW5kcyIsImFkZEZyYW1lIiwibWluWCIsIm1pblkiLCJtYXhYIiwibWF4WSIsImdyb3VwVHJhbnNmb3JtIiwiY2hpbGRyZW4iLCJpIiwiYWR2YW5jZWQiLCJhZGRCb3VuZHMiLCJjb3B5VG8iLCJpbnZlcnQiLCJyZWxhdGl2ZUdyb3VwVHJhbnNmb3JtIiwicmV0dXJuIiwicXVhZEdlb21ldHJ5IiwiR2VvbWV0cnkiLCJhdHRyaWJ1dGVzIiwiYVBvc2l0aW9uIiwiYnVmZmVyIiwiRmxvYXQzMkFycmF5IiwiZm9ybWF0Iiwic3RyaWRlIiwib2Zmc2V0IiwiaW5kZXhCdWZmZXIiLCJVaW50MzJBcnJheSIsIkZpbHRlclN5c3RlbSIsIl9maWx0ZXJTdGFja0luZGV4IiwiX2ZpbHRlclN0YWNrIiwiX2ZpbHRlckdsb2JhbFVuaWZvcm1zIiwiVW5pZm9ybUdyb3VwIiwidUlucHV0U2l6ZSIsInZhbHVlIiwidUlucHV0UGl4ZWwiLCJ1SW5wdXRDbGFtcCIsInVPdXRwdXRGcmFtZSIsInVHbG9iYWxGcmFtZSIsInVPdXRwdXRUZXh0dXJlIiwiX2dsb2JhbEZpbHRlckJpbmRHcm91cCIsIkJpbmRHcm91cCIsImFjdGl2ZUJhY2tUZXh0dXJlIiwiX2FjdGl2ZUZpbHRlckRhdGEiLCJiYWNrVGV4dHVyZSIsImZpbHRlcnMiLCJfZ2V0RmlsdGVyRGF0YSIsImZpbHRlckRhdGEiLCJza2lwIiwicmVuZGVyYWJsZXMiLCJtYXRyaXgiLCJyZW5kZXJhYmxlIiwiZ2xvYmFsRGlzcGxheVN0YXR1cyIsImdldEdsb2JhbFJlbmRlcmFibGVCb3VuZHMiLCJmaWx0ZXJBcmVhIiwiY29sb3JUZXh0dXJlU291cmNlIiwicmVuZGVyVGFyZ2V0IiwiY29sb3JUZXh0dXJlIiwic291cmNlIiwicmVzb2x1dGlvbiIsIkluZmluaXR5IiwicGFkZGluZyIsImFudGlhbGlhcyIsImJsZW5kUmVxdWlyZWQiLCJlbmFibGVkIiwiY2xpcFRvVmlld3BvcnQiLCJNYXRoIiwibWluIiwiX3Jlc29sdXRpb24iLCJjb21wYXRpYmxlUmVuZGVyZXJzIiwiYmFja0J1ZmZlciIsInVzZUJhY2tCdWZmZXIiLCJ3YXJuIiwic2NhbGUiLCJ2aWV3UG9ydCIsInJvb3RWaWV3UG9ydCIsImZpdEJvdW5kcyIsImNlaWwiLCJwYWQiLCJpc1Bvc2l0aXZlIiwicHJldmlvdXNSZW5kZXJTdXJmYWNlIiwicmVuZGVyU3VyZmFjZSIsImlucHV0VGV4dHVyZSIsIlRleHR1cmVQb29sIiwiZ2V0T3B0aW1hbFRleHR1cmUiLCJiaW5kIiwiZ2xvYmFsVW5pZm9ybXMiLCJUZXh0dXJlIiwiRU1QVFkiLCJmaW5pc2hSZW5kZXJQYXNzIiwicHJldmlvdXNCb3VuZHMiLCJnZXRSZW5kZXJUYXJnZXQiLCJnZXRCYWNrVGV4dHVyZSIsInNldFJlc291cmNlIiwic3R5bGUiLCJhcHBseSIsInJldHVyblRleHR1cmUiLCJmbGlwIiwiZmxvcCIsInQiLCJsYXN0UmVuZGVyU3VyZmFjZSIsImJhY2tncm91bmRSZXNvbHV0aW9uIiwieCIsInkiLCJmbG9vciIsImNvcHlUb1RleHR1cmUiLCJhcHBseUZpbHRlciIsImlucHV0Iiwib3V0cHV0IiwiUG9pbnQiLCJpc0ZpbmFsVGFyZ2V0Iiwicm9vdFJlbmRlclRhcmdldCIsImN1cnJlbnRJbmRleCIsImZpbHRlclVuaWZvcm1zIiwidW5pZm9ybXMiLCJvdXRwdXRGcmFtZSIsImlucHV0U2l6ZSIsImlucHV0UGl4ZWwiLCJpbnB1dENsYW1wIiwiZ2xvYmFsRnJhbWUiLCJvdXRwdXRUZXh0dXJlIiwibGFzdEluZGV4IiwiZmlsdGVyRGF0YTIiLCJmcmFtZSIsInBpeGVsV2lkdGgiLCJwaXhlbEhlaWdodCIsInJvb3RUZXh0dXJlIiwiaXNSb290IiwidXBkYXRlIiwidW5pZm9ybUJhdGNoIiwiYmF0Y2hVbmlmb3JtcyIsImdldFVib1Jlc291cmNlIiwiZ3JvdXBzIiwiZW5jb2RlciIsImRyYXciLCJnZW9tZXRyeSIsInNoYWRlciIsInN0YXRlIiwiX3N0YXRlIiwidG9wb2xvZ3kiLCJXRUJHTCIsIkJvdW5kcyIsImNhbGN1bGF0ZVNwcml0ZU1hdHJpeCIsIm91dHB1dE1hdHJpeCIsInNwcml0ZSIsImRhdGEiLCJtYXBwZWRNYXRyaXgiLCJfc291cmNlIiwicHJlcGVuZCIsInRleHR1cmUiLCJ0cmFuc2xhdGUiLCJhbmNob3IiLCJXZWJHTFN5c3RlbSIsIldlYkdQVVN5c3RlbSIsImxvY2FsVW5pZm9ybUJpdCIsInZlcnRleCIsImhlYWRlciIsIm1haW4iLCJlbmQiLCJsb2NhbFVuaWZvcm1CaXRHcm91cDIiLCJyZXBsYWNlIiwibG9jYWxVbmlmb3JtQml0R2wiLCJibGVuZE1vZGVJZHMiLCJub3JtYWwiLCJtdWx0aXBseSIsInNjcmVlbiIsIm92ZXJsYXkiLCJlcmFzZSIsIm1heCIsIl9TdGF0ZSIsImJsZW5kTW9kZSIsInBvbHlnb25PZmZzZXQiLCJibGVuZCIsImRlcHRoTWFzayIsIm9mZnNldHMiLCJjdWxsTW9kZSIsImN1bGxpbmciLCJjbG9ja3dpc2VGcm9udEZhY2UiLCJkZXB0aFRlc3QiLCJfYmxlbmRNb2RlIiwiX2JsZW5kTW9kZUlkIiwiX3BvbHlnb25PZmZzZXQiLCJ0b1N0cmluZyIsImZvcjJkIiwiZGVmYXVsdDJkIiwiU3RhdGUiLCJDYW52YXNQb29sIiwiY2FudmFzT3B0aW9ucyIsIl9jYW52YXNQb29sIiwiY3JlYXRlIiwiZW5hYmxlRnVsbFNjcmVlbiIsIl9jcmVhdGVDYW52YXNBbmRDb250ZXh0IiwiY2FudmFzIiwiY3JlYXRlQ2FudmFzIiwiY29udGV4dCIsImdldENvbnRleHQiLCJnZXRPcHRpbWFsQ2FudmFzQW5kQ29udGV4dCIsIm1pbldpZHRoIiwibWluSGVpZ2h0Iiwia2V5IiwiY2FudmFzQW5kQ29udGV4dCIsInJldHVybkNhbnZhc0FuZENvbnRleHQiLCJjbGVhclJlY3QiLCJjb3VudCIsInRleHR1cmVPcHRpb25zIiwiX3Bvb2xLZXlIYXNoIiwiX3RleHR1cmVQb29sIiwiY3JlYXRlVGV4dHVyZSIsInRleHR1cmVTb3VyY2UiLCJhdXRvR2FyYmFnZUNvbGxlY3QiLCJsYWJlbCIsImZyYW1lV2lkdGgiLCJmcmFtZUhlaWdodCIsInBvMldpZHRoIiwicG8ySGVpZ2h0IiwidXBkYXRlVXZzIiwidWlkIiwiZ2V0U2FtZVNpemVUZXh0dXJlIiwicmVuZGVyVGV4dHVyZSIsImRlc3Ryb3lUZXh0dXJlcyIsInRleHR1cmVzIiwiaiIsImNvbG9yMzJCaXRUb1VuaWZvcm0iLCJhYmdyIiwib3V0IiwiYWxwaGEiLCJHcmFwaGljc1BpcGUiLCJhZGFwdG9yIiwiX2dyYXBoaWNzQmF0Y2hlc0hhc2giLCJfZGVzdHJveVJlbmRlcmFibGVCb3VuZCIsImRlc3Ryb3lSZW5kZXJhYmxlIiwiX2FkYXB0b3IiLCJyZW5kZXJhYmxlR0MiLCJhZGRNYW5hZ2VkSGFzaCIsInZhbGlkYXRlUmVuZGVyYWJsZSIsImdyYXBoaWNzIiwid2FzQmF0Y2hlZCIsImdwdUNvbnRleHQiLCJncmFwaGljc0NvbnRleHQiLCJ1cGRhdGVHcHVDb250ZXh0IiwiaXNCYXRjaGFibGUiLCJhZGRSZW5kZXJhYmxlIiwiZGlkVmlld1VwZGF0ZSIsIl9yZWJ1aWxkIiwiX2FkZFRvQmF0Y2hlciIsInVwZGF0ZVJlbmRlcmFibGUiLCJiYXRjaGVzIiwiX2JhdGNoZXIiLCJ1cGRhdGVFbGVtZW50IiwiX3JlbW92ZUJhdGNoRm9yUmVuZGVyYWJsZSIsIm9mZiIsImlzUmVuZGVyYWJsZSIsImdldEdwdUNvbnRleHQiLCJjdXN0b21TaGFkZXIiLCJncm91cEJsZW5kTW9kZSIsImxvY2FsVW5pZm9ybXMiLCJyZXNvdXJjZXMiLCJ1VHJhbnNmb3JtTWF0cml4IiwidVJvdW5kIiwiX3JvdW5kUGl4ZWxzIiwiZ3JvdXBDb2xvckFscGhhIiwidUNvbG9yIiwiX2luaXRCYXRjaGVzRm9yUmVuZGVyYWJsZSIsImJhdGNoZWQiLCJiYXRjaFBpcGUiLCJfZ2V0QmF0Y2hlc0ZvclJlbmRlcmFibGUiLCJhZGRUb0JhdGNoIiwicm91bmRQaXhlbHMiLCJtYXAiLCJiYXRjaENsb25lIiwiQmF0Y2hhYmxlR3JhcGhpY3MiLCJvbiIsImdyYXBoaWNzVWlkIiwiZm9yRWFjaCIsIkdyYXBoaWNzQ29udGV4dFN5c3RlbSIsIk1lc2hQaXBlIiwibG9jYWxVbmlmb3Jtc0JpbmRHcm91cCIsIl9tZXNoRGF0YUhhc2giLCJfZ3B1QmF0Y2hhYmxlTWVzaEhhc2giLCJtZXNoIiwibWVzaERhdGEiLCJfZ2V0TWVzaERhdGEiLCJpc0JhdGNoZWQiLCJfZ2VvbWV0cnkiLCJpbmRpY2VzIiwiaW5kZXhTaXplIiwicG9zaXRpb25zIiwidmVydGV4U2l6ZSIsImJhdGNoYWJsZU1lc2giLCJfZ2V0QmF0Y2hhYmxlTWVzaCIsImNoZWNrQW5kVXBkYXRlVGV4dHVyZSIsImJhdGNoZXIiLCJncHVCYXRjaGFibGVNZXNoIiwiX3RleHR1cmUiLCJncHVNZXNoIiwiZ2V0QWRqdXN0ZWRCbGVuZE1vZGVCbGVuZCIsIl9pbml0TWVzaERhdGEiLCJfaW5pdEJhdGNoYWJsZU1lc2giLCJCYXRjaGFibGVNZXNoIiwidHJhbnNmb3JtIiwiYmF0Y2hlck5hbWUiLCJwYWNrQXNRdWFkIiwiaW5kZXhPZmZzZXQiLCJhdHRyaWJ1dGVPZmZzZXQiLCJfYmF0Y2giLCJfdXZVcGRhdGVJZCIsIl90ZXh0dXJlTWF0cml4VXBkYXRlSWQiLCJyZXNldCIsInV2cyIsInV2QnVmZmVyIiwiZ2V0QnVmZmVyIiwidHJhbnNmb3JtZWRVdnMiLCJ0ZXh0dXJlTWF0cml4IiwiaXNTaW1wbGUiLCJfdHJhbnNmb3JtZWRVdnMiLCJfdXBkYXRlSUQiLCJtdWx0aXBseVV2cyIsImNvbG9yIiwiYXR0cmlidXRlU2l6ZSIsIl9NZXNoR2VvbWV0cnkiLCJhcmdzIiwiZGVmYXVsdE9wdGlvbnMiLCJzaHJpbmtUb0ZpdCIsInNocmlua0J1ZmZlcnNUb0ZpdCIsInN1cGVyIiwidXNhZ2UiLCJWRVJURVgiLCJDT1BZX0RTVCIsImFVViIsIklOREVYIiwiYmF0Y2hNb2RlIiwiTWVzaEdlb21ldHJ5IiwiR2xQYXJ0aWNsZUNvbnRhaW5lckFkYXB0b3IiLCJwYXJ0aWNsZUNvbnRhaW5lclBvcCIsImRlZmF1bHRTaGFkZXIiLCJ1VGV4dHVyZSIsImdsIiwiZ2V0QnVmZmVycyIsImdsUHJvZ3JhbSIsImdsVHlwZSIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiVU5TSUdORURfU0hPUlQiLCJVTlNJR05FRF9JTlQiLCJkcmF3RWxlbWVudHMiLCJUUklBTkdMRVMiLCJwYXJ0aWNsZUNoaWxkcmVuIiwiY3JlYXRlSW5kaWNlc0ZvclF1YWRzIiwic2l6ZSIsIm91dEJ1ZmZlciIsInRvdGFsSW5kaWNlcyIsIlVpbnQxNkFycmF5IiwiRXJyb3IiLCJnZW5lcmF0ZVVwZGF0ZUZ1bmN0aW9uIiwicHJvcGVydGllcyIsImR5bmFtaWMiLCJmdW5jRnJhZ21lbnRzIiwicHJvcGVydHkiLCJjb2RlIiwiZ2V0QXR0cmlidXRlSW5mb0Zyb21Gb3JtYXQiLCJ1bnNoaWZ0IiwiZnVuY3Rpb25Tb3VyY2UiLCJqb2luIiwiRnVuY3Rpb24iLCJQYXJ0aWNsZUJ1ZmZlciIsIl9zaXplIiwiX2dlbmVyYXRlUGFydGljbGVVcGRhdGVDYWNoZSIsInN0YXRpY1ZlcnRleFNpemUiLCJkeW5hbWljVmVydGV4U2l6ZSIsImF0dHJpYnV0ZUluZm8iLCJfZHluYW1pY1N0cmlkZSIsIl9zdGF0aWNTdHJpZGUiLCJzdGF0aWNBdHRyaWJ1dGVCdWZmZXIiLCJWaWV3YWJsZUJ1ZmZlciIsImR5bmFtaWNBdHRyaWJ1dGVCdWZmZXIiLCJkeW5hbWljT2Zmc2V0Iiwic3RhdGljT2Zmc2V0IiwiX3N0YXRpY0J1ZmZlciIsIkJ1ZmZlciIsIl9keW5hbWljQnVmZmVyIiwiYWRkQXR0cmlidXRlIiwiYXR0cmlidXRlTmFtZSIsImFkZEluZGV4IiwidXBsb2FkRnVuY3Rpb24iLCJnZXRQYXJ0aWNsZVVwZGF0ZSIsIl9keW5hbWljVXBsb2FkIiwiZHluYW1pY1VwZGF0ZSIsIl9zdGF0aWNVcGxvYWQiLCJzdGF0aWNVcGRhdGUiLCJrZXlHZW4iLCJnZXRQYXJ0aWNsZVN5bmNLZXkiLCJnZW5lcmF0ZVBhcnRpY2xlVXBkYXRlIiwiZ2VuZXJhdGVQYXJ0aWNsZVVwZGF0ZUZ1bmN0aW9uIiwicGFydGljbGVzIiwidXBsb2FkU3RhdGljIiwic2V0RGF0YVdpdGhTaXplIiwiYnl0ZUxlbmd0aCIsImZsb2F0MzJWaWV3IiwidWludDMyVmlldyIsIndnc2wiLCJQYXJ0aWNsZVNoYWRlciIsIlNoYWRlciIsIkdsUHJvZ3JhbSIsImZyb20iLCJmcmFnbWVudCIsImdwdVByb2dyYW0iLCJHcHVQcm9ncmFtIiwiZW50cnlQb2ludCIsIldISVRFIiwidVNhbXBsZXIiLCJUZXh0dXJlU3R5bGUiLCJ1VHJhbnNsYXRpb25NYXRyaXgiLCJDb2xvciIsInVSZXNvbHV0aW9uIiwiUGFydGljbGVDb250YWluZXJQaXBlIiwiX2dwdUJ1ZmZlckhhc2giLCJfcmVuZGVyYWJsZSIsIl9pbml0QnVmZmVyIiwiX3Byb3BlcnRpZXMiLCJfY2hpbGRyZW5EaXJ0eSIsInRyYW5zZm9ybWF0aW9uTWF0cml4IiwiZ2xvYmFsVW5pZm9ybURhdGEiLCJwcm9qZWN0aW9uTWF0cml4IiwiR2xQYXJ0aWNsZUNvbnRhaW5lclBpcGUiLCJHcHVQYXJ0aWNsZUNvbnRhaW5lckFkYXB0b3IiLCJnZXRVbmlmb3JtQmluZEdyb3VwIiwiZ2V0VGV4dHVyZUJpbmRHcm91cCIsIkdwdVBhcnRpY2xlQ29udGFpbmVyUGlwZSIsIl9QbGFuZUdlb21ldHJ5IiwiZGVwcmVjYXRpb24iLCJ2ZXJ0aWNlc1giLCJ2ZXJ0aWNlc1kiLCJidWlsZCIsInRvdGFsIiwidmVydHMiLCJzaXplWCIsInNpemVZIiwidG90YWxTdWIiLCJ4cG9zIiwieXBvcyIsInZhbHVlMiIsInZhbHVlMyIsInZhbHVlNCIsImJ1ZmZlcnMiLCJQbGFuZUdlb21ldHJ5IiwiX05pbmVTbGljZUdlb21ldHJ5IiwiX29yaWdpbmFsV2lkdGgiLCJvcmlnaW5hbFdpZHRoIiwiX29yaWdpbmFsSGVpZ2h0Iiwib3JpZ2luYWxIZWlnaHQiLCJfbGVmdFdpZHRoIiwibGVmdFdpZHRoIiwiX3JpZ2h0V2lkdGgiLCJyaWdodFdpZHRoIiwiX3RvcEhlaWdodCIsInRvcEhlaWdodCIsIl9ib3R0b21IZWlnaHQiLCJib3R0b21IZWlnaHQiLCJ1cGRhdGVQb3NpdGlvbnMiLCJ3Iiwic2NhbGVXIiwiaCIsInNjYWxlSCIsIl91dnciLCJfdXZoIiwiTmluZVNsaWNlR2VvbWV0cnkiLCJOaW5lU2xpY2VTcHJpdGVQaXBlIiwiX2dwdVNwcml0ZUhhc2giLCJncHVTcHJpdGUiLCJfZ2V0R3B1U3ByaXRlIiwiX3VwZGF0ZUJhdGNoYWJsZVNwcml0ZSIsImJhdGNoYWJsZVNwcml0ZSIsIl9pbml0R1BVU3ByaXRlIiwidGlsaW5nQml0IiwidGlsaW5nQml0R2wiLCJUaWxpbmdTcHJpdGVTaGFkZXIiLCJiaXRzIiwicm91bmRQaXhlbHNCaXQiLCJ0aWxpbmdVbmlmb3JtcyIsInVNYXBDb29yZCIsInVDbGFtcEZyYW1lIiwidUNsYW1wT2Zmc2V0IiwidVRleHR1cmVUcmFuc2Zvcm0iLCJ1U2l6ZUFuY2hvciIsInVwZGF0ZVVuaWZvcm1zIiwiYW5jaG9yWCIsImFuY2hvclkiLCJ0ZXh0dXJlV2lkdGgiLCJ0ZXh0dXJlSGVpZ2h0IiwiYSIsImIiLCJjIiwiZCIsInR4IiwidHkiLCJtYXBDb29yZCIsIlF1YWRHZW9tZXRyeSIsInNoYXJlZFF1YWQiLCJUaWxpbmdTcHJpdGVQaXBlIiwiX3RpbGluZ1Nwcml0ZURhdGFIYXNoIiwidGlsaW5nU3ByaXRlRGF0YSIsIl9nZXRUaWxpbmdTcHJpdGVEYXRhIiwiY291bGRCYXRjaCIsImNhbkJhdGNoIiwiX3VwZGF0ZUNhbkJhdGNoIiwidGlsaW5nU3ByaXRlIiwiX3VwZGF0ZUJhdGNoYWJsZU1lc2giLCJiaW5kR3JvdXAiLCJfdGlsZVRyYW5zZm9ybSIsIl9pbml0VGlsaW5nU3ByaXRlRGF0YSIsInNsaWNlIiwicmVuZGVyYWJsZURhdGEiLCJhZGRyZXNzTW9kZSIsIl9hcHBseUFuY2hvclRvVGV4dHVyZSIsImNvcHlGcm9tIiwiYXJyYXkiLCJpbmRleCIsInNldFV2cyIsInNldFBvc2l0aW9ucyIsIl9ub25Qb3dPZjJ3cmFwcGluZyIsInN1cHBvcnRzIiwibm9uUG93T2Yyd3JhcHBpbmciLCJpc1Bvd2VyT2ZUd28iLCJCYXRjaGFibGVTcHJpdGUiLCJfYXR0cmlidXRlU3RhcnQiLCJsb2NhbFVuaWZvcm1NU0RGQml0IiwibG9jYWxVbmlmb3JtTVNERkJpdEdsIiwibVNERkJpdCIsIm1TREZCaXRHbCIsIlNkZlNoYWRlciIsInVEaXN0YW5jZSIsIm1heFRleHR1cmVzIiwiY29sb3JCaXQiLCJnZW5lcmF0ZVRleHR1cmVCYXRjaEJpdCIsImJhdGNoU2FtcGxlcnMiLCJnZXRCYXRjaFNhbXBsZXJzVW5pZm9ybUdyb3VwIiwiQWJzdHJhY3RCaXRtYXBGb250IiwiYXJndW1lbnRzIiwiY2hhcnMiLCJsaW5lSGVpZ2h0IiwiZm9udEZhbWlseSIsImZvbnRNZXRyaWNzIiwiZm9udFNpemUiLCJhc2NlbnQiLCJkZXNjZW50IiwiYmFzZUxpbmVPZmZzZXQiLCJkaXN0YW5jZUZpZWxkIiwicmFuZ2UiLCJwYWdlcyIsImFwcGx5RmlsbEFzVGludCIsImJhc2VNZWFzdXJlbWVudEZvbnRTaXplIiwiYmFzZVJlbmRlcmVkRm9udFNpemUiLCJmb250IiwicGFnZVRleHR1cmVzIiwiZGlzdGFuY2VGaWVsZFJhbmdlIiwiZGlzdGFuY2VGaWVsZFR5cGUiLCJlbWl0IiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicGFnZSIsInJlc29sdmVDaGFyYWN0ZXJzIiwicmVzdWx0IiwiaXRlbSIsIkFycmF5IiwiaXNBcnJheSIsInN0YXJ0Q29kZSIsImNoYXJDb2RlQXQiLCJlbmRDb2RlIiwiaTIiLCJqMiIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsIl9EeW5hbWljQml0bWFwRm9udCIsIl9wYWRkaW5nIiwiX21lYXN1cmVDYWNoZSIsIl9jdXJyZW50Q2hhcnMiLCJfY3VycmVudFgiLCJfY3VycmVudFkiLCJfY3VycmVudFBhZ2VJbmRleCIsIl9za2lwS2VybmluZyIsImR5bmFtaWNPcHRpb25zIiwiX3RleHR1cmVTaXplIiwidGV4dHVyZVNpemUiLCJfbWlwbWFwIiwibWlwbWFwIiwiY2xvbmUiLCJvdmVycmlkZUZpbGwiLCJfZmlsbCIsImZpbGwiLCJyZXF1ZXN0ZWRGb250U2l6ZSIsImZvbnRTdHJpbmdGcm9tVGV4dFN0eWxlIiwib3ZlcnJpZGVTaXplIiwiX3N0cm9rZSIsIl9zdHlsZSIsInNraXBLZXJuaW5nIiwiQ2FudmFzVGV4dE1ldHJpY3MiLCJtZWFzdXJlRm9udCIsImVuc3VyZUNoYXJhY3RlcnMiLCJjaGFyTGlzdCIsImNoYXIiLCJpbmNsdWRlcyIsInNlbGYiLCJpbmRleE9mIiwicGFnZURhdGEiLCJfbmV4dFBhZ2UiLCJjdXJyZW50WCIsImN1cnJlbnRZIiwiZm9udFNjYWxlIiwibWF4Q2hhckhlaWdodCIsInNraXBUZXh0dXJlIiwibWV0cmljcyIsIm1lYXN1cmVUZXh0IiwidGV4dHVyZUdseXBoV2lkdGgiLCJmb250U3R5bGUiLCJwYWRkZWRXaWR0aCIsInBhZGRlZEhlaWdodCIsInBhZ2VEYXRhMiIsInhBZHZhbmNlIiwiZHJvcFNoYWRvdyIsImRpc3RhbmNlIiwiaWQiLCJjb2RlUG9pbnRBdCIsInhPZmZzZXQiLCJ5T2Zmc2V0Iiwia2VybmluZyIsIl9kcmF3R2x5cGgiLCJweCIsInB5IiwiUmVjdGFuZ2xlIiwiX2FwcGx5S2VybmluZyIsIm5ld0NoYXJzIiwibWVhc3VyZUNhY2hlIiwiZmlyc3QiLCJzZWNvbmQiLCJjMSIsImMyIiwiYW1vdW50IiwidGV4dHVyZVJlc29sdXRpb24iLCJfc2V0dXBDb250ZXh0IiwiSW1hZ2VTb3VyY2UiLCJyZXNvdXJjZSIsImFscGhhTW9kZSIsImF1dG9HZW5lcmF0ZU1pcG1hcHMiLCJ0ZXh0QmFzZWxpbmUiLCJzdHJva2UiLCJzdHJva2VUaGlja25lc3MiLCJsaW5lV2lkdGgiLCJsaW5lSm9pbiIsIm1pdGVyTGltaXQiLCJzdHJva2VTdHlsZSIsImdldENhbnZhc0ZpbGxTdHlsZSIsImZpbGxTdHlsZSIsInNoYWRvd09wdGlvbnMiLCJyZ2IiLCJzZXRWYWx1ZSIsInRvQXJyYXkiLCJkcm9wU2hhZG93Qmx1ciIsImJsdXIiLCJkcm9wU2hhZG93RGlzdGFuY2UiLCJzaGFkb3dDb2xvciIsInNoYWRvd0JsdXIiLCJzaGFkb3dPZmZzZXRYIiwiY29zIiwiYW5nbGUiLCJzaGFkb3dPZmZzZXRZIiwic2luIiwidGV4dCIsImZvbnRQcm9wZXJ0aWVzIiwic3Ryb2tlVGV4dCIsImZpbGxUZXh0IiwiVGV4dFN0eWxlIiwiRHluYW1pY0JpdG1hcEZvbnQiLCJnZXRCaXRtYXBUZXh0TGF5b3V0IiwidHJpbUVuZCIsImxheW91dERhdGEiLCJvZmZzZXRZIiwibGluZXMiLCJjaGFyUG9zaXRpb25zIiwic3BhY2VXaWR0aCIsInNwYWNlc0luZGV4IiwiY3VycmVudExpbmUiLCJwcmV2aW91c0NoYXIiLCJmaXJzdFdvcmQiLCJjdXJyZW50V29yZCIsInNwYWNlV29yZCIsIm5leHRXb3JkIiwid29yZCIsInBvc2l0aW9uIiwibmV4dExpbmUiLCJsYXN0Q2hhciIsImFkanVzdGVkTGV0dGVyU3BhY2luZyIsImxldHRlclNwYWNpbmciLCJhZGp1c3RlZFdvcmRXcmFwV2lkdGgiLCJ3b3JkV3JhcFdpZHRoIiwiaXNFbmQiLCJjaGFyRGF0YSIsInRlc3QiLCJ3b3JkV3JhcCIsIm5leHRDaGFyV2lkdGgiLCJhbGlnbiIsIm1lYXN1cmVtZW50RGF0YSIsImxpbmUiLCJhbGlnbkNlbnRlciIsImFsaWduUmlnaHQiLCJpbmR5Iiwic3BhY2VJbmRleCIsInRvdGFsU3BhY2VzIiwiYWxpZ25KdXN0aWZ5IiwiZm9udENvdW50IiwiQml0bWFwRm9udE1hbmFnZXIiLCJBTFBIQSIsIk5VTUVSSUMiLCJBTFBIQU5VTUVSSUMiLCJBU0NJSSIsImdldEZvbnQiLCJmb250RmFtaWx5S2V5Iiwic3R5bGVLZXkiLCJzdWJzdHJpbmciLCJsYXN0SW5kZXhPZiIsIkNhY2hlIiwiaGFzIiwiZm50Iiwib25jZSIsImR5bmFtaWNGb250IiwiZ2V0TGF5b3V0IiwiYml0bWFwRm9udCIsImluc3RhbGwiLCJ0ZXh0U3R5bGUiLCJmbGF0Q2hhcnMiLCJ1bmluc3RhbGwiLCJjYWNoZUtleSIsIkJpdG1hcFRleHRQaXBlIiwiX2dwdUJpdG1hcFRleHQiLCJiaXRtYXBUZXh0IiwiZ3JhcGhpY3NSZW5kZXJhYmxlIiwiX2dldEdwdUJpdG1hcFRleHQiLCJfZGlkVGV4dFVwZGF0ZSIsIl91cGRhdGVDb250ZXh0Iiwic3luY1dpdGhQcm94eSIsIl91cGRhdGVEaXN0YW5jZUZpZWxkIiwiX2Rlc3Ryb3lSZW5kZXJhYmxlQnlVaWQiLCJyZW5kZXJhYmxlVWlkIiwicHJveHlHcmFwaGljcyIsImJpdG1hcFRleHRMYXlvdXQiLCJfYW5jaG9yIiwiX3giLCJfeSIsInRpbnQiLCJyb3VuZCIsImluaXRHcHVUZXh0IiwicHJveHlSZW5kZXJhYmxlIiwiR3JhcGhpY3MiLCJkeCIsInNxcnQiLCJkeSIsIndvcmxkU2NhbGUiLCJhYnMiLCJwcm94eSIsImdyb3VwQ29sb3IiLCJncm91cEFscGhhIiwiSFRNTFRleHRQaXBlIiwiX2dwdVRleHQiLCJydW5uZXJzIiwicmVzb2x1dGlvbkNoYW5nZSIsImdwdVRleHQiLCJfYXV0b1Jlc29sdXRpb24iLCJvblZpZXdVcGRhdGUiLCJodG1sVGV4dCIsIl9nZXRHcHVUZXh0IiwibmV3S2V5IiwiX2dldEtleSIsInRleHR1cmVOZWVkc1VwbG9hZGluZyIsImN1cnJlbnRLZXkiLCJfdXBkYXRlVGV4dCIsIl9kZXN0cm95UmVuZGVyYWJsZUJ5SWQiLCJodG1sVGV4dFVpZCIsImRlY3JlYXNlUmVmZXJlbmNlQ291bnQiLCJfdXBkYXRlR3B1VGV4dCIsImNhdGNoIiwiZSIsImNvbnNvbGUiLCJlcnJvciIsInVwZGF0ZVF1YWRCb3VuZHMiLCJnZW5lcmF0aW5nVGV4dHVyZSIsImdldE1hbmFnZWRUZXh0dXJlIiwiZ3B1VGV4dERhdGEiLCJuc3N2ZyIsIm5zeGh0bWwiLCJIVE1MVGV4dFJlbmRlckRhdGEiLCJzdmdSb290IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJmb3JlaWduT2JqZWN0IiwiZG9tRWxlbWVudCIsInN0eWxlRWxlbWVudCIsImltYWdlIiwiSW1hZ2UiLCJzZXRBdHRyaWJ1dGUiLCJvdmVyZmxvdyIsImFwcGVuZENoaWxkIiwiZHJvcFNoYWRvd1RvQ1NTIiwiZHJvcFNoYWRvd1N0eWxlIiwic2V0QWxwaGEiLCJ0b0hleGEiLCJzdHJva2VUb0NTUyIsInRvSGV4IiwidGVtcGxhdGVzIiwiZm9udFdlaWdodCIsImZvbnRWYXJpYW50Iiwid2hpdGVTcGFjZSIsImJyZWFrV29yZHMiLCJIVE1MVGV4dFN0eWxlIiwiX2Nzc092ZXJyaWRlcyIsImNzc092ZXJyaWRlcyIsInRhZ1N0eWxlcyIsIl9nZW5lcmF0ZUtleSIsIl9zdHlsZUtleSIsImdlbmVyYXRlVGV4dFN0eWxlS2V5IiwiX2Nzc1N0eWxlIiwiY3NzU3R5bGUiLCJjc3NTdHlsZXMiLCJ0YWdTdHlsZSIsImNzc1RhZ1N0eWxlIiwidGFnU3R5bGVUb0NTUyIsInRleHRTdHlsZVRvQ1NTIiwiYWRkT3ZlcnJpZGUiLCJ0b0FkZCIsInYiLCJyZW1vdmVPdmVycmlkZSIsInRvUmVtb3ZlIiwiYXN5bmMiLCJsb2FkRm9udENTUyIsInVybCIsImRhdGFTcmMiLCJyZXNwb25zZSIsImZldGNoIiwiYmxvYiIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9ubG9hZGVuZCIsIm9uZXJyb3IiLCJyZWFkQXNEYXRhVVJMIiwibG9hZEZvbnRBc0Jhc2U2NCIsIkZvbnRTdHlsZVByb21pc2VDYWNoZSIsIk1hcCIsInRlbXBIVE1MVGV4dFJlbmRlckRhdGEiLCJIVE1MVGV4dFN5c3RlbSIsIl9hY3RpdmVUZXh0dXJlcyIsIl9jcmVhdGVDYW52YXMiLCJXRUJHUFUiLCJnZXRUZXh0dXJlIiwiX2J1aWxkVGV4dHVyZVByb21pc2UiLCJ0ZXh0S2V5IiwiX2luY3JlYXNlUmVmZXJlbmNlQ291bnQiLCJwcm9taXNlIiwidGhlbiIsInVzYWdlQ291bnQiLCJodG1sVGV4dERhdGEiLCJmb250RmFtaWxpZXMiLCJkZWR1cGUiLCJtYXRjaGVzIiwibWF0Y2giLCJhZGRGb250RmFtaWx5IiwiZm9udEZhbWlseTIiLCJzcGxpdCIsInRyaW0iLCJleHRyYWN0Rm9udEZhbWlsaWVzIiwiZm9udENTUyIsImZvbnRQcm9taXNlcyIsImFsbCIsImdldEZvbnRDc3MiLCJkZWZhdWx0VGV4dFN0eWxlIiwibWVhc3VyZWQiLCJmb250U3R5bGVDU1MiLCJodG1sVGV4dFJlbmRlckRhdGEiLCJpbm5lckhUTUwiLCJ0ZXh0Q29udGVudCIsImJvZHkiLCJjb250ZW50Qm91bmRzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZG91YmxlUGFkZGluZyIsIm1lYXN1cmVIdG1sVGV4dCIsInN2Z1VSTCIsIlhNTFNlcmlhbGl6ZXIiLCJzZXJpYWxpemVUb1N0cmluZyIsImdldFNWR1VybCIsImRlbGF5IiwicmVzb2x2ZTIiLCJzZXRUaW1lb3V0Iiwib25sb2FkIiwic3JjIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiY3Jvc3NPcmlnaW4iLCJsb2FkU1ZHSW1hZ2UiLCJ1c2VyQWdlbnQiLCJnZXROYXZpZ2F0b3IiLCJpc1NhZmFyaSIsImRyYXdJbWFnZSIsImdldFRlbXBvcmFyeUNhbnZhc0Zyb21JbWFnZSIsImdldFBvMlRleHR1cmVGcm9tU291cmNlIiwiaW5pdFNvdXJjZSIsImFjdGl2ZVRleHR1cmUiLCJfY2xlYW5VcCIsInVwbG9hZE1ldGhvZElkIiwiZ2V0UmVmZXJlbmNlQ291bnQiLCJDYW52YXNTeXN0ZW0iLCJkZWZhdWx0Rm9udE9wdGlvbnMiLCJwYXR0ZXJuIiwiY3JlYXRlUGF0dGVybiIsInNldFRyYW5zZm9ybSIsImZpbGxQYXR0ZXJuIiwiZmlsbEdyYWRpZW50IiwiZ3JhZGllbnQiLCJjcmVhdGVMaW5lYXJHcmFkaWVudCIsIngwIiwieTAiLCJ4MSIsInkxIiwiZ3JhZGllbnRTdG9wcyIsImFkZENvbG9yU3RvcCIsIkNhbnZhc1RleHRQaXBlIiwidGV4dFVpZCIsImNhbnZhc1RleHQiLCJjaGVja1JvdyIsImNoZWNrQ29sdW1uIiwidG9wIiwiYm90dG9tIiwiQ2FudmFzVGV4dFN5c3RlbSIsImdldFRleHR1cmVTaXplIiwiX3RleHRLZXkiLCJjcmVhdGVUZXh0dXJlQW5kQ2FudmFzIiwicmVuZGVyVGV4dFRvQ2FudmFzIiwidHJpbW1lZCIsIndpbGxSZWFkRnJlcXVlbnRseSIsIlR5cGVFcnJvciIsImdldEltYWdlRGF0YSIsImxlZnQiLCJyaWdodCIsImdldENhbnZhc0JvdW5kaW5nQm94IiwibGluZVdpZHRocyIsIm1heExpbmVXaWR0aCIsInJlc2V0VHJhbnNmb3JtIiwibGluZUNhcCIsImNhcCIsImxpbmVQb3NpdGlvblgiLCJsaW5lUG9zaXRpb25ZIiwicGFzc2VzQ291bnQiLCJpc1NoYWRvd1Bhc3MiLCJkc09mZnNldFRleHQiLCJkc09mZnNldFNoYWRvdyIsImRyb3BTaGFkb3dDb2xvciIsImRyb3BTaGFkb3dBbHBoYSIsInRvUmdiYVN0cmluZyIsImxpbmVQb3NpdGlvbllTaGlmdCIsInN0cm9rZVdpZHRoIiwiX2RyYXdMZXR0ZXJTcGFjaW5nIiwiaXNTdHJva2UiLCJ1c2VFeHBlcmltZW50YWxMZXR0ZXJTcGFjaW5nIiwiZXhwZXJpbWVudGFsTGV0dGVyU3BhY2luZ1N1cHBvcnRlZCIsImV4cGVyaW1lbnRhbExldHRlclNwYWNpbmciLCJ0ZXh0TGV0dGVyU3BhY2luZyIsImN1cnJlbnRQb3NpdGlvbiIsInN0cmluZ0FycmF5IiwiZ3JhcGhlbWVTZWdtZW50ZXIiLCJwcmV2aW91c1dpZHRoIiwiY3VycmVudFdpZHRoIiwiY3VycmVudENoYXIiLCJ0ZXh0U3RyIiwidGVtcEJvdW5kcyJdLCJzb3VyY2VSb290IjoiIn0=